{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.7"
    },
    "colab": {
      "name": "Copy of P4M Notebook 3.ipynb",
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nesnejeissac/Math-152/blob/main/Notebook%203\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6wh71ZCco1Nc"
      },
      "source": [
        "# Part 3:  Lists\n",
        "\n",
        "Python provides a powerful set of tools to create and manipulate lists of data. In this part, we take a deep dive into the Python list type.  This includes mutability, list methods, and slicing.\n",
        "\n",
        "\n",
        "Then we use Python lists to implement and optimize the Sieve of Eratosthenes, which will produce a list of all prime numbers up to a big number (like 10 million) in a snap. Along the way, we introduce some Python techniques for data analysis and visualization."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V1d8-qavo1Ng"
      },
      "source": [
        "## Primality testing"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o8GcrfMBo1Ng"
      },
      "source": [
        "Before diving into lists, we recall the **brute force** primality test that we created in the last lesson.  To test whether a number `n` is prime, we can simply check for factors.  This yields the following primality test."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PmShUfrWo1Nh"
      },
      "source": [
        "def is_prime(n):\n",
        "    '''\n",
        "    Checks whether the argument n is a prime number.\n",
        "    Uses a brute force search for factors between 1 and n.\n",
        "    '''\n",
        "    for j in range(2,n):  # the range of numbers 2,3,...,n-1.\n",
        "        if n%j == 0:  # is n divisible by j?\n",
        "            print(\"{} is a factor of {}.\".format(j,n))\n",
        "            return False\n",
        "    return True"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ps6dGQ_lo1Nh"
      },
      "source": [
        "We can also implement this test with a **while loop** instead of a for loop.  This doesn't make much of a difference, in Python 3.x.  (In Python 2.x, this would save memory)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uyU1DxPjo1Nh"
      },
      "source": [
        "def is_prime(n):\n",
        "    '''\n",
        "    Checks whether the argument n is a prime number.\n",
        "    Uses a brute force search for factors between 1 and n.\n",
        "    '''\n",
        "    j = 2\n",
        "    while j < n:  # j will proceed through the list of numbers 2,3,...,n-1.\n",
        "        if n%j == 0:  # is n divisible by j?\n",
        "            print(\"{} is a factor of {}.\".format(j,n))\n",
        "            return False\n",
        "        j = j + 1  # There's a Python abbreviation for this:  j += 1.\n",
        "    return True"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n8VNDo3Ro1Nh",
        "outputId": "d30af2e6-3890-4938-ecae-d6bc1e7ee4f9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "is_prime(10001)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "73 is a factor of 10001.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EwsTzmDJo1Nh",
        "outputId": "c411864c-fbb7-4db8-b35c-a7e74a2b270d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "is_prime(101)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LMiisxZko1Ni"
      },
      "source": [
        "If $n$ is a prime number, then the `is_prime(n)` function will iterate through all the numbers between $2$ and $n-1$.  But this is overkill!  Indeed, if $n$ is not prime, it will have a factor between $2$ and the square root of $n$.  This is because factors come in pairs:  if $ab = n$, then one of the factors, $a$ or $b$, must be less than or equal to the square root of $n$.  So it suffices to search for factors up to (and including) the square root of $n$."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QlS5mEtko1Ni"
      },
      "source": [
        "Even though we've made our own sqrt function, we load a fast one from the [standard math package](https://docs.python.org/3/library/math.html).  You can use this for square roots, trig functions, logs, and more.  Click the previous link for documentation.  This package doesn't load automatically when you start Python, so you have to load it with a little Python code."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "StYgB3R2o1Ni"
      },
      "source": [
        "from math import sqrt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g5qCsftto1Ni"
      },
      "source": [
        "This command **imports** the square root function (`sqrt`) from the **package** called `math`.  Now you can find square roots."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yky_CASQo1Ni",
        "outputId": "6f61ec67-e61d-464e-87b1-cad2700ce2bc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "sqrt(1000)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "31.622776601683793"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G6KIJi-Go1Ni"
      },
      "source": [
        "There are a few different ways to import functions from packages.  The above syntax is a good starting point, but sometimes problems can arise if different packages have functions with the same name.  Here are a few methods of importing the `sqrt` function and how they differ.\n",
        "\n",
        "`from math import sqrt`:  After this command, `sqrt` will refer to the function from the `math` package (overriding any previous definition).\n",
        "\n",
        "`import math`:  After this command, all the functions from the `math` package will be imported.  But to call `sqrt`, you would type a command like `math.sqrt(1000)`.  This is convenient if there are potential conflicts with other packages.\n",
        "\n",
        "`from math import *`:  After this command, all the functions from the `math` package will be imported.  To call them, you can access them directly with a command like `sqrt(1000)`.  This can easily cause conflicts with other packages, since packages can have hundreds of functions in them!\n",
        "\n",
        "`import math as mth`:  Some people like abbreviations.  This imports all the functions from the `math` package.  To call one, you type a command like `mth.sqrt(1000)`. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DkMBWCH2o1Nj"
      },
      "source": [
        "import math"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JCOkoqBJo1Nj",
        "outputId": "915211f0-a3ea-4429-8062-34e6a6d62c89",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "math.sqrt(1000)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "31.622776601683793"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1wHHxCBvo1Nj",
        "outputId": "cf4ddb20-f284-44f3-ad2d-074970e86ffb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        }
      },
      "source": [
        "factorial(10)  # This will cause an error!"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-9-e379444d4994>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfactorial\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# This will cause an error!\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'factorial' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q3_f65bdo1Nj",
        "outputId": "41faad86-bd0e-4abd-bcae-323f99d3b90d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "math.factorial(10)  # This is ok, since the math package comes with a function called factorial."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3628800"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PercB7IRo1Nj"
      },
      "source": [
        "Now let's improve our `is_prime(n)` function by searching for factors only up to the square root of the number `n`.  We consider two options."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1jFrsNtvo1Nj"
      },
      "source": [
        "def is_prime_slow(n):\n",
        "    '''\n",
        "    Checks whether the argument n is a prime number.\n",
        "    Uses a brute force search for factors between 1 and n.\n",
        "    '''\n",
        "    j = 2\n",
        "    while j <= sqrt(n):  # j will proceed through the list of numbers 2,3,... up to sqrt(n).\n",
        "        if n%j == 0:  # is n divisible by j?\n",
        "            print(\"{} is a factor of {}.\".format(j,n))\n",
        "            return False\n",
        "        j = j + 1  # There's a Python abbreviation for this:  j += 1.\n",
        "    return True"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kivEWwP8o1Nj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ca67345b-a002-449b-9073-12e469967d10"
      },
      "source": [
        "def is_prime_fast(n):\n",
        "    '''\n",
        "    Checks whether the argument n is a prime number.\n",
        "    Uses a brute force search for factors between 1 and n.\n",
        "    '''\n",
        "    j = 2\n",
        "    root_n = sqrt(n)\n",
        "    while j <= root_n:  # j will proceed through the list of numbers 2,3,... up to sqrt(n).\n",
        "        if n%j == 0:  # is n divisible by j?\n",
        "            print(\"{} is a factor of {}.\".format(j,n))\n",
        "            return False\n",
        "        j = j + 1  # There's a Python abbreviation for this:  j += 1.\n",
        "    return True\n",
        "is_prime_fast(9)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3 is a factor of 9.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MYRn_kwAo1Nk",
        "outputId": "812b53a8-8f59-4d58-e3a2-ea709dae136a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "is_prime_fast(1000003)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CycTNs3Yo1Nk",
        "outputId": "d19f1833-b9b7-43ae-eb68-89153a0431dc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "is_prime_slow(1000003)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a2_C-DRco1Nk"
      },
      "source": [
        "I've chosen function names with \"fast\" and \"slow\" in them.  But what makes them faster or slower?  Are they faster than the original?  And how can we tell?\n",
        "\n",
        "Python comes with a great set of tools for these questions.  The simplest (for the user) are the time utilities.  By placing the **magic** `%timeit` before a command, Python does something like the following:\n",
        "\n",
        "1.  Python makes a little container in your computer devoted to the computations, to avoid interference from other running programs if possible.\n",
        "2.  Python executes the command lots and lots of times.\n",
        "3.  Python averages the amount of time taken for each execution.  \n",
        "\n",
        "Give it a try below, to compare the speed of the functions `is_prime` (the original) with the new `is_prime_fast` and `is_prime_slow`.  Note that the `%timeit` commands might take a little while."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gBRDJBA3a2U9"
      },
      "source": [
        "*Warning!*  Before running the is_prime_fast and is_prime_slow functions within %timeit, please *remove* all print statements from the functions and recompile them.  Otherwise, you might end up printing a million things in your browser window, possibly crashing your computer."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9362eqX8o1Nk",
        "outputId": "80a3f292-2d42-4881-eefc-0f63f859c401",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "%timeit is_prime_fast(1000003)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10000 loops, best of 5: 153 µs per loop\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GlQqgs6Fo1Nk",
        "outputId": "caa4302a-3cbf-4d12-8306-eaa8469a2591",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "%timeit is_prime_slow(1000003)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1000 loops, best of 5: 217 µs per loop\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MMoNyEsOo1Nk",
        "outputId": "30587ca8-2a0b-403e-e7c8-45463083bd39",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "%timeit is_prime(1000003)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 loops, best of 5: 136 ms per loop\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uR7IkJbEo1Nk"
      },
      "source": [
        "Time is measured in seconds, milliseconds (1 ms = 1/1000 second), microseconds (1 µs = 1/1,000,000 second), and nanoseconds (1 ns = 1/1,000,000,000 second).  So it might appear at first that `is_prime` is the fastest, or about the same speed.  But check the units!  The other two approaches are about a thousand times faster!  How much faster were they on your computer?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hPOknCuUo1Nk",
        "outputId": "d3b7c426-1782-4516-c889-02ad8e5e0685",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "is_prime_fast(10000000000037)  # Don't try this with `is_prime` unless you want to wait for a long time!"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YtkronFFo1Nl"
      },
      "source": [
        "Indeed, the `is_prime_fast(n)` function will go through a loop of length about `sqrt(n)` when `n` is prime.  But `is_prime(n)` will go through a loop of length about `n`.  Since `sqrt(n)` is much less than `n`, especially when `n` is large, the `is_prime_fast(n)` function is much faster.\n",
        "\n",
        "Between `is_prime_fast` and `is_prime_slow`, the difference is that the `fast` version **precomputes** the square root `sqrt(n)` before going through the loop, where the `slow` version repeats the `sqrt(n)` every time the loop is repeated.  Indeed, writing `while j <= sqrt(n):` suggests that Python might execute `sqrt(n)` every time to check.  This *might* lead to Python computing the same square root a million times... unnecessarily!  \n",
        "\n",
        "A basic principle of programming is to **avoid repetition**.  If you have the memory space, just compute once and store the result.  It will probably be faster to pull the result out of memory than to compute it again.\n",
        "\n",
        "Python does tend to be pretty smart, however.  It's possible that Python **is precomputing** `sqrt(n)` even in the slow loop, just because it's clever enough to tell in advance that the same thing is being computed over and over again.  This depends on your Python version and takes place behind the scenes.  If you want to figure it out, there's a whole set of tools (for advanced programmers) like the [disassembler](https://docs.python.org/3/library/dis.html) to figure out what Python is doing.\n",
        "\n",
        "If you feel like looking under the hood, the next few lines will display the `is_prime_fast` and `is_prime_slow` functions to bytecode.  Can you see how the `sqrt(n)` computation is carried out differently?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hislzK3Lo1Nl"
      },
      "source": [
        "from dis import dis"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wQX1FSObo1Nl",
        "outputId": "47f7f728-5e0a-431f-96c6-925ba87779d7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "dis(is_prime_fast)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  6           0 LOAD_CONST               1 (2)\n",
            "              2 STORE_FAST               1 (j)\n",
            "\n",
            "  7           4 LOAD_GLOBAL              0 (sqrt)\n",
            "              6 LOAD_FAST                0 (n)\n",
            "              8 CALL_FUNCTION            1\n",
            "             10 STORE_FAST               2 (root_n)\n",
            "\n",
            "  8          12 SETUP_LOOP              52 (to 66)\n",
            "        >>   14 LOAD_FAST                1 (j)\n",
            "             16 LOAD_FAST                2 (root_n)\n",
            "             18 COMPARE_OP               1 (<=)\n",
            "             20 POP_JUMP_IF_FALSE       64\n",
            "\n",
            "  9          22 LOAD_FAST                0 (n)\n",
            "             24 LOAD_FAST                1 (j)\n",
            "             26 BINARY_MODULO\n",
            "             28 LOAD_CONST               2 (0)\n",
            "             30 COMPARE_OP               2 (==)\n",
            "             32 POP_JUMP_IF_FALSE       54\n",
            "\n",
            " 10          34 LOAD_GLOBAL              1 (print)\n",
            "             36 LOAD_CONST               3 ('{} is a factor of {}.')\n",
            "             38 LOAD_METHOD              2 (format)\n",
            "             40 LOAD_FAST                1 (j)\n",
            "             42 LOAD_FAST                0 (n)\n",
            "             44 CALL_METHOD              2\n",
            "             46 CALL_FUNCTION            1\n",
            "             48 POP_TOP\n",
            "\n",
            " 11          50 LOAD_CONST               4 (False)\n",
            "             52 RETURN_VALUE\n",
            "\n",
            " 12     >>   54 LOAD_FAST                1 (j)\n",
            "             56 LOAD_CONST               5 (1)\n",
            "             58 BINARY_ADD\n",
            "             60 STORE_FAST               1 (j)\n",
            "             62 JUMP_ABSOLUTE           14\n",
            "        >>   64 POP_BLOCK\n",
            "\n",
            " 13     >>   66 LOAD_CONST               6 (True)\n",
            "             68 RETURN_VALUE\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M_T0805ko1Nl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f57da158-58c5-4942-a3f6-2e4d6055dc9d"
      },
      "source": [
        "dis(is_prime_slow)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  6           0 LOAD_CONST               1 (2)\n",
            "              2 STORE_FAST               1 (j)\n",
            "\n",
            "  7           4 SETUP_LOOP              56 (to 62)\n",
            "        >>    6 LOAD_FAST                1 (j)\n",
            "              8 LOAD_GLOBAL              0 (sqrt)\n",
            "             10 LOAD_FAST                0 (n)\n",
            "             12 CALL_FUNCTION            1\n",
            "             14 COMPARE_OP               1 (<=)\n",
            "             16 POP_JUMP_IF_FALSE       60\n",
            "\n",
            "  8          18 LOAD_FAST                0 (n)\n",
            "             20 LOAD_FAST                1 (j)\n",
            "             22 BINARY_MODULO\n",
            "             24 LOAD_CONST               2 (0)\n",
            "             26 COMPARE_OP               2 (==)\n",
            "             28 POP_JUMP_IF_FALSE       50\n",
            "\n",
            "  9          30 LOAD_GLOBAL              1 (print)\n",
            "             32 LOAD_CONST               3 ('{} is a factor of {}.')\n",
            "             34 LOAD_METHOD              2 (format)\n",
            "             36 LOAD_FAST                1 (j)\n",
            "             38 LOAD_FAST                0 (n)\n",
            "             40 CALL_METHOD              2\n",
            "             42 CALL_FUNCTION            1\n",
            "             44 POP_TOP\n",
            "\n",
            " 10          46 LOAD_CONST               4 (False)\n",
            "             48 RETURN_VALUE\n",
            "\n",
            " 11     >>   50 LOAD_FAST                1 (j)\n",
            "             52 LOAD_CONST               5 (1)\n",
            "             54 BINARY_ADD\n",
            "             56 STORE_FAST               1 (j)\n",
            "             58 JUMP_ABSOLUTE            6\n",
            "        >>   60 POP_BLOCK\n",
            "\n",
            " 12     >>   62 LOAD_CONST               6 (True)\n",
            "             64 RETURN_VALUE\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1mendW3Uo1Nl",
        "outputId": "fa2d4407-f663-4043-c8be-73f299397b8a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "is_prime_fast(10**14 + 37) # This might get a bit of delay."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1858741 is a factor of 100000000000037.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DUEOKxtoo1Nm"
      },
      "source": [
        "Now we have a function `is_prime_fast(n)` that is speedy for numbers `n` in the trillions!  You'll probably start to hit a delay around $10^{15}$ or so, and the delays will become intolerable if you add too many more digits.  In a future lesson, we will see a different primality test that will be essentially instant even for numbers around $10^{1000}$!  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NCv3bAIco1Nm"
      },
      "source": [
        "### Exercises\n",
        "\n",
        "1.  To check whether a number `n` is prime, you can first check whether `n` is even, and then check whether `n` has any odd factors.  Change the `is_prime_fast` function by implementing this improvement.  How much of a speedup did you get?\n",
        "\n",
        "2.  Use the `%timeit` tool to study the speed of `is_prime_fast` for various sizes of `n`.  Using about 10 data points, relate the size of `n` to the time taken by the `is_prime_fast` function.\n",
        "\n",
        "3.  Write a function `is_square(n)` to test whether a given integer `n` is a perfect square (like 0, 1, 4, 9, 16, etc.).  How fast can you make it run?  Describe the different approaches you try and which are fastest."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. To check whether a number n is prime, you can first check whether n is even, and then check whether n has any odd factors. Change the is_prime_fast function by implementing this improvement. How much of a speedup did you get?"
      ],
      "metadata": {
        "id": "16cflPnXuTbf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def is_prime_fast(n):\n",
        "  if n%2 == 0:\n",
        "    #print(\"{} is a factor of {}.\".format(2,n))\n",
        "    return False\n",
        "\n",
        "  j = 3\n",
        "  \n",
        "  root_n = sqrt(n)\n",
        "  \n",
        "  while j <= root_n:  # j will proceed through the list of numbers 2,3,... up to sqrt(n).\n",
        "\n",
        "    if n%j == 0:  # is n divisible by j?\n",
        "      #print(\"{} is a factor of {}.\".format(j,n))\n",
        "      return False\n",
        "    j = j + 2 # There's a Python abbreviation for this:  j += 1.\n",
        "  return True\n",
        "is_prime_fast(2)"
      ],
      "metadata": {
        "id": "P8o4Oghlc6-1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d26d83a7-b68a-4809-ebf4-3e3a3020568d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Use the %timeit tool to study the speed of is_prime_fast for various sizes of n. Using about 10 data points, relate the size of n to the time taken by the is_prime_fast function."
      ],
      "metadata": {
        "id": "PjrXg5S2uZ8r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for n in range(1, 11):\n",
        "  %timeit is_prime_fast(n)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iYkBvN8gRyYz",
        "outputId": "87586970-d5c6-4a31-97cf-198c557de4f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The slowest run took 25.72 times longer than the fastest. This could mean that an intermediate result is being cached.\n",
            "1000000 loops, best of 5: 310 ns per loop\n",
            "The slowest run took 13.56 times longer than the fastest. This could mean that an intermediate result is being cached.\n",
            "10000000 loops, best of 5: 161 ns per loop\n",
            "The slowest run took 14.11 times longer than the fastest. This could mean that an intermediate result is being cached.\n",
            "1000000 loops, best of 5: 306 ns per loop\n",
            "The slowest run took 9.30 times longer than the fastest. This could mean that an intermediate result is being cached.\n",
            "10000000 loops, best of 5: 161 ns per loop\n",
            "The slowest run took 16.29 times longer than the fastest. This could mean that an intermediate result is being cached.\n",
            "1000000 loops, best of 5: 309 ns per loop\n",
            "The slowest run took 10.07 times longer than the fastest. This could mean that an intermediate result is being cached.\n",
            "10000000 loops, best of 5: 162 ns per loop\n",
            "The slowest run took 13.06 times longer than the fastest. This could mean that an intermediate result is being cached.\n",
            "1000000 loops, best of 5: 310 ns per loop\n",
            "The slowest run took 10.56 times longer than the fastest. This could mean that an intermediate result is being cached.\n",
            "10000000 loops, best of 5: 161 ns per loop\n",
            "The slowest run took 11.23 times longer than the fastest. This could mean that an intermediate result is being cached.\n",
            "1000000 loops, best of 5: 355 ns per loop\n",
            "The slowest run took 11.31 times longer than the fastest. This could mean that an intermediate result is being cached.\n",
            "10000000 loops, best of 5: 162 ns per loop\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "If n is an even number, it takes about half the time."
      ],
      "metadata": {
        "id": "BXpc87pbBT_q"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Write a function is_square(n) to test whether a given integer n is a perfect square (like 0, 1, 4, 9, 16, etc.). How fast can you make it run? Describe the different approaches you try and which are fastest."
      ],
      "metadata": {
        "id": "ZDXvAtkZuxey"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from math import sqrt\n",
        "\n",
        "def is_square(n):\n",
        "  if sqrt(n).is_integer():\n",
        "    return True\n",
        "  else:\n",
        "    return False\n",
        "%timeit is_square(1000000)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3wqVJEgFNX9P",
        "outputId": "63da8502-4f24-48be-88c0-21ef859038b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The slowest run took 37.92 times longer than the fastest. This could mean that an intermediate result is being cached.\n",
            "1000000 loops, best of 5: 213 ns per loop\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from math import sqrt\n",
        "def is_square(n):\n",
        "  if int(sqrt(n)**2)== n:\n",
        "    return True\n",
        "  else:\n",
        "    return False\n",
        "%timeit is_square(1000000)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zObjXSGJT7sG",
        "outputId": "9d1bba56-c57c-4e55-f10e-1dfb0cdb896b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The slowest run took 24.77 times longer than the fastest. This could mean that an intermediate result is being cached.\n",
            "1000000 loops, best of 5: 379 ns per loop\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The first function for is_squaer runs a little bit faster than the second one, likely because it uses a python-implemented function."
      ],
      "metadata": {
        "id": "bT5x20VbXIm_"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J_Xx10hBo1Nm"
      },
      "source": [
        "## List manipulation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7Wd7YSnxo1Nm"
      },
      "source": [
        "We have already (briefly) encountered the `list` type in Python.  Recall that the `range` command produces a range, which can be used to produce a list.  For example, `list(range(10))` produces the list `[0,1,2,3,4,5,6,7,8,9]`.  You can also create your own list by a writing out its terms, e.g. `L = [4,7,10]`.\n",
        "\n",
        "Here we work with lists, and a very Pythonic approach to list manipulation.  With practice, this can be a powerful tool to write fast algorithms, exploiting the hard-wired capability of your computer to shift and slice large chunks of data.  Our eventual application will be to implement the Sieve of Eratosthenes, producing a long list of prime numbers (without using any `is_prime` test along the way)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "60AyLZgto1Nm"
      },
      "source": [
        "We begin by creating a list to play with.  We mix numbers and strings... just for fun."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LqlPEQ6jo1Nm"
      },
      "source": [
        "L = [0,'one',2,'three',4,'five',6,'seven',8,'nine',10]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def my_function(list):\n",
        "  for n in range(1,len(list)):\n",
        "    new_list[n] = list\n",
        "    n = n - 1 \n",
        "  return (list)\n",
        "my_function([-1,1,2,4]) \n"
      ],
      "metadata": {
        "id": "sJF22cH5hbCb",
        "outputId": "c130723c-fc20-4f45-b8ab-4eb9d2f13162",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-5-e836ae5d36d8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mn\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mmy_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-5-e836ae5d36d8>\u001b[0m in \u001b[0;36mmy_function\u001b[0;34m(list)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmy_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mn\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mnew_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mn\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'new_list' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_list = [1,2,3]\n",
        "a = my_list.reverse\n",
        "print(a)"
      ],
      "metadata": {
        "id": "BMAomEX9mBw4",
        "outputId": "2f0e0ac2-3f18-47e9-c23b-8e4c52831b92",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<built-in method reverse of list object at 0x7f549c45bf00>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k3Isc4hVo1Nm"
      },
      "source": [
        "### List terms and indices\n",
        "\n",
        "Notice that the entries in a list can be of any type.  The above list `L` has some integer entries and some string entries.  Lists are **ordered** in Python, **starting at zero**.  One can access the $n^{th}$ entry in a list with a command like `L[n]`.  "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P6pVVcg7o1Nn",
        "outputId": "4036526c-5bf9-49b7-dd02-49badc374c7d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 37
        }
      },
      "source": [
        "L[3]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'three'"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jX8qwH8Co1Nn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "162ab82e-ff9a-4e2e-b198-a81de0aa227e"
      },
      "source": [
        "print(L[3])  # Note that Python has slightly different approaches to the print-function, and the output above."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "three\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SrEwDHyRo1Nn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0f08de40-7b3e-4834-a51e-e3c087bef897"
      },
      "source": [
        "print(L[4])  # We will use the print function, because it makes our printing intentions clear."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z-ZCNLx4o1Nn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "78dba987-9861-4ff7-bb56-d1eb7905ef49"
      },
      "source": [
        "print(L[0])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9Rd1gPF9o1Nn"
      },
      "source": [
        "The location of an entry is called its **index**.  So *at* the index 3, the list `L` stores the entry `three`.  Note that the same entry can occur in many places in a list.  E.g. `[7,7,7]` is a list with 7 at the zeroth, first, and second index."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SHWaHBmAo1Nn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d805467e-020a-4ec0-8316-6238126e8e3e"
      },
      "source": [
        "print(L[-1])\n",
        "print(L[-2])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n",
            "nine\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N8U8KO9Do1Nn"
      },
      "source": [
        "The last bit of code demonstrates a cool Python trick.  The \"-1st\" entry in a list refers to the last entry. The \"-2nd entry\" refers to the second-to-last entry, and so on.  It gives a convenient way to access both sides of the list, even if you don't know how long it is.\n",
        "\n",
        "Of course, you can use Python to find out how long a list is."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U69qteuto1Nn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d7a281dd-7005-4982-ee5f-817523967c0f"
      },
      "source": [
        "len(L)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "11"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pVI66GEIo1No"
      },
      "source": [
        "You can also use Python to find the sum of a list of numbers."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XmBojrfto1No",
        "outputId": "beaad6ac-829e-45f3-acfc-f461aa51f90a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "sum([1,2,3,4,5])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "15"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7vO8uSwho1No",
        "outputId": "0af42687-a1e5-4e62-dcef-b19c60e326fa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "sum(range(100))  # Be careful.  This is the sum of which numbers?  # The sum function can take lists or ranges."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4950"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gk4qkCSEo1No"
      },
      "source": [
        "### List slicing\n",
        "\n",
        "**Slicing** lists allows us to create new lists (or ranges) from old lists (or ranges), by chopping off one end or the other, or even slicing out entries at a fixed interval.  The simplest syntax has the form `L[a:b]` where `a` denotes the index of the starting entry and index of the final entry is one less than `b`.  It is best to try a few examples to get a feel for it.\n",
        "\n",
        "Slicing a list with a command like `L[a:b]` doesn't actually *change* the original list `L`.  It just extracts some terms from the list and outputs those terms.  Soon enough, we will change the list `L` using a list assignment."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8QNDpqJ9o1No",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c10b6469-b925-434a-a4d0-8326db39ce97"
      },
      "source": [
        "L[0:5]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 'one', 2, 'three', 4]"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gzEnfHqvo1No",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "918e4733-07fc-4910-8bfa-7f867108e4e0"
      },
      "source": [
        "L[5:11]  # Notice that L[0:5] and L[5:11] together recover the whole list."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['five', 6, 'seven', 8, 'nine', 10]"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MOzb4reTo1No",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dc1f1f79-8b2c-4584-f37a-acdf48eb78bd"
      },
      "source": [
        "L[3:7]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['three', 4, 'five', 6]"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1VPqRtoo1No"
      },
      "source": [
        "This continues the strange (for beginners) Python convention of starting at the first number and ending just before the last number.  Compare to `range(3,7)`, for example.  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MrnvG511o1No"
      },
      "source": [
        "The command `L[0:5]` can be replaced by `L[:5]` to abbreviate.  The empty opening index tells Python to start at the beginning.  Similarly, the command `L[5:11]` can be replaced by `L[5:]`.  The empty closing index tells Python to end the slice and the end.  This is helpful if one doesn't know where the list ends."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-jgLcoWWo1Nq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4f281d37-31c6-4ef0-c61f-4025bd69d018"
      },
      "source": [
        "L[:5]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 'one', 2, 'three', 4]"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RC8VS_66o1Nq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "282b42c6-fc70-46b9-893a-5da85b777cfe"
      },
      "source": [
        "L[3:]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['three', 4, 'five', 6, 'seven', 8, 'nine', 10]"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NNnM3hfOo1Nq"
      },
      "source": [
        "Just like the `range` command, list slicing can take an optional third argument to give a step size.  To understand this, try the command below."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zoxAvxDdo1Nq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dba87bde-68b7-4e55-a823-2d1e8cfcf377"
      },
      "source": [
        "L[2:10]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[2, 'three', 4, 'five', 6, 'seven', 8, 'nine']"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "81Afdz7do1Nq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "13bf1d35-f447-4dbf-f49d-2eee8ac08cb0"
      },
      "source": [
        "L[2:10:3]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[2, 'five', 8]"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ge3CcbYbo1Nq"
      },
      "source": [
        "If, in this three-argument syntax, the first or second argument is absent, then the slice starts at the beginning of the list or ends at the end of the list accordingly."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qpComE9ao1Nq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7c24fd29-78ee-4946-c0e9-a252656ce412"
      },
      "source": [
        "L  # Just a reminder.  We haven't modified the original list!"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 'one', 2, 'three', 4, 'five', 6, 'seven', 8, 'nine', 10]"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4tDS36jCo1Nr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d5c3ae9d-4f8d-4484-def9-04d3fc0e9dac"
      },
      "source": [
        "L[:9:3]  # Start at zero, go up to (but not including) 9, by steps of 3."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 'three', 6]"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MFr4nObSo1Nr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "701b4205-8a37-4380-f2d9-d9a1edb0ae7b"
      },
      "source": [
        "L[2: :3] # Start at two, go up through the end of the list, by steps of 3."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[2, 'five', 8]"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X-EpKfF4o1Nr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8f238e3d-85d2-4ee4-9a9b-2f1fd2549dbb"
      },
      "source": [
        "L[::3]  # Start at zero, go up through the end of the list, by steps of 3."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 'three', 6, 'nine']"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2dTiwVYho1Nr"
      },
      "source": [
        "### Changing list slices"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4y5zku1Mo1Nr"
      },
      "source": [
        "Not only can we extract and study terms or slices of a list, we can change them by assignment.  The simplest case would be changing a single term of a list."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OfPbYfsPo1Nr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "450f5a0c-220d-45a0-c859-88b58b0e8368"
      },
      "source": [
        "print(L) # Start with the list L."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 'one', 2, 'three', 4, 'five', 6, 'seven', 8, 'nine', 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UIvNYPDDo1Nr"
      },
      "source": [
        "L[5] = 'Bacon!'"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RLd45i_No1Nr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "03b377a1-fc3e-4b42-b7e8-c3047a004217"
      },
      "source": [
        "print(L)  # What do you think L is now?"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 'one', 2, 'three', 4, 'Bacon!', 6, 'seven', 8, 'nine', 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B6G0Uga9o1Nr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "26f1a8de-c85c-4d37-b228-fe2423d1ee08"
      },
      "source": [
        "print(L[2::3]) # What do you think this will do?"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 'Bacon!', 8]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uGennJ2qo1Nr"
      },
      "source": [
        "We can change an entire slice of a list with a single assignment.  Let's change the first two terms of `L` in one line."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y2qRmtGpo1Nr"
      },
      "source": [
        "L[:2] = ['Pancakes', 'Ham']  # What was L[:2] before?"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ovOM7CW5o1Ns",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "847966f5-7d0b-467d-814c-57c42dfde6c6"
      },
      "source": [
        "print(L) # Oh... what have we done!"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Pancakes', 'Ham', 2, 'three', 4, 'Bacon!', 6, 'seven', 8, 'nine', 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xaVOdSGdo1Ns",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 37
        },
        "outputId": "2106e3ab-b148-4363-ba02-d82456a38993"
      },
      "source": [
        "L[0]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'Pancakes'"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7VzDxYkvo1Ns",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 37
        },
        "outputId": "1ccb0b27-770e-40d5-9184-97aa74171fae"
      },
      "source": [
        "L[1]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'Ham'"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XEExh5vko1Ns",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c28f64d4-8b7e-42b9-dc26-dea382aac9b7"
      },
      "source": [
        "L[2]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G5jugoLbo1Ns"
      },
      "source": [
        "We can change a slice of a list with a single assignment, even when that slice does not consist of consecutive terms.  Try to predict what the following commands will do."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U9HQud-4o1Ns",
        "outputId": "5980b617-a827-45d4-944f-d8ff0b59baaf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(L)  # Let's see what the list looks like before."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Pancakes', 'Ham', 2, 'three', 4, 'Bacon!', 6, 'seven', 8, 'nine', 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WaeNsMU8o1Ns"
      },
      "source": [
        "L[::2] = ['A','B','C','D','E','F']  # What was L[::2] before this assignment? "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e4DFQ2ZBo1Ns",
        "outputId": "71396f15-02fa-4129-ab35-e2f9bc5181a9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(L)  # What do you predict?"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['A', 'Ham', 'B', 'three', 'C', 'Bacon!', 'D', 'seven', 'E', 'nine', 'F']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g7PBhl-1o1Ns"
      },
      "source": [
        "## List methods"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E4_oZBZYo1Ns"
      },
      "source": [
        "A method is a function that is attached to an object.  We have already used one method:  the `format` method that is attached to all strings.  You might have seen the `replace` method for strings too.  Note that single-quotes `'Hello'` or double-quotes `\"Hello\"` can be used for strings."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A9ZJsXNFo1Ns",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 37
        },
        "outputId": "a1f52a41-ae1c-428c-891e-3cd3b31a3b89"
      },
      "source": [
        "\"Hello {}!\".format('programming student')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'Hello programming student!'"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rWpWVH7eo1Nt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 37
        },
        "outputId": "eaf7523e-b354-44d1-bca1-d5a1e362d31b"
      },
      "source": [
        "\"Programming is fun!\".replace('fun','lit')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'Programming is lit!'"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o_HBkyp_o1Nt"
      },
      "source": [
        "List methods are functions attached to lists.  Some useful methods include `append` and `sort`.  A fuller listing can be found at [the official documentation](https://docs.python.org/3/tutorial/datastructures.html)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_KkgeG-yo1Nt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "df3f01e4-5a23-4d97-a035-cd45b5bae30e"
      },
      "source": [
        "L = [1,2,3]\n",
        "L.append(4)\n",
        "print(L)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VjkSU8Eyo1Nt"
      },
      "source": [
        "The `append` method can be used to add new items to the end of a list.  But be careful if you want to add multiple items!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aS1Nuu84o1Nt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "394a3cdb-5ba7-4f4e-b258-9f15437e27ce"
      },
      "source": [
        "L.append([5,6])\n",
        "print(L)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 4, [5, 6]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "THb1IcA6o1Nt"
      },
      "source": [
        "Behind the scenes, methods are functions which have a special input parameter called `self`.  So when you use a command like `L.append(4)`, you are effectively running `append(L, 4)`.  The `self` parameter is the object the method is attached to.\n",
        "\n",
        "Like all functions, methods have outputs too.  But what can be confusing is that methods can *modify* `self` and can sometimes *return* `None`.  "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TdOwNbHvo1Nt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fb26c081-9199-43d3-9879-3f59beab8ac3"
      },
      "source": [
        "print([1,2,3].append(4))\n",
        "print(\"123\".replace(\"3\",\"4\"))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "None\n",
            "124\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CNutNo0ro1Nt"
      },
      "source": [
        "This is very confusing at first!  The list `append` method *does* change `self` by appending something to `self`.  But as a function, it returns `None`.  \n",
        "\n",
        "On the other hand, the string `replace` method *does not* change `self` and instead *returns* the modified string.\n",
        "\n",
        "This will make more sense after we study *mutable* and *immutable* types.  Lists are mutable (and thus are often changed by their methods).  Strings are immutable, and so changes are effected by producing new strings.  Another example of a string method is `sort()`.  The only parameter of `sort` is `self`, and so nothing needs to go between the paraentheses."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iOJkQ3cIo1Nt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6fab436e-632c-493d-9647-761ee54103a0"
      },
      "source": [
        "L = [4,2,1]  # Make a list.\n",
        "L.sort()  # Sort the list.  This *changes* L and returns None.\n",
        "print(L)  # Let's see what L is now."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZDaPzUUjo1Nt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "509f4810-b4b8-445a-bba2-acf91ad9b9e9"
      },
      "source": [
        "L = ['Ukelele', 'Apple', 'Dog', 'Cat' ]\n",
        "L.sort()\n",
        "print(L)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Apple', 'Cat', 'Dog', 'Ukelele']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2ibPAiCCo1Nu"
      },
      "source": [
        "Sorting numbers is possible, because the Python operator `<` is defined for numbers.  Sorting strings is possible, because the Python operator `<` is interpreted alphabetically among strings.  If you mix types, Python might not know how to behave... you'll get a TypeError."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EmIGZqSQo1Nu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 198
        },
        "outputId": "1f9f7c07-8ab7-4502-e8c2-e7651995f8ae"
      },
      "source": [
        "L = [1,'Apple', 3.14]\n",
        "L.sort()\n",
        "print(L)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-45-e3d2589f72dc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mL\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Apple'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3.14\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mL\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mL\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: '<' not supported between instances of 'str' and 'int'"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RMN4XjXHo1Nu"
      },
      "source": [
        "### Exercises\n",
        "\n",
        "1.  Create a list L with L = [1,2,3,...,100] (all the numbers from 1 to 100).  What is L[50]?\n",
        "\n",
        "2.  Take the same list L, and extract a slice of the form [5,10,15,...,95] with a command of the form L[a:b:c].\n",
        "\n",
        "3.  Take the same list L, and change all the even numbers to zeros, so that L looks like [1,0,3,0,5,0,...,99,0].  Hint:  You might wish to use the list [0]*50.\n",
        "\n",
        "4.  Try the command `L[-1::-1]` on a list.  What does it do?  Can you guess before executing it?  Can you understand why?  In fact, strings are indexed like lists.  Try setting `L = 'Hello'` and the previous command.\n",
        "\n",
        "5.  Create the list [1,100,3,98,5,96,...,99,2], where the odd terms are in order and the even terms are in reverse order.  There are multiple methods!\n",
        "\n",
        "6.  Use the append method with a loop to create a list of perfect squares, [0,1,4,9,16,25,...,10000].\n",
        "\n",
        "7.  Create a list of 52 \"cards\" to resemble a standard card deck.  The suits can be denoted C,S,D,H for clubs, spades, diamonds, and hearts.  The numbers can be denoted 1-13 (with Ace = 1, Jack = 11, Queen = 12, King = 13).  So \"9H\" would be the 9 of hearts, and 12S the queen of spades.  Your list L should contain every card.  \n",
        "\n",
        "8.  Challenge:  write a function which performs a \"perfect riffle shuffle\" on a list of cards.  This shuffle should have the effect of dividing the deck into two equal pieces, and then precisely interlacing the two pieces to form a new list.  E.g., an input list of `[1,2,3,4,5,6]` should be broken into `[1,2,3]` and `[4,5,6]` and then interlaced as `[1,4,2,5,3,6]`."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Create a list L with L = [1,2,3,...,100] (all the numbers from 1 to 100). What is L[50]?"
      ],
      "metadata": {
        "id": "2L2LexYkMOpn"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zeKjo8JPUjjY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f9c6da1b-f956-4655-f71c-526046ed423c"
      },
      "source": [
        "L = list(range(1,101))\n",
        "print (L)\n",
        "L[50]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "51"
            ]
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Take the same list L, and extract a slice of the form [5,10,15,...,95] with a command of the form L[a:b:c]."
      ],
      "metadata": {
        "id": "fwieTY1iOCBS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(L[5:100:5])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aufoKBsIOF03",
        "outputId": "731ae238-04d2-4aea-b9ea-c73801e2abf3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Take the same list L, and change all the even numbers to zeros, so that L looks like [1,0,3,0,5,0,...,99,0]. Hint: You might wish to use the list [0]*50."
      ],
      "metadata": {
        "id": "6AlO8T6NO5yU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "L[1::2]= [0]*50\n",
        "print (L)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7MIr410MO8_C",
        "outputId": "6b305d65-75ec-43ac-bea0-abd9f17d7af0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 0, 3, 0, 5, 0, 7, 0, 9, 0, 11, 0, 13, 0, 15, 0, 17, 0, 19, 0, 21, 0, 23, 0, 25, 0, 27, 0, 29, 0, 31, 0, 33, 0, 35, 0, 37, 0, 39, 0, 41, 0, 43, 0, 45, 0, 47, 0, 49, 0, 51, 0, 53, 0, 55, 0, 57, 0, 59, 0, 61, 0, 63, 0, 65, 0, 67, 0, 69, 0, 71, 0, 73, 0, 75, 0, 77, 0, 79, 0, 81, 0, 83, 0, 85, 0, 87, 0, 89, 0, 91, 0, 93, 0, 95, 0, 97, 0, 99, 0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Try the command L[-1::-1] on a list. What does it do? Can you guess before executing it? Can you understand why? In fact, strings are indexed like lists. Try setting L = 'Hello' and the previous command."
      ],
      "metadata": {
        "id": "jiA4WY-DUUX8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "L[-1::-1] # This prints the list backwards because youre starting at '-1' \n",
        "# '-1' is like the end of the list, and in increments of -1, so backwards\n",
        "L = 'Hello'\n",
        "L[-1::-1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 37
        },
        "id": "1wdFi-9TUTah",
        "outputId": "fd8d0473-d953-4337-e534-621049bceda0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'olleH'"
            ]
          },
          "metadata": {},
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. Create the list [1,100,3,98,5,96,...,99,2], where the odd terms are in order and the even terms are in reverse order. There are multiple methods!"
      ],
      "metadata": {
        "id": "7iwzOLg5VFHm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "L = list(range(1,101))\n",
        "L[1::2] = L[-1::-2]\n",
        "print (L)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3DhwFRCNVKtd",
        "outputId": "1e52588a-85e0-4675-a4a2-b52df7c312c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 100, 3, 98, 5, 96, 7, 94, 9, 92, 11, 90, 13, 88, 15, 86, 17, 84, 19, 82, 21, 80, 23, 78, 25, 76, 27, 74, 29, 72, 31, 70, 33, 68, 35, 66, 37, 64, 39, 62, 41, 60, 43, 58, 45, 56, 47, 54, 49, 52, 51, 50, 53, 48, 55, 46, 57, 44, 59, 42, 61, 40, 63, 38, 65, 36, 67, 34, 69, 32, 71, 30, 73, 28, 75, 26, 77, 24, 79, 22, 81, 20, 83, 18, 85, 16, 87, 14, 89, 12, 91, 10, 93, 8, 95, 6, 97, 4, 99, 2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. Use the append method with a loop to create a list of perfect squares, [0,1,4,9,16,25,...,10000]"
      ],
      "metadata": {
        "id": "D1Mskoi-Widw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "square_list = list(range(0))\n",
        "    \n",
        "for n in range(0,101):\n",
        "  square_list.append(n**2)\n",
        "print (square_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z51Wp5P6WljI",
        "outputId": "ba69a8f1-e55f-4672-d557-ff976e4961cb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401, 2500, 2601, 2704, 2809, 2916, 3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969, 4096, 4225, 4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776, 5929, 6084, 6241, 6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569, 7744, 7921, 8100, 8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604, 9801, 10000]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. Create a list of 52 \"cards\" to resemble a standard card deck. The suits can be denoted C,S,D,H for clubs, spades, diamonds, and hearts. The numbers can be denoted 1-13 (with Ace = 1, Jack = 11, Queen = 12, King = 13). So \"9H\" would be the 9 of hearts, and 12S the queen of spades. Your list L should contain every card."
      ],
      "metadata": {
        "id": "Apyhg0hyakY1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cards_list = list(range(0))\n",
        "numbers_list = ['1','2','3','4','5','6','7','8','9','10','11','12','13']\n",
        "letters_list = ['C','S','D','H']\n",
        "for l in range (len(letters_list)):\n",
        "  for n in range (len(numbers_list)):\n",
        "    cards_list.append(numbers_list[n]+letters_list[l])\n",
        "print(cards_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O-RNlOf2avpj",
        "outputId": "d3b43af8-eb0a-487b-d87b-d02e2ba80600"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['1C', '2C', '3C', '4C', '5C', '6C', '7C', '8C', '9C', '10C', '11C', '12C', '13C', '1S', '2S', '3S', '4S', '5S', '6S', '7S', '8S', '9S', '10S', '11S', '12S', '13S', '1D', '2D', '3D', '4D', '5D', '6D', '7D', '8D', '9D', '10D', '11D', '12D', '13D', '1H', '2H', '3H', '4H', '5H', '6H', '7H', '8H', '9H', '10H', '11H', '12H', '13H']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. Challenge: write a function which performs a \"perfect riffle shuffle\" on a list of cards. This shuffle should have the effect of dividing the deck into two equal pieces, and then precisely interlacing the two pieces to form a new list. E.g., an input list of [1,2,3,4,5,6] should be broken into [1,2,3] and [4,5,6] and then interlaced as [1,4,2,5,3,6]"
      ],
      "metadata": {
        "id": "h_jjwp_k0K8U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def riffle_shuffle(lit):\n",
        "  n = len(lit)\n",
        "  m = n//2\n",
        "  first_lit = lit[0:m] \n",
        "  #= lit(range((n//2)+1))\n",
        "  #for i in range(0, m):\n",
        "    #first_lit[i] = lit[]\n",
        "    #first_lit[0].remove()\n",
        "  second_lit = lit[m:n]\n",
        "  third_lit = []\n",
        "  for i in range(len(first_lit)):\n",
        "    third_lit.append(first_lit[i])\n",
        "    third_lit.append(second_lit[i])\n",
        "  print(first_lit)\n",
        "  print(second_lit)\n",
        "  print(third_lit)\n",
        "L = [1,2,3,4,5,6]\n",
        "riffle_shuffle(L)"
      ],
      "metadata": {
        "id": "lU0E8c8u0r87",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1acf4c8a-6f34-4fb6-f702-8497e52b6a20"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3]\n",
            "[4, 5, 6]\n",
            "[1, 4, 2, 5, 3, 6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DIORkSZEo1Nu"
      },
      "source": [
        "## Sieve of Eratosthenes"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rTQgPGs2o1Nu"
      },
      "source": [
        "The **Sieve of Eratosthenes** (hereafter called \"the sieve\") is a very fast way of producing long lists of primes, without doing repeated primality checking.  The basic idea is to start with all of the natural numbers, and successively filter out, or [**sieve**](https://en.wikipedia.org/wiki/Sieve), the multiples of 2, then the multiples of 3, then the multiples of 5, etc., until only primes are left.  You can read more about the sieve, and experimental number theory, at [The Conversation](https://theconversation.com/why-prime-numbers-still-fascinate-mathematicians-2-300-years-later-92484)\n",
        "\n",
        "Using list slicing, we can carry out this sieving process efficiently.  And with a few more tricks we encounter here, we can carry out the Sieve **very** efficiently."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_jx0oxsuo1Nu"
      },
      "source": [
        "### The basic sieve\n",
        "\n",
        "The first approach we introduce is a bit naive, but is a good starting place.  We will begin with a list of numbers up to 100, and sieve out the appropriate multiples of 2,3,5,7."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xiF25G0Zo1Nu"
      },
      "source": [
        "primes = list(range(100)) # Let's start with the numbers 0...99."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XIDLjxG4o1Nu"
      },
      "source": [
        "Now, to \"filter\", i.e., to say that a number is *not* prime, let's just change the number to the value `None`.  "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5VK6hIBEo1Nu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b4deb7de-c392-472d-c5d3-1b610578c78c"
      },
      "source": [
        "primes[0] = None # Zero is not prime.\n",
        "primes[1] = None # One is not prime.\n",
        "print(primes) # What have we done?"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[None, None, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f60YBXEpo1Nv"
      },
      "source": [
        "Now let's filter out the multiples of 2, starting at 4.  This is the slice `primes[4::2]`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WIBb5mQ3o1Nv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ce62c367-6d81-40c6-81d0-b9daaba68f76"
      },
      "source": [
        "primes[4::2] = [None] * len(primes[4::2])  # The right side is a list of Nones, of the necessary length.\n",
        "print(primes) # What have we done?"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[None, None, 2, 3, None, 5, None, 7, None, 9, None, 11, None, 13, None, 15, None, 17, None, 19, None, 21, None, 23, None, 25, None, 27, None, 29, None, 31, None, 33, None, 35, None, 37, None, 39, None, 41, None, 43, None, 45, None, 47, None, 49, None, 51, None, 53, None, 55, None, 57, None, 59, None, 61, None, 63, None, 65, None, 67, None, 69, None, 71, None, 73, None, 75, None, 77, None, 79, None, 81, None, 83, None, 85, None, 87, None, 89, None, 91, None, 93, None, 95, None, 97, None, 99]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gD0IZ3ffo1Nv"
      },
      "source": [
        "Now we filter out the multiples of 3, starting at 9."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nRDiN5ZYo1Nv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6aaae2ac-5c57-49c9-97ab-8bd0921469ce"
      },
      "source": [
        "primes[9::3] = [None] * len(primes[9::3])  # The right side is a list of Nones, of the necessary length.\n",
        "print(primes) # What have we done?"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[None, None, 2, 3, None, 5, None, 7, None, None, None, 11, None, 13, None, None, None, 17, None, 19, None, None, None, 23, None, 25, None, None, None, 29, None, 31, None, None, None, 35, None, 37, None, None, None, 41, None, 43, None, None, None, 47, None, 49, None, None, None, 53, None, 55, None, None, None, 59, None, 61, None, None, None, 65, None, 67, None, None, None, 71, None, 73, None, None, None, 77, None, 79, None, None, None, 83, None, 85, None, None, None, 89, None, 91, None, None, None, 95, None, 97, None, None]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OkeNZU2Uo1Nv"
      },
      "source": [
        "Next the multiples of 5, starting at 25 (the first multiple of 5 greater than 5 that's left!)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Aocpditlo1Nv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "da0928ed-3e46-458e-9d52-db627d985d47"
      },
      "source": [
        "primes[25::5] = [None] * len(primes[25::5])  # The right side is a list of Nones, of the necessary length.\n",
        "print(primes) # What have we done?"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[None, None, 2, 3, None, 5, None, 7, None, None, None, 11, None, 13, None, None, None, 17, None, 19, None, None, None, 23, None, None, None, None, None, 29, None, 31, None, None, None, None, None, 37, None, None, None, 41, None, 43, None, None, None, 47, None, 49, None, None, None, 53, None, None, None, None, None, 59, None, 61, None, None, None, None, None, 67, None, None, None, 71, None, 73, None, None, None, 77, None, 79, None, None, None, 83, None, None, None, None, None, 89, None, 91, None, None, None, None, None, 97, None, None]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9DYckJ43o1Nv"
      },
      "source": [
        "Finally, the multiples of 7, starting at 49 (the first multiple of 7 greater than 7 that's left!)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NMMhQYBqo1Nv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "22749ea6-bec6-40fd-cff8-0d9490779c61"
      },
      "source": [
        "primes[49::7] = [None] * len(primes[49::7])  # The right side is a list of Nones, of the necessary length.\n",
        "print(primes) # What have we done?"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[None, None, 2, 3, None, 5, None, 7, None, None, None, 11, None, 13, None, None, None, 17, None, 19, None, None, None, 23, None, None, None, None, None, 29, None, 31, None, None, None, None, None, 37, None, None, None, 41, None, 43, None, None, None, 47, None, None, None, None, None, 53, None, None, None, None, None, 59, None, 61, None, None, None, None, None, 67, None, None, None, 71, None, 73, None, None, None, None, None, 79, None, None, None, 83, None, None, None, None, None, 89, None, None, None, None, None, None, None, 97, None, None]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6Dulthjho1Nv"
      },
      "source": [
        "What's left?  A lot of `None`s and the prime numbers up to 100.  We have successfully sieved out all the nonprime numbers in the list, using just four sieving steps (and setting 0 and 1 to `None` manually).  \n",
        "\n",
        "But there's a lot of room for improvement, from beginning to end!\n",
        "\n",
        "1.  The format of the end result is not so nice.\n",
        "2.  We had to sieve each step manually.  It would be much better to have a function `prime_list(n)` which would output a list of primes up to `n` without so much supervision.\n",
        "3.  The memory usage will be large, if we need to store all the numbers up to a large `n` at the beginning.\n",
        "\n",
        "We solve these problems in the following way.\n",
        "\n",
        "1.  We will use a list of **booleans** rather than a list of numbers.  The ending list will have a `True` value at prime indices and a `False` value at composite indices.  This reduces the memory usage and increases the speed.  \n",
        "2.  A `which` function (explained soon) will make the desired list of primes after everything else is done.\n",
        "3.  We will proceed through the sieving steps algorithmically rather than entering each step manually.\n",
        "\n",
        "Here is a somewhat efficient implementation of the Sieve in Python."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HfOTwel_o1Nv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "056933f3-c668-4d25-e976-d7390568b8c0"
      },
      "source": [
        "from math import sqrt\n",
        "def isprime_list(n):\n",
        "    ''' \n",
        "    Return a list of length n+1\n",
        "    with Trues at prime indices and Falses at composite indices.\n",
        "    '''\n",
        "    flags = [True] * (n+1)  # A list [True, True, True,...] to start.\n",
        "    flags[0] = False  # Zero is not prime.  So its flag is set to False.\n",
        "    flags[1] = False  # One is not prime.  So its flag is set to False.\n",
        "    p = 2  # The first prime is 2.  And we start sieving by multiples of 2.\n",
        "    \n",
        "    while p <= sqrt(n):  # We only need to sieve by p is p <= sqrt(n).\n",
        "        if flags[p]:  # We sieve the multiples of p if flags[p]=True.\n",
        "            flags[p*p::p] = [False] * len(flags[p*p::p]) # Sieves out multiples of p, starting at p*p.\n",
        "        p = p + 1 # Try the next value of p.\n",
        "        \n",
        "    return flags\n",
        "print (isprime_list(45))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eM2OGaymo1Nw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6ec46f64-d0f1-43a0-9d9c-3a2da3fa712c"
      },
      "source": [
        "print(isprime_list(100))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[False, False, True, True, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, True, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "73FT-HVIo1Nw"
      },
      "source": [
        "If you look carefully at the list of booleans, you will notice a `True` value at the 2nd index, the 3rd index, the 5th index, the 7th index, etc..  The indices where the values are `True` are precisely the **prime** indices.  Since booleans take the smallest amount of memory of any data type (one **bit** of memory per boolean), your computer can carry out the `isprime_list(n)` function even when `n` is very large.\n",
        "\n",
        "To be more precise, there are 8 bits in a **byte**.  There are 1024 bytes (about 1000) in a kilobyte.  There are 1024 kilobytes in a megabyte.  There are 1024 megabytes in a gigabyte.  Therefore, a gigabyte of memory is enough to store about 8 billion bits.  That's enough to store the result of `isprime_list(n)` when `n` is about 8 billion.  Not bad!  And your computer probably has 4 or 8 or 12 or 16 gigabytes of memory to use.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TtTBE8U0o1Nw"
      },
      "source": [
        "To transform the list of booleans into a list of prime numbers, we create a function called `where`.  This function uses another Python technique called **list comprehension**.  We discuss this technique later in this lesson, so just use the `where` function as a tool for now, or [read about list comprehension](https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions) if you're curious."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q_ZiUC2uo1Nw"
      },
      "source": [
        "def where(L):\n",
        "    '''\n",
        "    Take a list of booleans as input and\n",
        "    outputs the list of indices where True occurs.\n",
        "    '''\n",
        "    return [n for n in range(len(L)) if L[n]]\n",
        "    "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_rkxdrhmo1Nw"
      },
      "source": [
        "Combined with the `isprime_list` function, we can produce long lists of primes."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "MkA2LdBlo1Nw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6297c75a-6557-47e7-9edc-177e0f271c13"
      },
      "source": [
        "print(where(isprime_list(100)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gy3KRYbAo1Nw"
      },
      "source": [
        "Let's push it a bit further.  How many primes are there between 1 and 1 million?  We can figure this out in three steps:\n",
        "\n",
        "1.  Create the isprime_list.\n",
        "2.  Use where to get the list of primes.\n",
        "3.  Find the length of the list of primes.\n",
        "\n",
        "But it's better to do it in two steps.\n",
        "\n",
        "1.  Create the isprime_list.\n",
        "2.  Sum the list!  (Note that `True` is 1, for the purpose of summation!)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MpIGIxjro1Nw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d05181a4-c36b-4e75-9147-b531d452a3c1"
      },
      "source": [
        "sum(isprime_list(1000000))  # The number of primes up to a million!"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "78498"
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uQx3_5suo1Nw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7bdd990e-bcf7-4792-9017-46e61707a6a2"
      },
      "source": [
        "%timeit isprime_list(10**6)  # 1000 ms = 1 second."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 loops, best of 5: 71.5 ms per loop\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Dy3dxyNCo1Nw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cef10db3-1dd8-4472-d2ca-e31478ca6896"
      },
      "source": [
        "\n",
        "%timeit sum(isprime_list(10**6))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 loops, best of 5: 103 ms per loop\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WiEYpMXUo1Nw"
      },
      "source": [
        "This isn't too bad!  It takes a fraction of a second to identify the primes up to a million, and a smaller fraction of a second to count them!  But we can do a little better.  \n",
        "\n",
        "The first improvement is to take care of the even numbers first.  If we count carefully, then the sequence 4,6,8,...,n (ending at n-1 if n is odd) has the floor of (n-2)/2 terms.  Thus the line `flags[4::2] = [False] * ((n-2)//2)` will set all the flags to False in the sequence 4,6,8,10,...  From there, we can begin sieving by *odd* primes starting with 3.\n",
        "\n",
        "The next improvement is that, since we've already sieved out all the even numbers (except 2), we don't have to sieve out again by *even multiples*.  So when sieving by multiples of 3, we don't have to sieve out 9,12,15,18,21,etc..  We can just sieve out 9,15,21,etc..  When `p` is an odd prime, this can be taken care of with the code `flags[p*p::2*p] = [False] * len(flags[p*p::2*p])`.  "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MBU0GJsSo1Nx"
      },
      "source": [
        "def isprime_list(n):\n",
        "    ''' \n",
        "    Return a list of length n+1\n",
        "    with Trues at prime indices and Falses at composite indices.\n",
        "    '''\n",
        "    flags = [True] * (n+1)  # A list [True, True, True,...] to start.\n",
        "    flags[0] = False  # Zero is not prime.  So its flag is set to False.\n",
        "    flags[1] = False  # One is not prime.  So its flag is set to False.\n",
        "    flags[4::2] = [False] * ((n-2)//2)\n",
        "    p = 3\n",
        "    while p <= sqrt(n):  # We only need to sieve by p is p <= sqrt(n).\n",
        "        if flags[p]:  # We sieve the multiples of p if flags[p]=True.\n",
        "            flags[p*p::2*p] = [False] * len(flags[p*p::2*p]) # Sieves out multiples of p, starting at p*p.\n",
        "        p = p + 2 # Try the next value of p.  Note that we can proceed only through odd p!\n",
        "        \n",
        "    return flags"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gW6DlvCmo1Nx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8403ecad-d3db-4005-a4d3-c4656eef14d9"
      },
      "source": [
        "%timeit sum(isprime_list(10**6))  # How much did this speed it up?"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 loops, best of 5: 72 ms per loop\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hiCV5pUEo1Nx"
      },
      "source": [
        "Another modest improvement is the following.  In the code above, the program *counts* the terms in sequences like 9,15,21,27,..., in order to set them to `False`.  This is accomplished with the length command `len(flags[p*p::2*p])`.  But that length computation is a bit too intensive.  A bit of algebraic work shows that the length is given formulaically in terms of `p` and `n` by the formula:  \n",
        "\n",
        "$$len = \\lfloor \\frac{n - p^2 - 1}{2p} \\rfloor + 1$$\n",
        "\n",
        "(Here $\\lfloor x \\rfloor$ denotes the floor function, i.e., the result of rounding down.)  Putting this into the code yields the following."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "46RPEsKCo1Nx"
      },
      "source": [
        "def isprime_list(n):\n",
        "    ''' \n",
        "    Return a list of length n+1\n",
        "    with Trues at prime indices and Falses at composite indices.\n",
        "    '''\n",
        "    flags = [True] * (n+1)  # A list [True, True, True,...] to start.\n",
        "    flags[0] = False  # Zero is not prime.  So its flag is set to False.\n",
        "    flags[1] = False  # One is not prime.  So its flag is set to False.\n",
        "    flags[4::2] = [False] * ((n-2)//2)\n",
        "    p = 3\n",
        "    while p <= sqrt(n):  # We only need to sieve by p is p <= sqrt(n).\n",
        "        if flags[p]:  # We sieve the multiples of p if flags[p]=True.\n",
        "            flags[p*p::2*p] = [False] * ((n-p*p)//(2*p)+1) # Sieves out multiples of p, starting at p*p.\n",
        "        p = p + 2 # Try the next value of p.\n",
        "        \n",
        "    return flags"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gMCxzJ8yo1Nx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2b37b3f7-a000-4265-a98d-e7d2dfa3754a"
      },
      "source": [
        "%timeit sum(isprime_list(10**6))  # How much did this speed it up?"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 loops, best of 5: 51.1 ms per loop\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NT6XwvCJo1Nx"
      },
      "source": [
        "That should be pretty fast!  It should be under 100 ms (one tenth of one second!) to determine the primes up to a million, and on a newer computer it should be under 50ms.  We have gotten pretty close to the fastest algorithms that you can find in Python, without using external packages (like SAGE or sympy).  See the related [discussion on StackOverflow](https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n)... the code in this lesson was influenced by the code presented there."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8Noiny4ho1Nx"
      },
      "source": [
        "### Exercises\n",
        "\n",
        "1.  Prove that the length of `range(p*p, n, 2*p)` equals $\\lfloor \\frac{n - p^2 - 1}{2p} \\rfloor + 1$.\n",
        "\n",
        "2.  A natural number $n$ is called squarefree if it has no perfect square divides $n$ except for 1.  Write a function `squarefree_list(n)` which outputs a list of booleans:  `True` if the index is squarefree and `False` if the index is not squarefree.  For example, if you execute `squarefree_list(12)`, the output should be `[False, True, True, True, False, True, True, True, False, False, True, True, False]`.  Note that the `False` entries are located the indices 0, 4, 8, 9, 12.  These natural numbers have perfect square divisors besides 1.  \n",
        "\n",
        "3.  Your DNA contains about 3 billion base pairs.  Each \"base pair\" can be thought of as a letter, A, T, G, or C.  How many bits would be required to store a single base pair?  In other words, how might you convert a sequence of booleans into a letter A,T,G, or C?  Given this, how many megabytes or gigabytes are required to store your DNA?  How many people's DNA would fit on a thumb-drive?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hXac_vzPo1Nx"
      },
      "source": [
        "<a id='analysis'></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Prove that the length of range(p*p, n, 2*p) equals  ⌊𝑛−𝑝2−12𝑝⌋+1 ."
      ],
      "metadata": {
        "id": "JW6G0GW-PEkG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "p = 2\n",
        "n = 806\n",
        "len1 = ( (n - p**2 - 1)//(2*p) ) + 1\n",
        "len2 = 0\n",
        "for i in range (p*p, n, 2*p):\n",
        "  len2 += 1\n",
        "print(len1)\n",
        "print(len2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "58zbSRavPHey",
        "outputId": "f76acb74-0e43-48e7-81aa-4314ab0bbb6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "201\n",
            "201\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. A natural number  𝑛  is called squarefree if it has no perfect square divides  𝑛  except for 1. Write a function squarefree_list(n) which outputs a list of booleans: True if the index is squarefree and False if the index is not squarefree. For example, if you execute squarefree_list(12), the output should be [False, True, True, True, False, True, True, True, False, False, True, True, False]. Note that the False entries are located the indices 0, 4, 8, 9, 12. These natural numbers have perfect square divisors besides 1."
      ],
      "metadata": {
        "id": "Kg7LSqqEjN4I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def squarefree_list(n):\n",
        "  L = [] \n",
        "  i = 2 # Starts at 2 to make a list of perfect squares\n",
        "  while(i**2 < n): \n",
        "    L.append(i**2) # Adds perfect square to list\n",
        "    i = i + 1\n",
        "  bule = []\n",
        "  checked = False # Checks if already divided by perfect square\n",
        "  bule.append(False) # Adds False for 0\n",
        "  for j in range (1, n+1): \n",
        "    for k in range (0, len(L)): # Checks list of perfect squares\n",
        "      if(j % L[k] == 0): # If divisible by perfect square \n",
        "        bule.append(False)\n",
        "        checked = True # Stops double count assumptions of True\n",
        "        break #ENd loop\n",
        "      \n",
        "    if(checked == False): \n",
        "      bule.append(True)\n",
        "    checked = False\n",
        "  print(bule)\n",
        "\n",
        "squarefree_list(20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sq_t_2odjSsW",
        "outputId": "6cd19332-8dc8-4d75-c728-b76c5abf4166"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[False, True, True, True, False, True, True, True, False, False, True, True, False, True, True, True, False, True, False, True, False]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Your DNA contains about 3 billion base pairs. Each \"base pair\" can be thought of as a letter, A, T, G, or C. How many bits would be required to store a single base pair? In other words, how might you convert a sequence of booleans into a letter A,T,G, or C? Given this, how many megabytes or gigabytes are required to store your DNA? How many people's DNA would fit on a thumb-drive?"
      ],
      "metadata": {
        "id": "5R2zonE_Bh8A"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Two bits would be required to store a single base pair. Because you need two bits per pair, and 8 bits per byte, you would need 750 megabytes or 0.75 gigabytes. For a 16 gigabyte thumb-drive, 21 people's DNA would be able to fit."
      ],
      "metadata": {
        "id": "z0gflp_GE5l7"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tuP5axz9o1Nx"
      },
      "source": [
        "## Data analysis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "41IrhAupo1Nx"
      },
      "source": [
        "Now that we can produce a list of prime numbers quickly, we can do some data analysis:  some experimental number theory to look for trends or patterns in the sequence of prime numbers.  Since Euclid (about 300 BCE), we have known that there are infinitely many prime numbers.  But how are they distributed?  What proportion of numbers are prime, and how does this proportion change over different ranges?  As theoretical questions, these belong the the field of analytic number theory.  But it is hard to know what to prove without doing a bit of experimentation.  And so, at least since Gauss [(read Tschinkel's article about Gauss's tables)](http://www.ams.org/journals/bull/2006-43-01/S0273-0979-05-01096-7/S0273-0979-05-01096-7.pdf) started examining his extensive tables of prime numbers, mathematicians have been carrying out experimental number theory."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZE0QFlwYo1Ny"
      },
      "source": [
        "### Analyzing the list of primes\n",
        "\n",
        "Let's begin by creating our data set:  the prime numbers up to 1 million."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9HB_PuBXo1Ny"
      },
      "source": [
        "primes = where(isprime_list(1000000))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bdr1hcP0o1Ny",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6dc6ad1f-0b30-4497-b541-89016fb45123"
      },
      "source": [
        "len(primes) # Our population size.  A statistician might call it N."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "78498"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wJs6DNcBo1Ny",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b53f49a0-3b41-4e1c-b511-49a68a8347ee"
      },
      "source": [
        "primes[-1]  # The last prime in our list, just before one million."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "999983"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "7geu3XMoo1Ny",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "94299206-2436-4ac6-9c76-396dc875c87c"
      },
      "source": [
        "type(primes) # What type is this data?"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "list"
            ]
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "siBIu-IGo1Ny",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "81d55d3e-0c45-4025-937c-39ebedb89a6a"
      },
      "source": [
        "print(primes[:100]) # The first hundred prime numbers."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A6j9MmSGo1Ny"
      },
      "source": [
        "To carry out serious analysis, we will use the method of **list comprehension** to place our population into \"bins\" for statistical analysis.  Our first type of list comprehension has the form `[x for x in LIST if CONDITION]`.  This produces the list of all elements of LIST satisfying CONDITION.  It is similar to list slicing, except we pull out terms from the list according to whether a condition is true or false.\n",
        "\n",
        "For example, let's divide the (odd) primes into two classes.  Red primes will be those of the form 4n+1.  Blue primes will be those of the form 4n+3.  In other words, a prime `p` is red if `p%4 == 1` and blue if `p%4 == 3`.  And the prime 2 is neither red nor blue."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bINic7Ceo1Ny",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9defbcdc-88c0-44b5-957c-7f41f68214a2"
      },
      "source": [
        "redprimes = [p for p in primes if p%4 == 1] # Note the [x for x in LIST if CONDITION] syntax.\n",
        "blueprimes = [p for p in primes if p%4 == 3]\n",
        "\n",
        "print('Red primes:',redprimes[:20]) # The first 20 red primes.\n",
        "print('Blue primes:',blueprimes[:20]) # The first 20 blue primes."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Red primes: [5, 13, 17, 29, 37, 41, 53, 61, 73, 89, 97, 101, 109, 113, 137, 149, 157, 173, 181, 193]\n",
            "Blue primes: [3, 7, 11, 19, 23, 31, 43, 47, 59, 67, 71, 79, 83, 103, 107, 127, 131, 139, 151, 163]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XXK10HG4o1Ny",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b9e5f1f7-041f-425b-c446-37a34cce16a5"
      },
      "source": [
        "print(\"There are {} red primes and {} blue primes, up to 1 million.\".format(len(redprimes), len(blueprimes)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 39175 red primes and 39322 blue primes, up to 1 million.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EMVjQlHuo1Ny"
      },
      "source": [
        "This is pretty close!  It seems like prime numbers are about evenly distributed between red and blue.  Their remainder after division by 4 is about as likely to be 1 as it is to be 3.  In fact, it is proven that *asymptotically* the ratio between the number of red primes and the number of blue primes approaches 1.  However, Chebyshev noticed a persistent slight bias towards blue primes along the way."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iBN5IBLwo1Ny"
      },
      "source": [
        "Some of the deepest conjectures in mathematics relate to the [prime counting function](https://en.wikipedia.org/wiki/Prime-counting_function) $\\pi(x)$.  Here $\\pi(x)$ is the **number of primes** between 1 and $x$ (inclusive).  So $\\pi(2) = 1$ and $\\pi(3) = 2$ and $\\pi(4) = 2$ and $\\pi(5) = 3$.  One can compute a value of $\\pi(x)$ pretty easily using a list comprehension.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oFK7OGHoo1Nz"
      },
      "source": [
        "def primes_upto(x):\n",
        "    return len([p for p in primes if p <= x]) # List comprehension recovers the primes up to x."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eCi28UhMo1Nz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9591d415-4b63-4921-cc26-41b5272cf6e4"
      },
      "source": [
        "primes_upto(1000)  # There are 168 primes between 1 and 1000."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "168"
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZlnkhYw7o1Nz"
      },
      "source": [
        "Now we graph the prime counting function.  To do this, we use a list comprehension, and the visualization library called matplotlib.  For graphing a function, the basic idea is to create a list of x-values, a list of corresponding y-values (so the lists have to be the same length!), and then we feed the two lists into matplotlib to make the graph.\n",
        "\n",
        "We begin by loading the necessary packages."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cvVF2M5Go1Nz"
      },
      "source": [
        "import matplotlib  #  A powerful graphics package.\n",
        "import numpy  #  A math package\n",
        "import matplotlib.pyplot as plt  # A plotting subpackage in matplotlib."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-iouxGxro1Nz"
      },
      "source": [
        "Now let's graph the function $y = x^2$ over the domain $-2 \\leq x \\leq 2$ for practice.  As a first step, we use numpy's `linspace` function to create an evenly spaced set of 11 x-values between -2 and 2."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n7oh0AAAo1Nz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4768b88c-b6cb-47d3-d4b7-740e1f53b5ec"
      },
      "source": [
        "x_values = numpy.linspace(-2,2,11)  # The argument 11 is the *number* of terms, not the step size!\n",
        "print(x_values)\n",
        "type(x_values)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-2.  -1.6 -1.2 -0.8 -0.4  0.   0.4  0.8  1.2  1.6  2. ]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {},
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "idcqPGZ0o1Nz"
      },
      "source": [
        "You might notice that the format looks a bit different from a list.  Indeed, if you check `type(x_values)`, it's not a list but something else called a numpy array.  Numpy is a package that excels with computations on large arrays of data.  On the surface, it's not so different from a list.  The `numpy.linspace` command is a convenient way of producing an evenly spaced list of inputs.\n",
        "\n",
        "The big difference is that operations on numpy arrays are interpreted differently than operations on ordinary Python lists.  Try the two commands for comparison."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5LjKKSeZo1Nz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a3121f5e-4b9b-438a-d1f5-740867fd25f4"
      },
      "source": [
        "[1,2,3] + [1,2,3]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 2, 3, 1, 2, 3]"
            ]
          },
          "metadata": {},
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qZFk1LBJo1Nz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b5b5e4e7-d431-4ed0-ea28-bac0f8644055"
      },
      "source": [
        "x_values + x_values"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-4. , -3.2, -2.4, -1.6, -0.8,  0. ,  0.8,  1.6,  2.4,  3.2,  4. ])"
            ]
          },
          "metadata": {},
          "execution_count": 102
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LyesLSuPo1N0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f2ca3df0-9104-4e34-903e-bc21f69c8b2e"
      },
      "source": [
        "y_values = x_values * x_values  # How is multiplication interpreted on numpy arrays?\n",
        "print(y_values)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[4.   2.56 1.44 0.64 0.16 0.   0.16 0.64 1.44 2.56 4.  ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uAFegDVTo1N0"
      },
      "source": [
        "Now we use matplotlib to create a simple line graph."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tjB51noto1N0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "outputId": "91fa84fc-4880-41c7-fae9-40a6486da94e"
      },
      "source": [
        "%matplotlib inline\n",
        "plt.plot(x_values, y_values)\n",
        "plt.title('The graph of $y = x^2$')  # The dollar signs surround the formula, in LaTeX format.\n",
        "plt.ylabel('y')\n",
        "plt.xlabel('x')\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9Wg3S1WTo1N0"
      },
      "source": [
        "Let's analyze the graphing code a bit more.  See the [official pyplot tutorial](https://matplotlib.org/users/pyplot_tutorial.html) for more details.  \n",
        "```python\n",
        "%matplotlib inline\n",
        "plt.plot(x_values, y_values)\n",
        "plt.title('The graph of $y = x^2$')  # The dollar signs surround the formula, in LaTeX format.\n",
        "plt.ylabel('y')\n",
        "plt.xlabel('x')\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "```\n",
        "The first line contains the **magic** `%matplotlib inline`.  We have seen a magic word before, in `%timeit`.  [Magic words](http://ipython.readthedocs.io/en/stable/interactive/magics.html) can call another program to assist.  So here, the magic `%matplotlib inline` calls matplotlib for help, and places the resulting figure within the notebook.\n",
        "\n",
        "The next line `plt.plot(x_values, y_values)` creates a `plot object` based on the data of the x-values and y-values.  It is an abstract sort of object, behind the scenes, in a format that matplotlib understands.  The following lines set the title of the plot, the axis labels, and turns a grid on.  The last line `plt.show` renders the plot as an image in your notebook.  There's an infinite variety of graphs that matplotlib can produce -- see [the gallery](https://matplotlib.org/gallery.html) for more!  Other graphics packages include [bokeh](http://bokeh.pydata.org/en/latest/) and [seaborn](http://seaborn.pydata.org/), which extends matplotlib."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b0yTOq4-o1N0"
      },
      "source": [
        "### Analysis of the prime counting function\n",
        "\n",
        "Now, to analyze the prime counting function, let's graph it.  To make a graph, we will first need a list of many values of x and many corresponding values of $\\pi(x)$.  We do this with two commands.  The first might take a minute to compute."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gnKV26bno1N0"
      },
      "source": [
        "x_values = numpy.linspace(0,1000000,1001) # The numpy array [0,1000,2000,3000,...,1000000]\n",
        "pix_values = numpy.array([primes_upto(x) for x in x_values])  # [FUNCTION(x) for x in LIST] syntax"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aqlila-uo1N0"
      },
      "source": [
        "We created an array of x-values as before.  But the creation of an array of y-values (here, called `pix_values` to stand for $\\pi(x)$) probably looks strange.  We have done two new things!\n",
        "\n",
        "1.  We have used a list comprehension `[primes_upto(x) for x in x_values]` to create a **list** of y-values.\n",
        "2.  We have used numpy.array(LIST) syntax to convert a Python list into a numpy array.\n",
        "\n",
        "First, we explain the list comprehension.  Instead of pulling out values of a list according to a condition, with `[x for x in LIST if CONDITION]`, we have created a new list based on performing a function each element of a list.  The syntax, used above, is `[FUNCTION(x) for x in LIST]`.  These two methods of list comprehension can be combined, in fact.  The most general syntax for list comprehension is `[FUNCTION(x) for x in LIST if CONDITION]`.\n",
        "\n",
        "Second, a list comprehension can be carried out on a numpy array, but the result is a plain Python list.  It will be better to have a numpy array instead for what follows, so we use the `numpy.array()` function to convert the list into a numpy array."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i2DlTbsho1N0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8f065d77-18d9-4e43-90c3-0b5b5cf9bb87"
      },
      "source": [
        "type(numpy.array([1,2,3]))  # For example."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BMmq8Fx4o1N0"
      },
      "source": [
        "Now we have two numpy arrays:  the array of x-values and the array of y-values.  We can make a plot with matplotlib."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cq5kg4HPo1N0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5563713c-e3a5-48f6-89f2-8a991b18dabb"
      },
      "source": [
        "len(x_values) == len(pix_values)  # These better be the same, or else matplotlib will be unhappy."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DEfDVt9Wo1N0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "98e9be2c-6363-4219-ff2a-436cd8c15cf5"
      },
      "source": [
        "%matplotlib inline\n",
        "plt.plot(x_values, pix_values)\n",
        "plt.title('The prime counting function')\n",
        "plt.ylabel('$\\pi(x)$')\n",
        "plt.xlabel('x')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R7djMP0do1N1"
      },
      "source": [
        "In this range, the prime counting function might look nearly linear.  But if you look closely, there's a subtle downward bend.  This is more pronounced in smaller ranges.  For example, let's look at the first 10 x-values and y-values only."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oTPTeUX4o1N1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "a5ae25d4-1dad-4c97-bae8-2c424b2bca47"
      },
      "source": [
        "%matplotlib inline\n",
        "plt.plot(x_values[:10], pix_values[:10])  # Look closer to 0.\n",
        "plt.title('The prime counting function')\n",
        "plt.ylabel('$\\pi(x)$')\n",
        "plt.xlabel('x')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EnrdVEyCo1N1"
      },
      "source": [
        "It still looks almost linear, but there's a visible downward bend here.  How can we see this bend more clearly?  If the graph were linear, its equation would have the form $\\pi(x) = mx$ for some fixed slope $m$ (since the graph *does* pass through the origin).  Therefore, the quantity $\\pi(x)/x$ would be *constant* if the graph were linear.  \n",
        "\n",
        "Hence, if we graph $\\pi(x) / x$ on the y-axis and $x$ on the x-axis, and the result is nonconstant, then the function $\\pi(x)$ is nonlinear."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZgRF7b2Ko1N1"
      },
      "source": [
        "m_values = pix_values[1:] / x_values[1:]  # We start at 1, to avoid a division by zero error."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-grvUV4so1N1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "outputId": "e92a70ae-534f-46eb-fb0b-669779a0cd87"
      },
      "source": [
        "%matplotlib inline\n",
        "plt.plot(x_values[1:], m_values)\n",
        "plt.title('The ratio $\\pi(x) / x$ as $x$ varies.')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('$\\pi(x) / x$')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HwGVsVlxo1N1"
      },
      "source": [
        "That is certainly not constant!  The decay of $\\pi(x) / x$ is not so different from $1 / \\log(x)$, in fact.  To see this, let's overlay the graphs.  We use the `numpy.log` function, which computes the natural logarithm of its input (and allows an entire array as input)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YlSSqcDko1N1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "outputId": "4bf4bd5d-04f3-445f-cd0b-75e35f25efc3"
      },
      "source": [
        "%matplotlib inline\n",
        "plt.plot(x_values[1:], m_values, label='$\\pi(x)/x$')  # The same as the plot above.\n",
        "plt.plot(x_values[1:], 1 / numpy.log(x_values[1:]), label='$1 / \\log(x)$')  # Overlay the graph of 1 / log(x)\n",
        "plt.title('The ratio of $\\pi(x) / x$ as $x$ varies.')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('$\\pi(x) / x$')\n",
        "plt.grid(True)\n",
        "plt.legend()  # Turn on the legend.\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zrPg3i8-o1N1"
      },
      "source": [
        "The shape of the decay of $\\pi(x) / x$ is very close to $1 / \\log(x)$, but it looks like there is an offset.  In fact, there is, and it is pretty close to $1 / \\log(x)^2$.  And that is close, but again there's another little offset, this time proportional to $2 / \\log(x)^3$.  This goes on forever, if one wishes to approximate $\\pi(x) / x$ by an \"asymptotic expansion\" (not a good idea, it turns out).\n",
        "\n",
        "The closeness of $\\pi(x) / x$ to $1 / \\log(x)$ is expressed in the **prime number theorem**:\n",
        "$$\\lim_{x \\rightarrow \\infty} \\frac{\\pi(x)}{x / \\log(x)} = 1.$$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NWQ3CIVwo1N1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "outputId": "86f8f32f-06cb-4135-8b3a-603210e3dbeb"
      },
      "source": [
        "%matplotlib inline\n",
        "plt.plot(x_values[1:], m_values * numpy.log(x_values[1:])  )  # Should get closer to 1.\n",
        "plt.title('The ratio $\\pi(x) / (x / \\log(x))$ approaches 1... slowly')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('$\\pi(x) / (x / \\log(x)) $')\n",
        "plt.ylim(0.8,1.2)\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X6ELoOO-o1N1"
      },
      "source": [
        "Comparing the graph to the theoretical result, we find that the ratio $\\pi(x) / (x / \\log(x))$ approaches $1$ (the theoretical result) but very slowly (see the graph above!)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aqXOKRako1N1"
      },
      "source": [
        "A much stronger result relates $\\pi(x)$ to the \"logarithmic integral\" $li(x)$.  The [Riemann hypothesis](http://www.claymath.org/millennium-problems/riemann-hypothesis) is equivalent to the statement\n",
        "$$\\left\\vert \\pi(x) - li(x) \\right\\vert = O(\\sqrt{x} \\log(x)).$$\n",
        "In other words, the error if one approximates $\\pi(x)$ by $li(x)$ is bounded by a constant times $\\sqrt{x} \\log(x)$.  The logarithmic integral function isn't part of Python or numpy, but it is in the mpmath package.  If you have this package installed, then you can try the following."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KqOcdcCjo1N2"
      },
      "source": [
        "from mpmath import li"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pgee6LGxo1N2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f4f29f29-12d2-4df1-cd4e-dfb0644bd5fe"
      },
      "source": [
        "print(primes_upto(1000000))  # The number of primes up to 1 million.\n",
        "print(li(1000000))  # The logarithmic integral of 1 million."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "78498\n",
            "78627.5491594622\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8Ak3l_pPo1N2"
      },
      "source": [
        "Not too shabby!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Sp7gn8eto1N2"
      },
      "source": [
        "### Prime gaps\n",
        "\n",
        "As a last bit of data analysis, we consider the **prime gaps**.  These are the numbers that occur as differences between consecutive primes.  Since all primes except 2 are odd, all prime gaps are even except for the 1-unit gap between 2 and 3.  There are many unsolved problems about prime gaps; the most famous might be that a gap of 2 occurs infinitely often (as in the gaps between 3,5 and between 11,13 and between 41,43, etc.).\n",
        "\n",
        "Once we have our data set of prime numbers, it is not hard to create a data set of prime gaps.  Recall that `primes` is our list of prime numbers up to 1 million."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NHd3eV32o1N2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "662f2ca1-ebf7-4ade-93cc-97d5a8e06151"
      },
      "source": [
        "len(primes) # The number of primes up to 1 million."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "78498"
            ]
          },
          "metadata": {},
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XHc6S5mzo1N2"
      },
      "source": [
        "primes_allbutlast = primes[:-1]  # This excludes the last prime in the list.\n",
        "primes_allbutfirst = primes[1:]  # This excludes the first (i.e., with index 0) prime in the list."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QBIkUK5eo1N2"
      },
      "source": [
        "primegaps = numpy.array(primes_allbutfirst) - numpy.array(primes_allbutlast) # Numpy is fast!"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tqGLrNREo1N2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "acbe2af4-2450-457e-84d7-3289a2eefc99"
      },
      "source": [
        "print(primegaps[:100])  # The first hundred prime gaps!"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 1  2  2  4  2  4  2  4  6  2  6  4  2  4  6  6  2  6  4  2  6  4  6  8\n",
            "  4  2  4  2  4 14  4  6  2 10  2  6  6  4  6  6  2 10  2  4  2 12 12  4\n",
            "  2  4  6  2 10  6  6  6  2  6  4  2 10 14  4  2  4 14  6 10  2  4  6  8\n",
            "  6  6  4  6  8  4  8 10  2 10  2  6  4  6  8  4  2  4 12  8  4  8  4  6\n",
            " 12  2 18  6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nmMeiaSpo1N2"
      },
      "source": [
        "What have we done?  It is useful to try out this method on a short list.  "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "on-JH3dTo1N2"
      },
      "source": [
        "L = [1,3,7,20]  # A nice short list."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f4iyePe3o1N2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f13b01d0-2c29-4960-d39f-9499f603d993"
      },
      "source": [
        "print(L[:-1])\n",
        "print(L[1:])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 3, 7]\n",
            "[3, 7, 20]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gpKfCHEEo1N3"
      },
      "source": [
        "Now we have two lists of the same length.  The gaps in the original list `L` are the differences between terms of the *same* index in the two new lists.  One might be tempted to just subtract, e.g., with the command `L[1:] - L[:-1]`, but subtraction is not defined for lists.\n",
        "\n",
        "Fortunately, by converting the lists to numpy arrays, we can use numpy's term-by-term subtraction operation."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H2Ob8Jkro1N3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "outputId": "49ea7ec0-d9f7-4421-be6e-c6796ca6854e"
      },
      "source": [
        "L[1:] - L[:-1]  # This will give a TypeError.  You can't subtract lists!"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-122-0c27eb74e0a4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mL\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mL\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# This will give a TypeError.  You can't subtract lists!\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for -: 'list' and 'list'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lSkR4Dxho1N3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d6cfdd55-9548-4a25-f525-e25cd5943cd1"
      },
      "source": [
        "numpy.array(L[1:]) - numpy.array(L[:-1])  # That's better.  See the gaps in the list [1,3,7,20] in the output."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 2,  4, 13])"
            ]
          },
          "metadata": {},
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-dVIfFnVo1N3"
      },
      "source": [
        "Now let's return to our primegaps data set.  It contains all the gap-sizes for primes up to 1 million.  "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i9FFJvMbo1N3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "10bb2d61-f9e6-492b-ed43-0b69b243f5c5"
      },
      "source": [
        "print(len(primes))\n",
        "print(len(primegaps))  # This should be one less than the number of primes."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "78498\n",
            "78497\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hz93cWX1o1N3"
      },
      "source": [
        "As a last example of data visualization, we use matplotlib to produce a histogram of the prime gaps."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6V5Nj_MCo1N3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d44fab91-b9f1-4984-e61e-b40685d6b5cb"
      },
      "source": [
        "max(primegaps)  # The largest prime gap that appears!"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "114"
            ]
          },
          "metadata": {},
          "execution_count": 125
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rOFsdO1Uo1N3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 266
        },
        "outputId": "080f9fa4-1cad-478f-f33c-9418d7e00551"
      },
      "source": [
        "%matplotlib inline\n",
        "plt.figure(figsize=(12, 5))  #  Makes the resulting figure 12in by 5in.\n",
        "plt.hist(primegaps, bins=range(1,115)) #  Makes a histogram with one bin for each possible gap from 1 to 114.\n",
        "plt.ylabel('Frequency')\n",
        "plt.xlabel('Gap size')\n",
        "plt.grid(True)\n",
        "plt.title('The frequency of prime gaps, for primes up to 1 million')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-7-f7a3618c53ae>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmagic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'matplotlib inline'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m#  Makes the resulting figure 12in by 5in.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprimegaps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m115\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#  Makes a histogram with one bin for each possible gap from 1 to 114.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Frequency'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Gap size'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'primegaps' is not defined"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x360 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kkWLq7QLo1N3"
      },
      "source": [
        "Observe that gaps of 2 (twin primes) are pretty frequent.  There are over 8000 of them, and about the same number of 4-unit gaps!  But gaps of 6 are most frequent in the population, and there are some interesting peaks at 6, 12, 18, 24, 30.  What else do you observe?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yt5JakuSo1N3"
      },
      "source": [
        "### Exercises\n",
        "\n",
        "1.  Create functions `redprimes_upto(x)` and `blueprimes_upto(x)` which count the number of red/blue primes up to a given number `x`.  Recall that we defined red/blue primes to be those of the form 4n+1 or 4n+3, respectively.  Graph the relative proportion of red/blue primes as `x` varies from 1 to 1 million.  E.g., are the proportions 50%/50% or 70%/30%, and how do these proportions change?  Note:  this is also visualized in [An Illustrated Theory of Numbers](http://bookstore.ams.org/mbk-105) and you can read [an article by Rubinstein and Sarnak](https://projecteuclid.org/euclid.em/1048515870) for more.\n",
        "\n",
        "2.  Does there seem to be a bias in the last digits of primes?  Note that, except for 2 and 5, every prime ends in 1,3,7, or 9.  Note: the last digit of a number `n` is obtained from `n % 10`.  \n",
        "\n",
        "3.  Read about the [\"Prime Conspiracy\"](https://www.quantamagazine.org/mathematicians-discover-prime-conspiracy-20160313), recently discovered by Lemke Oliver and Soundararajan.  Can you detect their conspiracy in our data set of primes?"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Create functions redprimes_upto(x) and blueprimes_upto(x) which count the number of red/blue primes up to a given number x. Recall that we defined red/blue primes to be those of the form 4n+1 or 4n+3, respectively. Graph the relative proportion of red/blue primes as x varies from 1 to 1 million. E.g., are the proportions 50%/50% or 70%/30%, and how do these proportions change? Note: this is also visualized in An Illustrated Theory of Numbers and you can read an article by Rubinstein and Sarnak for more."
      ],
      "metadata": {
        "id": "IbwT4FgMJlZ3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def redprimes_upto(x):\n",
        "  n = where(isprime_list(x))\n",
        "  output_list = []\n",
        "  for i in range (len(n)):\n",
        "    if n[i] % 4 == 1:\n",
        "      output_list.append(n[i])\n",
        "  return output_list\n",
        "print(redprimes_upto(77))\n",
        "\n",
        "def blueprimes_upto(x):\n",
        "  n = where(isprime_list(x))\n",
        "  output_list = []\n",
        "  for i in range (len(n)):\n",
        "    if n[i] % 4 == 3:\n",
        "      output_list.append(n[i])\n",
        "  return output_list\n",
        "print(blueprimes_upto(77))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KN8Yz5F3JnS-",
        "outputId": "076f7097-8052-43e1-e7bb-d5ed52ad9f28"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5, 13, 17, 29, 37, 41, 53, 61, 73]\n",
            "[3, 7, 11, 19, 23, 31, 43, 47, 59, 67, 71]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%matplotlib inline\n",
        "plt.figure(figsize=(12, 5))  #  Makes the resulting figure 12in by 5in.\n",
        "plt.hist(blueprimes_upto(10**6), bins=range(1,10**4)) #  Makes a histogram with one bin for each possible gap from 1 to 114.\n",
        "plt.hist(redprimes_upto(10**6), bins=range(1,10**4)) #  Makes a histogram with one bin for each possible gap from 1 to 114.\n",
        "plt.ylabel('Red Prime and Blue Prime')\n",
        "plt.xlabel('Number Line')\n",
        "plt.grid(True)\n",
        "plt.title('Red Primes and BLue Primes')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 346
        },
        "id": "O8QQCTYkNW79",
        "outputId": "653b7356-641e-436c-cc1e-55f5e3039d3c"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Does there seem to be a bias in the last digits of primes? Note that, except for 2 and 5, every prime ends in 1,3,7, or 9. Note: the last digit of a number n is obtained from n % 10."
      ],
      "metadata": {
        "id": "zyB7_r1RVR-K"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Yes, there seems to be a bias. There are no even numbers or fives, so they are all either 1, 3, 7, or 9. Amongst those, there  seems to be no bias."
      ],
      "metadata": {
        "id": "UXAzB8HEVd_X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n = where(isprime_list(1000000))\n",
        "for i in range(len(n)):\n",
        "  n[i] = n[i]%10\n",
        "print(n)\n",
        "%matplotlib inline\n",
        "plt.figure(figsize=(12, 5))  #  Makes the resulting figure 12in by 5in.\n",
        "plt.hist(n, bins=range(1,10)) #  Makes a histogram with one bin for each possible gap from 1 to 114.\n",
        "#plt.hist(redprimes_upto(10**6), bins=range(1,10**4)) #  Makes a histogram with one bin for each possible gap from 1 to 114.\n",
        "plt.ylabel('Frequency of Digit')\n",
        "plt.xlabel('Digit')\n",
        "plt.grid(True)\n",
        "plt.title('Frequency of Digit vs. Digit')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "id": "i5QA3gYuWYBs",
        "outputId": "b7cc1032-e70a-4c40-bd80-89b3df552473"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 3, 5, 7, 1, 3, 7, 9, 3, 9, 1, 7, 1, 3, 7, 3, 9, 1, 7, 1, 3, 9, 3, 9, 7, 1, 3, 7, 9, 3, 7, 1, 7, 9, 9, 1, 7, 3, 7, 3, 9, 1, 1, 3, 7, 9, 1, 3, 7, 9, 3, 9, 1, 1, 7, 3, 9, 1, 7, 1, 3, 3, 7, 1, 3, 7, 1, 7, 7, 9, 3, 9, 7, 3, 9, 3, 9, 7, 1, 9, 9, 1, 1, 3, 9, 3, 9, 7, 1, 3, 7, 9, 7, 1, 9, 3, 9, 1, 3, 1, 7, 7, 3, 9, 1, 7, 7, 3, 9, 1, 7, 3, 7, 9, 1, 1, 3, 7, 3, 9, 1, 3, 7, 3, 1, 1, 9, 9, 7, 3, 9, 3, 1, 7, 1, 9, 3, 7, 7, 9, 1, 1, 3, 7, 9, 9, 3, 7, 9, 3, 7, 1, 3, 7, 7, 1, 9, 9, 7, 1, 7, 3, 7, 1, 7, 3, 1, 7, 9, 3, 9, 1, 1, 3, 9, 9, 1, 1, 3, 9, 7, 1, 3, 7, 3, 9, 7, 3, 9, 1, 3, 3, 1, 1, 7, 3, 1, 3, 7, 3, 9, 1, 7, 9, 9, 7, 9, 3, 9, 1, 7, 1, 3, 7, 9, 1, 7, 1, 7, 3, 1, 9, 9, 3, 7, 9, 3, 9, 7, 1, 3, 9, 1, 1, 3, 7, 9, 3, 9, 1, 3, 1, 3, 9, 3, 9, 7, 1, 9, 3, 7, 1, 7, 9, 3, 9, 1, 7, 7, 7, 3, 7, 9, 3, 7, 9, 9, 1, 3, 3, 1, 7, 3, 9, 7, 3, 7, 9, 1, 1, 3, 1, 7, 1, 7, 1, 3, 7, 9, 9, 1, 7, 3, 1, 3, 9, 1, 3, 9, 7, 3, 7, 9, 3, 1, 7, 7, 9, 9, 3, 3, 9, 1, 3, 7, 9, 9, 1, 3, 9, 1, 7, 1, 3, 3, 1, 9, 3, 7, 3, 1, 7, 9, 3, 1, 7, 9, 3, 1, 7, 3, 7, 9, 1, 3, 9, 1, 7, 1, 7, 1, 7, 1, 3, 9, 3, 9, 1, 7, 3, 7, 1, 7, 9, 7, 3, 7, 3, 1, 1, 9, 3, 9, 1, 7, 9, 1, 3, 9, 7, 1, 3, 7, 7, 9, 3, 1, 7, 3, 7, 9, 3, 9, 7, 1, 3, 9, 9, 1, 1, 9, 3, 7, 7, 9, 1, 7, 1, 3, 9, 3, 7, 3, 1, 7, 1, 9, 7, 7, 3, 9, 7, 7, 9, 3, 7, 3, 9, 1, 9, 1, 1, 9, 3, 7, 1, 9, 1, 7, 9, 3, 9, 9, 9, 1, 7, 3, 7, 9, 1, 7, 1, 3, 9, 7, 1, 9, 1, 3, 7, 9, 1, 9, 1, 7, 3, 9, 3, 9, 1, 3, 7, 9, 1, 1, 3, 9, 1, 7, 3, 3, 9, 7, 1, 3, 7, 9, 1, 9, 1, 7, 7, 9, 3, 9, 1, 7, 7, 9, 1, 1, 3, 3, 7, 3, 7, 3, 1, 7, 3, 9, 1, 3, 7, 1, 7, 1, 9, 9, 7, 3, 9, 1, 7, 9, 9, 3, 7, 3, 1, 3, 3, 7, 1, 3, 3, 7, 1, 9, 7, 1, 7, 9, 3, 9, 1, 3, 7, 7, 9, 1, 3, 7, 3, 9, 1, 7, 9, 1, 7, 3, 9, 1, 3, 9, 1, 7, 9, 3, 9, 3, 7, 9, 7, 1, 1, 7, 9, 9, 1, 1, 3, 3, 9, 1, 1, 3, 3, 9, 7, 7, 7, 9, 9, 7, 3, 3, 1, 7, 9, 1, 3, 1, 7, 1, 7, 3, 1, 3, 3, 7, 3, 7, 9, 3, 7, 9, 1, 7, 3, 1, 7, 3, 1, 7, 9, 3, 9, 1, 7, 3, 3, 9, 1, 3, 1, 3, 9, 3, 1, 9, 3, 7, 9, 3, 9, 1, 3, 7, 1, 1, 1, 7, 9, 3, 9, 9, 1, 3, 7, 3, 1, 7, 7, 9, 3, 7, 3, 9, 3, 9, 1, 1, 3, 9, 1, 9, 7, 1, 7, 9, 1, 7, 3, 9, 7, 3, 7, 1, 9, 9, 7, 9, 7, 1, 3, 7, 1, 3, 9, 1, 7, 3, 9, 3, 3, 7, 1, 1, 7, 3, 9, 7, 3, 7, 9, 1, 7, 1, 3, 9, 1, 7, 9, 3, 1, 3, 7, 9, 1, 7, 1, 7, 3, 9, 3, 1, 1, 3, 9, 1, 7, 1, 3, 7, 9, 9, 3, 9, 3, 1, 1, 7, 7, 1, 3, 9, 9, 3, 1, 1, 7, 3, 1, 7, 9, 3, 9, 1, 7, 1, 7, 9, 9, 1, 7, 3, 3, 7, 9, 3, 1, 7, 7, 1, 9, 7, 3, 7, 3, 7, 3, 9, 9, 1, 1, 3, 1, 1, 3, 3, 1, 3, 3, 7, 9, 3, 1, 7, 1, 9, 7, 7, 3, 9, 1, 7, 7, 9, 1, 1, 7, 3, 9, 7, 3, 3, 9, 1, 7, 3, 9, 9, 7, 1, 7, 9, 1, 9, 3, 1, 1, 1, 9, 7, 1, 3, 3, 9, 1, 7, 1, 9, 7, 9, 7, 3, 9, 1, 3, 9, 9, 1, 1, 3, 9, 9, 3, 7, 1, 3, 9, 1, 1, 3, 3, 3, 7, 9, 3, 1, 7, 3, 9, 1, 3, 9, 7, 1, 7, 7, 9, 9, 1, 7, 1, 7, 3, 1, 7, 1, 3, 9, 7, 9, 3, 7, 9, 9, 3, 9, 1, 7, 9, 1, 9, 7, 7, 3, 7, 1, 3, 9, 9, 7, 3, 7, 3, 3, 7, 7, 9, 1, 1, 3, 9, 1, 9, 3, 1, 7, 3, 1, 7, 9, 7, 1, 7, 9, 9, 7, 7, 3, 9, 7, 1, 7, 9, 9, 1, 3, 7, 3, 9, 1, 3, 7, 1, 9, 3, 9, 9, 3, 1, 7, 1, 9, 3, 7, 3, 7, 1, 3, 7, 9, 9, 3, 7, 3, 9, 1, 3, 7, 3, 7, 9, 3, 1, 7, 9, 7, 3, 7, 9, 1, 3, 3, 9, 1, 7, 9, 3, 9, 9, 1, 7, 9, 3, 1, 1, 7, 3, 7, 1, 7, 1, 9, 1, 9, 9, 1, 1, 3, 7, 3, 3, 9, 3, 7, 1, 3, 7, 1, 7, 9, 3, 3, 9, 7, 7, 9, 9, 3, 9, 1, 3, 7, 1, 7, 1, 3, 1, 7, 7, 9, 3, 3, 3, 1, 7, 9, 9, 3, 7, 9, 1, 7, 3, 9, 7, 1, 9, 3, 9, 7, 3, 9, 1, 7, 1, 7, 3, 1, 9, 3, 3, 7, 9, 1, 1, 7, 9, 9, 1, 3, 7, 7, 3, 3, 9, 3, 1, 1, 3, 9, 1, 9, 1, 7, 1, 3, 9, 1, 3, 9, 9, 7, 1, 3, 9, 7, 3, 7, 1, 7, 1, 3, 1, 7, 9, 3, 9, 1, 7, 9, 1, 7, 7, 1, 3, 3, 1, 9, 3, 7, 1, 3, 9, 1, 7, 1, 7, 3, 3, 9, 1, 1, 3, 7, 9, 1, 3, 7, 3, 9, 1, 7, 1, 1, 3, 9, 7, 1, 7, 1, 3, 9, 3, 9, 1, 3, 9, 1, 7, 9, 9, 7, 9, 1, 3, 9, 3, 9, 7, 9, 1, 7, 1, 3, 1, 7, 9, 3, 9, 1, 7, 9, 1, 3, 7, 1, 7, 3, 9, 1, 1, 9, 7, 3, 7, 9, 7, 9, 1, 7, 9, 9, 1, 3, 9, 3, 1, 3, 9, 1, 1, 9, 3, 9, 7, 1, 3, 1, 3, 3, 7, 3, 9, 7, 1, 3, 9, 1, 3, 3, 1, 1, 3, 7, 3, 7, 9, 1, 9, 7, 9, 3, 3, 7, 9, 3, 7, 7, 9, 1, 3, 9, 1, 9, 7, 9, 7, 1, 7, 3, 7, 1, 9, 1, 7, 3, 7, 7, 1, 9, 1, 3, 9, 3, 9, 3, 1, 1, 9, 9, 1, 7, 7, 3, 9, 1, 7, 3, 9, 1, 3, 9, 7, 9, 9, 7, 3, 9, 7, 3, 3, 7, 7, 7, 9, 9, 1, 3, 7, 3, 3, 7, 9, 1, 9, 9, 1, 1, 3, 7, 7, 3, 9, 3, 1, 7, 1, 3, 9, 7, 9, 1, 7, 1, 9, 1, 3, 9, 3, 3, 9, 1, 3, 7, 3, 7, 7, 1, 3, 9, 1, 7, 3, 9, 7, 9, 1, 9, 7, 3, 7, 7, 1, 3, 7, 7, 1, 9, 9, 1, 7, 9, 1, 3, 7, 9, 3, 9, 1, 7, 3, 1, 7, 1, 3, 9, 3, 7, 7, 7, 3, 9, 3, 7, 3, 9, 1, 3, 9, 9, 1, 1, 7, 7, 1, 7, 1, 3, 9, 1, 3, 7, 1, 7, 9, 3, 9, 3, 9, 7, 1, 3, 7, 3, 1, 7, 9, 1, 1, 3, 3, 9, 7, 1, 9, 1, 3, 9, 3, 7, 3, 7, 9, 1, 1, 9, 3, 1, 3, 7, 1, 7, 3, 9, 7, 1, 7, 3, 1, 7, 7, 9, 1, 7, 3, 9, 7, 3, 9, 1, 1, 3, 9, 7, 1, 7, 3, 9, 1, 9, 7, 3, 3, 1, 9, 3, 7, 3, 1, 1, 9, 9, 1, 3, 9, 1, 3, 9, 3, 9, 7, 1, 7, 9, 3, 1, 3, 9, 7, 3, 9, 3, 1, 3, 7, 9, 3, 7, 3, 9, 3, 3, 9, 3, 9, 1, 7, 7, 1, 9, 3, 1, 7, 3, 7, 7, 9, 9, 1, 9, 9, 7, 1, 7, 9, 3, 7, 1, 7, 9, 7, 1, 7, 9, 1, 7, 1, 1, 1, 7, 3, 9, 7, 7, 9, 3, 3, 7, 3, 7, 7, 1, 7, 3, 9, 7, 3, 9, 9, 9, 1, 7, 1, 3, 7, 9, 1, 1, 3, 9, 1, 7, 9, 3, 1, 9, 9, 7, 9, 1, 1, 9, 3, 7, 9, 3, 1, 3, 7, 3, 1, 1, 3, 3, 7, 7, 9, 9, 1, 9, 3, 1, 7, 1, 1, 3, 7, 7, 3, 9, 3, 9, 3, 7, 7, 7, 1, 3, 9, 1, 1, 3, 3, 1, 3, 7, 1, 7, 9, 7, 9, 1, 7, 1, 9, 3, 1, 7, 7, 9, 1, 9, 9, 3, 9, 3, 7, 3, 9, 1, 7, 1, 3, 1, 3, 1, 7, 9, 3, 9, 3, 7, 9, 3, 9, 3, 7, 3, 1, 7, 1, 7, 3, 9, 7, 1, 9, 3, 7, 3, 1, 7, 1, 3, 1, 7, 9, 9, 7, 1, 7, 3, 9, 9, 7, 1, 7, 9, 3, 3, 7, 1, 3, 1, 3, 7, 3, 1, 1, 7, 1, 1, 7, 9, 9, 1, 3, 7, 3, 9, 7, 7, 3, 1, 9, 3, 9, 1, 7, 7, 9, 9, 7, 3, 9, 9, 1, 9, 9, 1, 3, 7, 3, 1, 1, 3, 7, 9, 3, 1, 1, 7, 3, 3, 7, 1, 7, 1, 1, 9, 9, 1, 3, 1, 7, 9, 9, 1, 3, 7, 9, 1, 7, 1, 9, 3, 7, 1, 3, 7, 9, 9, 1, 7, 3, 7, 1, 7, 3, 9, 7, 3, 9, 7, 1, 7, 9, 1, 7, 3, 9, 3, 7, 9, 1, 3, 1, 1, 7, 3, 7, 1, 3, 7, 9, 3, 7, 1, 7, 3, 1, 7, 9, 1, 3, 7, 9, 3, 7, 3, 9, 1, 9, 3, 7, 3, 1, 9, 3, 9, 9, 1, 3, 9, 1, 1, 7, 1, 7, 3, 7, 1, 3, 7, 1, 7, 3, 9, 9, 7, 3, 1, 7, 3, 3, 7, 9, 1, 3, 9, 1, 7, 1, 3, 1, 3, 9, 3, 9, 1, 7, 9, 3, 7, 1, 3, 9, 1, 3, 1, 9, 3, 9, 1, 3, 1, 7, 1, 7, 3, 3, 9, 1, 7, 3, 1, 1, 7, 9, 3, 1, 7, 3, 7, 3, 9, 7, 7, 3, 7, 9, 7, 3, 9, 1, 3, 7, 9, 1, 9, 7, 1, 3, 9, 7, 1, 7, 3, 1, 1, 9, 7, 3, 7, 9, 3, 1, 7, 9, 1, 3, 9, 7, 1, 7, 3, 9, 1, 7, 9, 9, 9, 1, 9, 3, 9, 1, 7, 9, 9, 3, 7, 7, 9, 9, 1, 3, 7, 3, 9, 7, 7, 9, 1, 3, 9, 1, 7, 7, 7, 9, 1, 3, 1, 1, 3, 9, 1, 1, 3, 9, 9, 7, 9, 1, 7, 1, 7, 9, 3, 1, 3, 7, 9, 9, 1, 7, 9, 7, 9, 1, 7, 1, 3, 3, 9, 9, 1, 1, 9, 1, 7, 3, 9, 3, 1, 3, 7, 9, 7, 9, 1, 7, 1, 3, 9, 1, 3, 7, 1, 9, 7, 1, 3, 7, 3, 9, 3, 1, 7, 1, 1, 3, 3, 7, 1, 3, 9, 1, 3, 3, 7, 3, 7, 7, 1, 1, 9, 1, 1, 3, 9, 1, 3, 9, 7, 3, 7, 3, 7, 3, 9, 9, 9, 9, 1, 3, 7, 9, 7, 9, 3, 9, 1, 9, 3, 1, 7, 1, 9, 3, 9, 1, 7, 1, 9, 1, 7, 3, 1, 3, 7, 1, 3, 9, 1, 7, 9, 9, 7, 3, 9, 1, 9, 9, 3, 3, 9, 1, 7, 1, 3, 7, 1, 3, 7, 9, 3, 1, 7, 7, 3, 9, 1, 7, 3, 9, 1, 7, 1, 1, 3, 3, 9, 1, 7, 3, 7, 3, 9, 1, 1, 7, 7, 9, 9, 7, 7, 9, 1, 3, 9, 3, 7, 3, 1, 3, 9, 1, 3, 3, 1, 7, 9, 1, 3, 9, 7, 7, 9, 1, 3, 3, 9, 1, 3, 7, 1, 1, 3, 9, 7, 1, 3, 1, 9, 1, 7, 3, 7, 3, 9, 3, 7, 9, 1, 3, 7, 3, 1, 9, 1, 3, 9, 1, 9, 7, 7, 3, 7, 3, 1, 7, 3, 7, 9, 9, 9, 3, 9, 7, 1, 1, 1, 3, 7, 9, 3, 7, 9, 1, 3, 3, 9, 1, 3, 3, 9, 1, 7, 9, 1, 3, 1, 3, 7, 7, 9, 1, 3, 7, 9, 3, 9, 1, 3, 9, 7, 9, 9, 7, 3, 9, 7, 7, 9, 3, 1, 9, 9, 7, 9, 3, 1, 3, 1, 1, 3, 7, 9, 3, 1, 9, 1, 7, 9, 1, 7, 1, 9, 3, 9, 7, 3, 9, 9, 7, 1, 3, 1, 1, 7, 7, 9, 7, 3, 3, 7, 9, 3, 1, 7, 7, 9, 3, 1, 7, 1, 7, 9, 3, 7, 1, 7, 1, 3, 9, 3, 7, 1, 3, 9, 7, 9, 3, 9, 7, 7, 9, 9, 1, 1, 3, 7, 7, 9, 1, 3, 3, 1, 3, 7, 7, 9, 1, 7, 7, 3, 7, 9, 3, 7, 1, 9, 1, 1, 9, 3, 1, 1, 3, 1, 9, 7, 3, 1, 7, 1, 7, 3, 3, 7, 1, 7, 9, 1, 3, 7, 3, 9, 1, 3, 9, 1, 3, 9, 3, 7, 3, 7, 9, 1, 9, 3, 9, 7, 9, 1, 3, 7, 9, 3, 1, 3, 7, 3, 9, 7, 9, 1, 1, 7, 9, 3, 1, 7, 3, 9, 1, 3, 1, 1, 1, 1, 3, 9, 7, 1, 3, 3, 9, 1, 7, 9, 3, 1, 9, 9, 1, 7, 9, 9, 7, 1, 7, 9, 1, 1, 9, 7, 3, 7, 7, 1, 7, 3, 9, 1, 1, 7, 1, 7, 1, 7, 3, 1, 3, 3, 3, 3, 1, 7, 1, 7, 9, 9, 1, 3, 7, 9, 3, 1, 1, 7, 9, 7, 1, 3, 9, 7, 3, 9, 7, 1, 3, 9, 7, 1, 9, 9, 1, 3, 7, 1, 1, 7, 3, 9, 7, 9, 1, 9, 7, 1, 7, 9, 3, 7, 9, 1, 7, 9, 9, 7, 1, 3, 7, 1, 3, 9, 3, 9, 3, 7, 9, 3, 3, 9, 1, 7, 7, 9, 9, 1, 3, 7, 3, 1, 7, 3, 9, 1, 3, 9, 7, 1, 3, 7, 9, 3, 9, 7, 3, 9, 9, 1, 7, 9, 7, 1, 7, 1, 3, 1, 7, 9, 3, 9, 3, 9, 1, 1, 7, 3, 1, 7, 3, 7, 9, 3, 1, 3, 7, 1, 9, 9, 1, 7, 3, 3, 9, 9, 7, 1, 1, 7, 9, 7, 9, 1, 3, 9, 1, 7, 3, 9, 1, 9, 3, 9, 3, 1, 9, 9, 7, 7, 3, 7, 1, 1, 3, 1, 3, 1, 9, 1, 7, 3, 1, 7, 9, 3, 9, 3, 7, 1, 3, 9, 9, 1, 1, 7, 1, 9, 7, 9, 7, 7, 9, 3, 3, 3, 7, 1, 7, 9, 9, 3, 1, 3, 7, 7, 3, 7, 7, 1, 7, 1, 7, 7, 3, 3, 9, 1, 3, 9, 9, 9, 7, 3, 7, 3, 1, 1, 3, 7, 9, 1, 9, 3, 9, 7, 7, 3, 1, 9, 1, 3, 9, 7, 3, 7, 3, 9, 1, 3, 7, 1, 1, 7, 9, 3, 9, 1, 3, 9, 1, 3, 9, 3, 7, 7, 3, 9, 3, 3, 7, 3, 1, 7, 9, 3, 1, 3, 9, 1, 9, 1, 7, 9, 7, 3, 9, 3, 3, 9, 1, 3, 9, 3, 1, 9, 1, 7, 9, 3, 7, 1, 9, 1, 3, 3, 9, 7, 1, 3, 9, 1, 3, 1, 1, 7, 3, 9, 3, 9, 7, 7, 9, 1, 1, 3, 7, 3, 7, 9, 7, 1, 9, 7, 7, 1, 7, 3, 9, 7, 7, 3, 1, 7, 9, 9, 9, 9, 7, 1, 3, 9, 7, 1, 3, 1, 7, 7, 3, 1, 7, 9, 1, 3, 7, 3, 9, 1, 1, 3, 7, 3, 9, 1, 7, 9, 7, 3, 1, 3, 1, 3, 9, 9, 1, 3, 9, 1, 1, 3, 3, 1, 7, 7, 1, 3, 9, 1, 7, 3, 1, 7, 1, 3, 9, 1, 7, 3, 7, 1, 3, 7, 9, 7, 3, 9, 1, 7, 1, 9, 1, 3, 9, 1, 7, 1, 3, 9, 9, 7, 1, 7, 7, 7, 9, 7, 1, 7, 9, 7, 9, 1, 7, 9, 7, 9, 9, 1, 1, 1, 3, 1, 7, 1, 7, 3, 3, 9, 1, 7, 1, 3, 7, 9, 3, 9, 1, 3, 7, 3, 9, 1, 3, 9, 3, 9, 7, 3, 7, 7, 1, 3, 3, 1, 7, 9, 1, 3, 7, 3, 1, 7, 3, 7, 1, 9, 7, 1, 1, 7, 9, 1, 7, 7, 9, 9, 1, 3, 1, 3, 1, 3, 1, 1, 9, 9, 7, 9, 3, 9, 7, 7, 9, 9, 9, 1, 7, 3, 3, 9, 1, 9, 3, 9, 7, 3, 7, 3, 9, 3, 7, 7, 1, 7, 9, 9, 1, 3, 9, 1, 7, 3, 7, 9, 1, 7, 1, 3, 9, 7, 1, 3, 9, 7, 7, 3, 1, 3, 9, 1, 3, 9, 1, 9, 3, 7, 3, 7, 7, 3, 9, 7, 1, 9, 1, 9, 1, 7, 3, 9, 1, 9, 9, 7, 1, 3, 7, 3, 9, 3, 7, 1, 3, 9, 1, 7, 7, 3, 7, 3, 9, 1, 1, 7, 9, 1, 1, 3, 1, 9, 7, 7, 3, 1, 7, 3, 9, 7, 3, 3, 7, 9, 9, 1, 1, 3, 9, 7, 3, 3, 3, 3, 1, 7, 1, 7, 7, 9, 3, 1, 7, 9, 1, 9, 3, 1, 3, 9, 1, 3, 7, 3, 1, 3, 9, 1, 9, 3, 9, 3, 7, 1, 3, 7, 3, 9, 1, 7, 1, 7, 7, 9, 3, 9, 1, 3, 9, 7, 9, 1, 9, 1, 7, 3, 9, 3, 9, 3, 7, 9, 1, 9, 1, 7, 7, 3, 1, 3, 1, 3, 9, 9, 1, 3, 7, 3, 9, 3, 1, 7, 7, 9, 1, 3, 7, 1, 9, 7, 9, 1, 3, 7, 9, 7, 9, 9, 3, 7, 9, 7, 3, 1, 7, 3, 9, 1, 1, 7, 9, 7, 3, 7, 3, 7, 7, 3, 3, 1, 3, 9, 7, 9, 9, 1, 1, 3, 9, 9, 1, 1, 3, 1, 1, 7, 1, 9, 1, 7, 3, 3, 9, 3, 9, 1, 3, 9, 9, 1, 1, 1, 3, 9, 7, 1, 3, 9, 7, 1, 3, 9, 3, 9, 3, 1, 7, 7, 9, 3, 9, 7, 1, 7, 7, 9, 1, 7, 3, 7, 7, 9, 7, 1, 3, 7, 9, 7, 1, 9, 1, 3, 7, 1, 1, 3, 7, 7, 3, 3, 1, 7, 7, 3, 9, 7, 3, 7, 7, 9, 1, 3, 7, 9, 1, 1, 9, 1, 3, 9, 7, 7, 9, 9, 3, 3, 1, 7, 7, 3, 3, 1, 1, 3, 9, 7, 9, 1, 7, 9, 3, 9, 7, 3, 9, 9, 7, 9, 1, 3, 9, 3, 3, 9, 1, 3, 3, 3, 7, 1, 7, 1, 7, 9, 3, 9, 1, 3, 7, 1, 3, 9, 3, 9, 1, 7, 1, 1, 1, 3, 3, 9, 1, 3, 7, 9, 1, 7, 3, 7, 1, 3, 7, 1, 3, 9, 3, 9, 7, 3, 9, 1, 1, 3, 7, 3, 7, 3, 7, 3, 7, 9, 9, 1, 9, 3, 9, 7, 1, 3, 1, 3, 9, 3, 9, 7, 9, 1, 7, 3, 9, 1, 7, 9, 1, 3, 7, 3, 9, 3, 3, 9, 7, 9, 3, 1, 3, 3, 1, 7, 3, 9, 9, 1, 1, 9, 1, 1, 9, 3, 1, 3, 7, 7, 9, 1, 1, 7, 9, 1, 3, 7, 9, 3, 9, 7, 1, 3, 9, 3, 7, 7, 1, 9, 9, 7, 3, 3, 1, 9, 3, 7, 3, 9, 7, 1, 7, 9, 9, 1, 3, 7, 9, 3, 9, 7, 1, 7, 9, 3, 3, 1, 9, 9, 1, 7, 7, 9, 3, 1, 7, 9, 1, 7, 9, 1, 7, 3, 1, 9, 3, 1, 3, 1, 7, 1, 1, 7, 7, 9, 1, 3, 9, 7, 1, 3, 7, 9, 1, 7, 7, 9, 1, 3, 1, 3, 7, 1, 3, 9, 1, 7, 3, 3, 7, 1, 3, 3, 9, 7, 7, 1, 1, 7, 9, 1, 3, 1, 9, 9, 7, 9, 1, 3, 7, 9, 1, 1, 3, 9, 7, 3, 9, 3, 9, 1, 3, 7, 3, 1, 9, 1, 7, 3, 9, 7, 3, 3, 1, 9, 9, 7, 7, 9, 3, 1, 7, 9, 1, 3, 7, 9, 1, 7, 3, 7, 3, 9, 9, 9, 1, 3, 1, 3, 7, 1, 3, 9, 9, 1, 3, 9, 9, 7, 1, 7, 9, 1, 9, 3, 9, 1, 1, 1, 7, 1, 7, 7, 9, 1, 1, 1, 7, 3, 7, 9, 3, 3, 1, 3, 1, 7, 9, 3, 7, 7, 9, 1, 1, 7, 9, 1, 7, 1, 3, 7, 3, 9, 3, 1, 3, 7, 3, 7, 1, 7, 9, 1, 7, 3, 9, 1, 7, 1, 3, 9, 1, 7, 9, 1, 3, 9, 9, 7, 9, 1, 3, 3, 1, 3, 9, 7, 3, 3, 9, 7, 1, 3, 7, 7, 1, 7, 3, 3, 7, 7, 9, 1, 7, 1, 1, 7, 1, 9, 7, 9, 1, 1, 3, 9, 7, 3, 9, 7, 3, 9, 1, 3, 3, 3, 3, 9, 3, 1, 7, 7, 9, 3, 9, 3, 7, 3, 7, 9, 1, 1, 9, 3, 1, 3, 7, 9, 7, 9, 7, 3, 3, 1, 7, 3, 1, 7, 9, 3, 1, 9, 9, 1, 7, 9, 1, 7, 1, 3, 9, 1, 3, 7, 7, 1, 7, 7, 9, 1, 3, 9, 3, 9, 1, 3, 7, 3, 9, 7, 3, 3, 9, 1, 9, 9, 7, 1, 7, 7, 7, 3, 9, 9, 1, 1, 9, 9, 1, 7, 3, 3, 3, 3, 7, 7, 9, 3, 1, 7, 9, 7, 1, 3, 9, 9, 7, 9, 3, 1, 7, 3, 3, 9, 3, 1, 7, 1, 7, 9, 7, 7, 9, 1, 7, 1, 3, 9, 9, 1, 7, 9, 3, 3, 9, 7, 3, 1, 3, 9, 7, 7, 1, 3, 9, 1, 3, 1, 7, 3, 1, 1, 9, 9, 7, 7, 1, 7, 3, 7, 7, 1, 3, 7, 1, 9, 7, 3, 9, 3, 3, 9, 9, 3, 7, 7, 3, 9, 7, 1, 9, 1, 7, 9, 1, 3, 1, 7, 9, 3, 7, 1, 7, 9, 3, 1, 1, 7, 3, 1, 7, 9, 3, 9, 1, 1, 3, 7, 1, 7, 9, 3, 3, 9, 1, 9, 9, 1, 3, 9, 1, 7, 3, 9, 7, 1, 3, 3, 9, 7, 7, 9, 7, 3, 1, 3, 1, 3, 9, 1, 1, 7, 3, 1, 3, 7, 1, 3, 3, 3, 9, 1, 7, 3, 9, 3, 1, 3, 7, 9, 9, 7, 3, 7, 3, 9, 3, 9, 7, 1, 3, 1, 1, 9, 9, 7, 7, 9, 3, 9, 1, 1, 3, 1, 3, 7, 3, 1, 3, 9, 7, 1, 3, 3, 7, 9, 9, 9, 3, 1, 1, 9, 3, 9, 1, 1, 1, 1, 3, 9, 1, 7, 9, 3, 1, 9, 7, 1, 9, 3, 9, 9, 7, 3, 9, 1, 9, 9, 1, 9, 1, 7, 9, 9, 1, 7, 7, 3, 9, 7, 3, 7, 1, 9, 7, 3, 1, 9, 3, 9, 9, 3, 1, 7, 9, 3, 7, 3, 9, 1, 3, 7, 9, 1, 3, 3, 9, 7, 9, 3, 3, 1, 7, 1, 3, 7, 3, 9, 3, 1, 7, 1, 7, 3, 7, 9, 3, 9, 1, 3, 7, 3, 9, 7, 9, 9, 1, 3, 9, 7, 3, 1, 7, 9, 7, 7, 9, 3, 7, 9, 9, 9, 1, 9, 3, 1, 7, 1, 3, 9, 3, 9, 1, 7, 9, 3, 7, 9, 3, 7, 3, 7, 3, 9, 9, 1, 3, 3, 1, 7, 3, 9, 7, 1, 7, 7, 1, 3, 7, 1, 1, 3, 9, 1, 7, 9, 3, 9, 1, 3, 3, 1, 7, 1, 3, 3, 7, 3, 9, 1, 9, 3, 1, 1, 7, 1, 7, 9, 9, 1, 3, 3, 3, 7, 9, 1, 7, 3, 9, 1, 9, 3, 9, 9, 3, 7, 3, 9, 1, 7, 1, 7, 1, 7, 1, 9, 9, 1, 7, 9, 9, 7, 9, 1, 1, 7, 1, 9, 3, 3, 9, 1, 3, 9, 7, 3, 7, 3, 1, 7, 1, 7, 3, 7, 9, 9, 1, 3, 9, 3, 7, 9, 3, 3, 1, 1, 3, 3, 9, 1, 1, 9, 7, 9, 9, 1, 7, 3, 7, 9, 1, 3, 7, 9, 7, 1, 3, 3, 9, 7, 3, 1, 7, 9, 9, 3, 9, 1, 7, 3, 7, 9, 3, 7, 3, 1, 7, 1, 3, 7, 3, 7, 1, 9, 9, 3, 7, 9, 1, 7, 9, 1, 1, 3, 9, 7, 7, 3, 9, 7, 1, 3, 9, 9, 7, 7, 3, 1, 7, 3, 7, 3, 7, 1, 9, 9, 1, 3, 9, 3, 9, 1, 3, 9, 7, 3, 3, 1, 7, 9, 9, 3, 3, 9, 7, 9, 1, 3, 7, 3, 3, 7, 3, 1, 9, 7, 9, 1, 7, 3, 7, 1, 1, 3, 1, 3, 9, 1, 1, 1, 7, 9, 3, 1, 7, 1, 1, 7, 1, 7, 9, 7, 1, 3, 3, 7, 9, 1, 7, 7, 9, 3, 7, 3, 9, 1, 1, 9, 1, 1, 7, 1, 3, 9, 7, 1, 3, 7, 9, 3, 1, 3, 7, 9, 1, 3, 3, 3, 1, 1, 3, 9, 3, 7, 1, 7, 7, 1, 7, 9, 1, 3, 9, 1, 7, 9, 1, 1, 9, 3, 9, 1, 9, 1, 9, 9, 1, 3, 7, 1, 9, 7, 3, 7, 9, 3, 9, 1, 3, 1, 7, 1, 1, 3, 9, 7, 9, 3, 3, 1, 7, 1, 7, 9, 1, 3, 7, 3, 9, 3, 9, 7, 7, 1, 3, 3, 1, 7, 1, 7, 3, 7, 9, 1, 1, 9, 1, 3, 1, 3, 7, 9, 7, 9, 9, 9, 3, 1, 7, 9, 7, 3, 9, 7, 7, 9, 3, 9, 3, 1, 3, 7, 7, 3, 3, 1, 7, 3, 9, 1, 7, 1, 7, 9, 1, 9, 1, 1, 7, 3, 7, 9, 3, 1, 9, 3, 7, 7, 9, 9, 7, 1, 3, 1, 7, 9, 3, 3, 7, 3, 9, 1, 1, 7, 3, 3, 3, 1, 3, 7, 9, 7, 9, 9, 3, 1, 1, 9, 7, 3, 7, 1, 7, 7, 7, 1, 7, 3, 7, 9, 7, 1, 3, 7, 3, 1, 3, 3, 9, 7, 3, 3, 9, 3, 9, 1, 9, 9, 1, 7, 9, 1, 1, 3, 1, 3, 9, 3, 3, 1, 7, 3, 1, 1, 3, 7, 9, 9, 9, 7, 1, 1, 3, 9, 1, 7, 9, 7, 7, 9, 1, 1, 9, 1, 9, 1, 7, 1, 7, 1, 7, 9, 9, 7, 1, 3, 9, 9, 7, 3, 9, 1, 1, 9, 3, 9, 3, 9, 3, 9, 1, 7, 1, 3, 3, 7, 7, 1, 7, 9, 1, 7, 1, 7, 9, 9, 1, 3, 1, 7, 7, 9, 1, 9, 3, 7, 3, 7, 7, 1, 1, 7, 9, 7, 3, 1, 9, 3, 9, 7, 3, 7, 9, 1, 9, 7, 1, 7, 1, 9, 9, 7, 3, 7, 3, 9, 7, 9, 1, 3, 3, 1, 7, 9, 7, 7, 9, 1, 1, 9, 1, 7, 1, 7, 3, 1, 7, 3, 3, 3, 9, 1, 1, 9, 9, 3, 9, 9, 3, 7, 9, 1, 9, 1, 1, 3, 7, 7, 1, 3, 7, 9, 1, 7, 7, 9, 9, 7, 3, 7, 9, 1, 3, 1, 7, 3, 9, 7, 1, 3, 9, 7, 1, 7, 3, 9, 9, 3, 9, 1, 9, 9, 1, 1, 7, 3, 9, 7, 3, 7, 1, 9, 7, 9, 1, 1, 9, 1, 3, 7, 1, 3, 1, 3, 7, 7, 9, 3, 7, 9, 3, 3, 9, 1, 7, 1, 7, 3, 7, 3, 9, 1, 3, 1, 9, 3, 1, 9, 3, 7, 9, 1, 3, 7, 9, 1, 3, 1, 7, 1, 7, 9, 1, 7, 9, 9, 7, 1, 3, 7, 7, 9, 9, 1, 3, 9, 7, 7, 3, 3, 9, 1, 3, 9, 9, 1, 3, 7, 3, 7, 9, 1, 3, 9, 7, 1, 3, 9, 7, 9, 1, 7, 3, 9, 1, 7, 1, 3, 3, 1, 7, 9, 7, 7, 1, 3, 9, 3, 7, 9, 1, 3, 9, 1, 7, 9, 3, 1, 9, 3, 7, 1, 9, 3, 9, 1, 7, 7, 9, 9, 7, 3, 3, 7, 3, 9, 3, 7, 9, 1, 7, 1, 7, 9, 1, 7, 7, 3, 7, 9, 1, 7, 1, 3, 1, 3, 3, 1, 7, 1, 9, 1, 7, 7, 9, 3, 7, 1, 3, 9, 1, 3, 3, 7, 1, 3, 9, 7, 7, 3, 1, 1, 9, 3, 9, 1, 7, 3, 9, 7, 7, 1, 7, 1, 1, 3, 3, 7, 1, 1, 1, 9, 3, 1, 9, 3, 7, 3, 7, 1, 7, 3, 1, 9, 1, 7, 3, 3, 7, 9, 3, 9, 1, 1, 7, 1, 3, 9, 7, 7, 1, 1, 3, 7, 3, 1, 3, 7, 3, 7, 9, 1, 3, 9, 9, 7, 7, 3, 1, 3, 9, 3, 9, 1, 7, 9, 1, 9, 3, 1, 1, 3, 7, 9, 1, 1, 9, 1, 3, 7, 1, 7, 9, 3, 7, 9, 3, 7, 9, 9, 1, 7, 3, 3, 7, 7, 9, 1, 3, 7, 9, 1, 3, 7, 3, 9, 1, 7, 1, 7, 9, 9, 1, 3, 9, 1, 7, 3, 1, 7, 1, 9, 1, 3, 7, 1, 3, 9, 7, 3, 1, 7, 7, 9, 3, 9, 3, 1, 3, 9, 1, 9, 7, 9, 7, 7, 3, 7, 7, 9, 9, 3, 9, 9, 1, 3, 9, 7, 3, 9, 1, 9, 1, 3, 7, 1, 9, 1, 7, 1, 7, 7, 9, 1, 3, 1, 7, 7, 3, 3, 7, 1, 3, 9, 1, 3, 7, 9, 3, 9, 7, 9, 1, 1, 3, 1, 1, 3, 9, 9, 7, 1, 3, 3, 7, 9, 1, 1, 7, 9, 1, 3, 3, 1, 7, 1, 9, 3, 9, 7, 1, 9, 7, 3, 1, 7, 9, 1, 1, 7, 3, 7, 7, 9, 3, 7, 3, 7, 7, 9, 1, 9, 3, 9, 1, 3, 9, 7, 1, 7, 3, 7, 3, 1, 9, 3, 7, 7, 1, 9, 7, 7, 9, 3, 1, 3, 7, 9, 7, 9, 1, 1, 3, 9, 7, 1, 1, 3, 9, 7, 9, 9, 1, 9, 9, 3, 7, 3, 9, 7, 1, 1, 7, 1, 9, 7, 1, 3, 9, 3, 7, 7, 9, 1, 9, 1, 3, 7, 9, 1, 7, 3, 9, 3, 9, 3, 7, 1, 3, 9, 7, 9, 1, 9, 3, 7, 3, 1, 3, 9, 1, 9, 7, 1, 1, 7, 1, 7, 9, 7, 3, 7, 9, 1, 9, 7, 3, 1, 1, 3, 7, 9, 9, 3, 1, 1, 1, 3, 9, 1, 3, 7, 1, 3, 7, 1, 9, 7, 7, 3, 1, 9, 3, 1, 7, 1, 7, 1, 7, 1, 3, 9, 3, 9, 1, 7, 3, 9, 9, 3, 7, 9, 3, 7, 1, 9, 1, 7, 9, 3, 7, 1, 3, 1, 7, 3, 9, 1, 7, 7, 3, 9, 9, 3, 1, 7, 1, 7, 3, 9, 7, 9, 9, 3, 1, 9, 7, 1, 7, 7, 9, 1, 9, 9, 3, 9, 3, 1, 9, 1, 9, 1, 7, 1, 3, 9, 3, 9, 7, 7, 7, 3, 1, 1, 7, 3, 7, 9, 9, 3, 9, 9, 1, 3, 1, 3, 7, 9, 3, 1, 3, 1, 9, 1, 9, 1, 7, 9, 7, 1, 1, 9, 1, 7, 9, 9, 3, 9, 9, 1, 1, 3, 9, 1, 3, 7, 3, 1, 1, 7, 1, 7, 1, 3, 3, 7, 3, 9, 7, 3, 7, 9, 3, 9, 7, 3, 9, 1, 9, 7, 1, 3, 1, 7, 1, 3, 9, 7, 7, 7, 3, 9, 9, 1, 3, 1, 7, 3, 9, 1, 3, 3, 1, 9, 7, 1, 9, 7, 7, 9, 7, 9, 9, 3, 7, 9, 9, 1, 3, 9, 9, 7, 3, 3, 1, 7, 1, 7, 3, 3, 7, 3, 7, 9, 9, 1, 3, 9, 9, 7, 1, 3, 3, 9, 1, 7, 9, 1, 9, 3, 9, 3, 1, 1, 7, 1, 1, 3, 1, 7, 7, 7, 3, 9, 3, 7, 9, 3, 1, 7, 3, 7, 3, 1, 3, 7, 9, 1, 1, 3, 9, 1, 1, 7, 3, 3, 9, 3, 9, 7, 1, 7, 9, 3, 7, 9, 7, 7, 9, 1, 9, 3, 9, 3, 3, 9, 1, 3, 3, 1, 3, 1, 1, 9, 9, 1, 3, 7, 1, 9, 1, 7, 9, 7, 3, 3, 9, 7, 3, 7, 7, 7, 7, 3, 3, 7, 9, 7, 9, 1, 7, 3, 1, 7, 1, 9, 3, 7, 9, 9, 7, 9, 3, 9, 7, 1, 7, 1, 3, 1, 7, 1, 3, 3, 9, 9, 9, 7, 3, 9, 1, 9, 1, 7, 3, 3, 7, 3, 7, 1, 3, 7, 1, 3, 9, 7, 1, 7, 3, 9, 9, 1, 9, 7, 1, 3, 9, 1, 9, 3, 9, 7, 1, 7, 9, 1, 7, 3, 1, 9, 3, 1, 7, 3, 7, 9, 9, 1, 3, 3, 1, 7, 7, 9, 1, 1, 3, 7, 1, 1, 7, 3, 9, 7, 3, 9, 1, 3, 3, 1, 7, 1, 9, 7, 3, 9, 1, 7, 3, 1, 7, 3, 1, 7, 9, 1, 9, 7, 1, 7, 9, 3, 1, 7, 3, 3, 7, 9, 1, 7, 9, 1, 1, 3, 9, 1, 3, 3, 9, 7, 3, 3, 7, 3, 9, 3, 1, 9, 9, 7, 3, 7, 7, 9, 9, 1, 3, 9, 3, 3, 3, 1, 3, 1, 1, 7, 9, 9, 7, 7, 3, 9, 7, 7, 9, 1, 3, 7, 3, 7, 1, 3, 7, 9, 3, 9, 7, 1, 7, 1, 1, 7, 1, 7, 9, 1, 9, 3, 9, 1, 3, 9, 7, 3, 9, 3, 7, 3, 1, 9, 1, 7, 9, 3, 3, 9, 7, 1, 9, 1, 7, 1, 1, 9, 3, 7, 9, 7, 1, 7, 3, 9, 1, 1, 3, 7, 7, 3, 9, 9, 1, 7, 9, 9, 7, 3, 1, 7, 9, 1, 9, 3, 7, 1, 7, 3, 3, 3, 3, 7, 3, 7, 3, 9, 7, 3, 7, 9, 1, 7, 9, 9, 1, 7, 1, 7, 3, 1, 7, 7, 9, 9, 1, 9, 9, 3, 9, 7, 3, 7, 7, 1, 3, 3, 9, 3, 1, 1, 9, 9, 7, 9, 9, 1, 3, 7, 9, 3, 7, 3, 3, 1, 1, 7, 7, 1, 3, 1, 7, 1, 9, 1, 9, 1, 1, 3, 9, 1, 3, 1, 3, 1, 3, 1, 7, 1, 3, 9, 3, 7, 3, 9, 1, 3, 9, 7, 1, 3, 9, 1, 3, 7, 3, 7, 1, 9, 3, 7, 3, 9, 1, 3, 3, 9, 3, 7, 1, 7, 3, 1, 7, 7, 3, 1, 7, 3, 7, 3, 9, 1, 7, 1, 3, 9, 7, 3, 1, 1, 9, 9, 7, 3, 9, 1, 7, 9, 1, 7, 1, 3, 1, 7, 9, 7, 3, 7, 1, 1, 9, 9, 9, 1, 7, 1, 3, 1, 9, 1, 1, 7, 3, 9, 3, 3, 7, 9, 3, 1, 3, 7, 7, 1, 3, 1, 7, 3, 9, 7, 3, 7, 3, 7, 1, 7, 3, 9, 9, 3, 1, 1, 7, 3, 7, 7, 3, 9, 3, 9, 3, 7, 1, 3, 1, 3, 3, 1, 3, 1, 1, 9, 7, 1, 1, 9, 3, 7, 3, 1, 7, 9, 9, 9, 1, 1, 3, 7, 9, 9, 1, 9, 7, 3, 9, 7, 3, 3, 7, 1, 9, 9, 7, 9, 1, 1, 7, 7, 1, 9, 1, 3, 7, 1, 7, 7, 3, 1, 7, 7, 9, 1, 7, 9, 9, 1, 9, 3, 3, 7, 3, 7, 3, 9, 1, 7, 3, 1, 9, 7, 7, 9, 9, 1, 7, 1, 7, 9, 7, 9, 9, 7, 1, 9, 1, 7, 3, 9, 9, 7, 7, 3, 1, 3, 1, 3, 9, 3, 9, 3, 9, 1, 3, 7, 3, 1, 7, 3, 9, 9, 7, 7, 7, 3, 9, 3, 7, 3, 7, 1, 1, 9, 3, 1, 3, 7, 1, 7, 9, 7, 3, 1, 7, 1, 9, 3, 1, 3, 9, 7, 3, 3, 1, 9, 3, 3, 9, 1, 3, 3, 9, 9, 3, 3, 7, 7, 9, 1, 1, 9, 3, 1, 7, 3, 1, 3, 7, 9, 3, 9, 7, 7, 3, 1, 3, 3, 1, 7, 9, 3, 1, 7, 9, 1, 1, 9, 1, 7, 7, 1, 9, 7, 3, 1, 7, 9, 3, 3, 3, 1, 9, 9, 1, 1, 9, 3, 9, 1, 7, 7, 1, 3, 9, 3, 3, 3, 9, 7, 7, 9, 7, 3, 9, 3, 7, 3, 7, 1, 1, 3, 7, 3, 9, 3, 7, 7, 9, 9, 7, 9, 1, 7, 9, 3, 1, 7, 3, 9, 1, 7, 9, 9, 7, 9, 3, 7, 1, 7, 7, 7, 9, 1, 7, 3, 7, 9, 9, 1, 1, 7, 9, 9, 7, 1, 7, 9, 3, 1, 7, 1, 9, 1, 7, 9, 1, 7, 3, 1, 3, 3, 9, 7, 1, 7, 7, 1, 3, 9, 3, 7, 9, 7, 1, 9, 3, 9, 1, 1, 9, 1, 3, 1, 7, 3, 7, 9, 1, 3, 7, 3, 3, 3, 1, 9, 7, 3, 7, 1, 9, 9, 3, 9, 3, 1, 3, 9, 1, 7, 3, 1, 7, 9, 3, 3, 3, 7, 1, 3, 1, 3, 9, 9, 1, 3, 1, 7, 9, 1, 1, 1, 3, 3, 7, 3, 9, 9, 3, 1, 3, 7, 9, 9, 3, 7, 3, 1, 3, 3, 9, 7, 1, 3, 9, 3, 1, 9, 9, 1, 3, 7, 9, 1, 7, 9, 1, 3, 7, 9, 1, 7, 1, 1, 3, 9, 7, 9, 3, 9, 9, 1, 9, 9, 1, 1, 7, 9, 3, 7, 3, 7, 1, 9, 3, 9, 1, 3, 1, 7, 7, 9, 7, 7, 9, 9, 1, 7, 9, 1, 1, 9, 9, 9, 3, 3, 1, 1, 7, 9, 3, 7, 3, 9, 1, 7, 9, 9, 3, 3, 7, 3, 1, 1, 7, 1, 3, 9, 3, 7, 1, 7, 9, 7, 3, 3, 1, 3, 9, 1, 7, 9, 1, 3, 1, 7, 1, 1, 7, 9, 3, 9, 7, 9, 1, 9, 1, 1, 9, 1, 1, 9, 9, 7, 3, 7, 9, 3, 7, 3, 9, 1, 1, 7, 1, 1, 9, 3, 7, 1, 7, 1, 3, 9, 9, 9, 3, 7, 9, 1, 3, 9, 7, 3, 9, 7, 1, 7, 1, 3, 9, 1, 3, 9, 1, 1, 7, 9, 3, 9, 7, 7, 7, 3, 3, 1, 1, 9, 9, 1, 1, 7, 3, 9, 9, 7, 3, 9, 1, 3, 1, 3, 7, 3, 1, 3, 9, 7, 7, 9, 3, 3, 7, 7, 1, 1, 9, 3, 9, 1, 3, 7, 1, 9, 7, 3, 7, 3, 1, 1, 3, 7, 9, 9, 7, 3, 3, 3, 1, 7, 1, 7, 9, 7, 9, 1, 3, 7, 9, 9, 1, 7, 9, 3, 7, 7, 9, 7, 9, 1, 9, 1, 1, 9, 1, 7, 1, 3, 9, 9, 9, 1, 1, 7, 9, 9, 1, 7, 1, 3, 9, 1, 7, 3, 7, 1, 3, 9, 1, 7, 3, 9, 7, 1, 9, 1, 9, 7, 9, 3, 1, 7, 1, 3, 9, 1, 3, 3, 9, 9, 1, 7, 9, 1, 7, 9, 1, 7, 9, 7, 9, 1, 3, 3, 9, 7, 9, 1, 7, 9, 7, 3, 7, 7, 9, 7, 9, 3, 9, 3, 3, 3, 1, 3, 9, 3, 7, 7, 9, 1, 1, 3, 9, 1, 7, 9, 1, 7, 9, 9, 1, 1, 7, 9, 1, 3, 9, 9, 9, 1, 9, 9, 9, 3, 7, 3, 1, 7, 1, 1, 9, 3, 7, 9, 7, 1, 3, 7, 3, 7, 7, 9, 3, 9, 1, 7, 3, 9, 3, 7, 9, 9, 1, 3, 9, 9, 7, 3, 3, 1, 3, 9, 3, 3, 7, 7, 9, 1, 3, 9, 3, 7, 3, 7, 3, 1, 3, 9, 7, 1, 3, 9, 1, 1, 7, 9, 7, 9, 1, 7, 3, 9, 1, 7, 9, 1, 7, 9, 9, 7, 3, 1, 7, 3, 1, 3, 7, 3, 9, 9, 1, 3, 7, 3, 3, 7, 9, 1, 1, 3, 9, 9, 1, 7, 9, 3, 1, 1, 3, 7, 9, 1, 3, 9, 1, 7, 7, 7, 3, 7, 1, 3, 7, 9, 3, 1, 1, 1, 7, 9, 1, 3, 7, 3, 3, 7, 1, 9, 7, 3, 7, 3, 3, 7, 9, 1, 1, 3, 9, 9, 1, 7, 9, 7, 3, 9, 3, 7, 7, 7, 3, 9, 9, 1, 3, 9, 3, 1, 7, 1, 3, 1, 7, 9, 3, 9, 3, 7, 7, 9, 3, 9, 7, 9, 3, 1, 3, 9, 1, 1, 7, 3, 1, 1, 9, 7, 3, 9, 7, 1, 3, 9, 7, 1, 1, 1, 3, 9, 9, 7, 7, 1, 3, 3, 9, 1, 7, 3, 7, 3, 9, 7, 3, 1, 1, 3, 9, 7, 7, 9, 3, 7, 3, 1, 3, 9, 1, 3, 9, 9, 1, 7, 1, 7, 1, 3, 9, 3, 7, 9, 9, 7, 7, 3, 7, 7, 9, 3, 1, 1, 3, 9, 7, 1, 7, 7, 1, 1, 7, 3, 9, 1, 1, 3, 9, 9, 1, 7, 7, 9, 7, 1, 3, 9, 9, 1, 7, 9, 7, 3, 7, 1, 7, 3, 3, 7, 3, 7, 1, 3, 1, 3, 9, 1, 9, 3, 1, 9, 7, 9, 1, 7, 1, 1, 1, 7, 3, 7, 7, 9, 1, 3, 3, 7, 9, 7, 3, 7, 9, 9, 1, 7, 9, 1, 1, 9, 7, 1, 7, 1, 3, 7, 1, 9, 3, 7, 1, 7, 3, 3, 9, 3, 1, 9, 1, 3, 7, 9, 7, 1, 9, 3, 9, 3, 9, 1, 7, 9, 1, 3, 9, 1, 7, 3, 7, 9, 3, 9, 7, 9, 7, 3, 9, 7, 7, 3, 7, 7, 9, 1, 1, 3, 7, 1, 7, 9, 3, 1, 1, 7, 3, 9, 1, 3, 7, 1, 7, 3, 1, 7, 9, 9, 1, 3, 9, 9, 3, 9, 3, 7, 9, 1, 1, 3, 7, 3, 1, 7, 3, 7, 1, 3, 3, 9, 3, 3, 1, 7, 1, 7, 9, 3, 9, 1, 7, 1, 3, 1, 9, 9, 1, 1, 9, 3, 3, 9, 7, 7, 9, 3, 7, 3, 1, 3, 9, 3, 9, 1, 3, 9, 3, 3, 3, 7, 9, 9, 7, 3, 1, 3, 1, 3, 1, 1, 7, 3, 7, 1, 9, 7, 1, 3, 1, 9, 7, 3, 7, 1, 9, 1, 7, 3, 9, 7, 7, 3, 3, 7, 1, 7, 1, 1, 9, 9, 1, 7, 7, 1, 3, 3, 7, 3, 9, 3, 9, 1, 3, 1, 3, 7, 3, 9, 1, 7, 9, 1, 3, 1, 7, 1, 3, 7, 1, 1, 1, 3, 7, 9, 3, 9, 1, 3, 7, 9, 9, 1, 7, 3, 9, 7, 1, 9, 9, 7, 3, 7, 9, 1, 7, 1, 7, 9, 9, 1, 9, 3, 1, 7, 3, 9, 1, 7, 3, 9, 3, 7, 1, 1, 7, 1, 1, 7, 9, 1, 7, 9, 9, 1, 3, 9, 3, 1, 3, 7, 1, 3, 3, 7, 1, 3, 9, 9, 3, 7, 3, 9, 9, 3, 1, 9, 7, 3, 9, 7, 7, 1, 1, 9, 9, 9, 1, 1, 7, 9, 7, 3, 7, 3, 9, 1, 3, 3, 9, 3, 1, 9, 7, 3, 1, 7, 1, 7, 1, 7, 7, 1, 7, 7, 9, 7, 9, 7, 7, 9, 1, 7, 9, 1, 3, 9, 1, 7, 3, 3, 7, 3, 3, 9, 3, 1, 7, 7, 3, 1, 7, 9, 1, 7, 1, 7, 3, 9, 3, 9, 3, 7, 7, 7, 9, 3, 1, 9, 9, 1, 7, 9, 9, 1, 9, 3, 3, 7, 3, 1, 3, 9, 7, 1, 3, 9, 1, 7, 3, 1, 9, 1, 1, 9, 3, 9, 3, 1, 9, 9, 3, 7, 9, 7, 7, 9, 3, 7, 9, 1, 3, 7, 3, 1, 1, 3, 1, 7, 9, 9, 1, 9, 9, 1, 9, 3, 1, 7, 1, 3, 7, 9, 7, 1, 3, 7, 9, 7, 9, 7, 1, 1, 3, 7, 3, 9, 1, 3, 7, 1, 7, 3, 9, 1, 3, 7, 9, 3, 7, 3, 9, 7, 7, 9, 1, 9, 1, 1, 7, 7, 1, 1, 7, 9, 3, 7, 3, 7, 1, 7, 9, 1, 1, 3, 9, 1, 3, 3, 9, 7, 9, 7, 9, 1, 7, 3, 9, 7, 7, 9, 7, 9, 1, 3, 9, 1, 3, 7, 7, 7, 7, 9, 3, 1, 1, 7, 9, 1, 7, 9, 1, 7, 1, 3, 7, 1, 3, 7, 7, 9, 1, 7, 9, 3, 9, 3, 9, 9, 1, 3, 9, 3, 7, 9, 1, 7, 3, 9, 3, 3, 3, 9, 1, 3, 7, 9, 3, 1, 1, 3, 7, 9, 1, 7, 3, 7, 1, 9, 1, 7, 3, 3, 1, 7, 9, 3, 3, 3, 9, 1, 3, 3, 9, 7, 1, 3, 9, 3, 9, 1, 3, 1, 9, 1, 9, 7, 3, 9, 7, 7, 3, 7, 1, 3, 9, 3, 9, 1, 9, 9, 7, 7, 9, 7, 1, 7, 9, 1, 3, 7, 7, 7, 9, 1, 9, 3, 9, 7, 9, 7, 3, 9, 3, 9, 1, 9, 9, 1, 7, 3, 3, 7, 1, 3, 3, 7, 9, 3, 1, 1, 7, 9, 1, 7, 3, 9, 9, 1, 3, 3, 1, 3, 9, 3, 7, 7, 9, 3, 1, 7, 1, 1, 7, 9, 1, 7, 9, 9, 1, 1, 3, 7, 3, 1, 7, 3, 9, 1, 3, 7, 3, 9, 7, 9, 1, 9, 9, 1, 7, 1, 1, 1, 9, 3, 9, 3, 1, 7, 9, 1, 3, 7, 9, 7, 9, 3, 1, 7, 3, 9, 1, 3, 7, 7, 3, 9, 1, 3, 3, 9, 3, 1, 7, 3, 9, 3, 7, 9, 3, 1, 7, 9, 3, 1, 7, 7, 7, 3, 7, 9, 1, 7, 1, 3, 3, 7, 7, 9, 3, 9, 1, 9, 1, 7, 3, 9, 9, 1, 7, 7, 3, 1, 7, 3, 9, 9, 1, 7, 7, 7, 7, 1, 3, 9, 1, 7, 9, 7, 1, 9, 1, 3, 3, 9, 1, 7, 9, 7, 1, 3, 7, 1, 3, 3, 3, 7, 9, 3, 1, 3, 1, 1, 3, 9, 9, 3, 7, 1, 7, 7, 3, 9, 1, 7, 9, 1, 7, 1, 7, 3, 3, 9, 1, 1, 9, 1, 1, 3, 9, 9, 7, 3, 9, 7, 3, 7, 9, 7, 9, 7, 9, 1, 1, 7, 1, 1, 7, 3, 9, 7, 3, 7, 1, 9, 3, 9, 1, 3, 3, 1, 9, 9, 9, 1, 9, 3, 9, 3, 1, 7, 1, 3, 9, 1, 7, 1, 1, 7, 3, 9, 1, 7, 7, 9, 9, 1, 3, 9, 7, 1, 7, 7, 9, 1, 9, 1, 7, 7, 9, 1, 1, 7, 1, 3, 3, 9, 1, 3, 7, 9, 3, 9, 1, 3, 3, 9, 7, 3, 7, 9, 7, 3, 3, 1, 3, 1, 3, 9, 1, 1, 7, 9, 9, 7, 1, 3, 9, 7, 3, 7, 3, 1, 9, 1, 7, 7, 1, 7, 9, 1, 7, 9, 3, 1, 7, 9, 1, 3, 1, 7, 3, 1, 1, 3, 7, 9, 9, 1, 7, 3, 7, 3, 9, 3, 9, 1, 3, 1, 9, 1, 7, 7, 9, 9, 7, 3, 1, 3, 7, 1, 7, 3, 1, 1, 9, 3, 7, 1, 9, 9, 3, 9, 7, 3, 9, 7, 1, 3, 7, 1, 3, 1, 1, 3, 7, 9, 1, 1, 9, 9, 3, 3, 1, 3, 1, 7, 7, 1, 1, 9, 1, 3, 9, 1, 3, 9, 7, 9, 7, 9, 7, 9, 3, 1, 9, 9, 3, 3, 7, 1, 3, 3, 7, 3, 1, 7, 1, 9, 3, 7, 9, 9, 1, 9, 9, 1, 3, 1, 3, 7, 1, 9, 1, 3, 3, 7, 9, 1, 3, 9, 1, 9, 1, 7, 1, 1, 3, 1, 3, 7, 7, 1, 3, 9, 3, 7, 3, 7, 9, 3, 3, 7, 1, 7, 3, 3, 3, 1, 1, 9, 1, 7, 3, 9, 1, 7, 3, 7, 9, 3, 7, 9, 3, 3, 9, 1, 1, 3, 9, 1, 9, 3, 1, 7, 1, 9, 1, 9, 3, 1, 7, 3, 7, 3, 1, 3, 3, 9, 7, 1, 7, 1, 7, 1, 3, 9, 1, 3, 7, 1, 1, 3, 7, 9, 7, 9, 9, 3, 7, 9, 9, 7, 1, 3, 7, 1, 9, 1, 9, 1, 1, 7, 7, 9, 9, 7, 1, 3, 7, 3, 9, 1, 3, 9, 3, 3, 7, 9, 1, 7, 9, 3, 1, 7, 1, 3, 7, 1, 1, 9, 1, 7, 1, 9, 3, 9, 1, 7, 1, 3, 7, 9, 3, 3, 1, 7, 3, 3, 7, 3, 9, 7, 1, 9, 3, 7, 3, 9, 7, 1, 1, 1, 7, 9, 1, 3, 7, 1, 7, 3, 9, 3, 7, 3, 9, 3, 9, 3, 7, 1, 7, 1, 9, 3, 3, 3, 7, 9, 3, 1, 1, 7, 3, 9, 3, 7, 1, 3, 9, 9, 7, 1, 1, 3, 9, 1, 7, 3, 1, 3, 7, 1, 7, 9, 3, 1, 7, 3, 3, 7, 9, 9, 1, 1, 9, 3, 9, 7, 9, 3, 7, 9, 9, 1, 3, 9, 9, 7, 1, 7, 9, 9, 7, 3, 9, 9, 3, 7, 3, 9, 1, 7, 1, 7, 9, 3, 1, 3, 9, 7, 1, 3, 9, 7, 1, 7, 9, 3, 3, 7, 1, 7, 9, 3, 7, 7, 9, 7, 3, 1, 1, 9, 3, 3, 9, 1, 3, 9, 7, 1, 3, 7, 7, 9, 9, 3, 1, 9, 1, 3, 7, 9, 3, 7, 3, 9, 7, 9, 1, 1, 7, 9, 7, 9, 7, 3, 9, 1, 9, 7, 3, 3, 1, 3, 3, 1, 7, 3, 7, 1, 7, 1, 7, 1, 7, 1, 7, 9, 7, 9, 9, 3, 9, 1, 7, 9, 1, 7, 9, 9, 1, 1, 3, 9, 3, 3, 3, 9, 9, 7, 3, 9, 3, 3, 1, 7, 3, 9, 1, 7, 9, 3, 1, 7, 3, 7, 1, 3, 3, 3, 7, 9, 3, 3, 9, 3, 9, 1, 1, 3, 7, 3, 1, 1, 1, 9, 3, 1, 3, 1, 3, 3, 7, 1, 1, 1, 7, 1, 3, 3, 7, 1, 7, 3, 9, 1, 9, 3, 1, 7, 1, 7, 9, 7, 3, 9, 3, 1, 1, 7, 3, 7, 1, 9, 3, 3, 3, 7, 9, 9, 3, 9, 1, 7, 3, 7, 3, 1, 9, 7, 1, 7, 3, 7, 3, 7, 3, 9, 7, 1, 3, 7, 9, 1, 3, 9, 1, 9, 1, 7, 9, 9, 3, 7, 1, 7, 7, 9, 1, 3, 3, 7, 9, 1, 7, 7, 9, 1, 1, 3, 3, 9, 7, 7, 3, 7, 3, 1, 7, 9, 9, 1, 1, 9, 1, 1, 9, 7, 1, 3, 7, 3, 9, 1, 7, 1, 1, 7, 9, 7, 3, 1, 7, 3, 9, 7, 3, 9, 7, 3, 3, 1, 3, 9, 1, 9, 9, 7, 9, 9, 9, 1, 1, 3, 7, 3, 1, 3, 7, 7, 9, 3, 9, 7, 1, 7, 3, 7, 9, 7, 3, 9, 1, 7, 1, 3, 7, 3, 3, 9, 3, 7, 9, 3, 1, 1, 7, 9, 7, 3, 1, 3, 9, 9, 1, 3, 7, 9, 1, 7, 1, 1, 7, 9, 3, 1, 1, 3, 3, 7, 1, 9, 7, 1, 9, 3, 7, 7, 9, 3, 9, 7, 3, 9, 9, 9, 1, 7, 1, 1, 3, 9, 1, 7, 9, 9, 3, 1, 3, 1, 7, 9, 1, 7, 1, 3, 9, 1, 9, 7, 9, 1, 7, 3, 9, 1, 7, 3, 7, 3, 3, 9, 1, 1, 3, 7, 9, 1, 3, 3, 7, 3, 3, 1, 9, 1, 7, 3, 9, 3, 7, 7, 1, 7, 1, 9, 3, 1, 9, 3, 7, 1, 7, 9, 3, 9, 3, 7, 3, 9, 1, 1, 3, 9, 3, 9, 1, 7, 3, 1, 3, 7, 9, 3, 1, 7, 1, 1, 3, 3, 7, 9, 1, 3, 3, 9, 1, 3, 9, 7, 1, 7, 3, 9, 7, 1, 7, 7, 9, 9, 3, 3, 1, 3, 9, 9, 1, 3, 1, 7, 1, 9, 3, 7, 7, 1, 9, 9, 1, 9, 1, 7, 3, 7, 1, 9, 3, 1, 1, 7, 3, 7, 3, 1, 7, 7, 3, 3, 9, 1, 1, 3, 3, 9, 7, 9, 3, 1, 1, 1, 7, 3, 9, 7, 7, 9, 1, 7, 9, 1, 3, 7, 3, 3, 9, 9, 7, 7, 9, 7, 7, 9, 1, 9, 1, 1, 3, 3, 9, 3, 9, 1, 9, 3, 3, 9, 1, 7, 3, 7, 1, 9, 1, 3, 1, 7, 1, 9, 9, 7, 3, 7, 7, 7, 3, 7, 1, 7, 9, 1, 3, 1, 7, 1, 7, 3, 1, 7, 9, 9, 7, 3, 9, 9, 7, 7, 9, 1, 3, 7, 7, 1, 7, 3, 7, 1, 1, 3, 9, 3, 9, 9, 7, 1, 3, 7, 1, 9, 3, 1, 3, 7, 7, 1, 7, 9, 9, 1, 7, 7, 3, 1, 1, 9, 3, 1, 3, 7, 7, 9, 3, 9, 1, 7, 7, 3, 9, 1, 3, 9, 3, 9, 1, 1, 3, 7, 9, 3, 1, 1, 7, 9, 3, 7, 9, 3, 9, 1, 3, 7, 1, 9, 1, 7, 7, 9, 3, 9, 1, 3, 7, 9, 9, 1, 1, 9, 3, 9, 7, 1, 3, 1, 7, 3, 7, 9, 1, 7, 1, 7, 7, 1, 1, 3, 9, 3, 9, 7, 3, 1, 7, 1, 7, 9, 7, 9, 7, 1, 3, 7, 7, 9, 7, 7, 9, 7, 1, 9, 9, 3, 3, 9, 7, 3, 9, 1, 7, 9, 3, 3, 1, 3, 3, 7, 1, 7, 9, 1, 3, 9, 9, 1, 3, 7, 9, 1, 7, 3, 9, 1, 7, 9, 7, 9, 7, 9, 3, 7, 3, 7, 9, 9, 1, 7, 9, 9, 7, 3, 3, 1, 3, 9, 3, 7, 3, 1, 3, 9, 3, 9, 3, 9, 9, 1, 3, 7, 9, 9, 3, 1, 1, 3, 3, 1, 1, 7, 9, 7, 9, 7, 7, 9, 7, 1, 7, 1, 7, 1, 9, 1, 9, 9, 7, 7, 3, 7, 9, 1, 9, 3, 1, 7, 1, 7, 1, 3, 3, 1, 7, 9, 9, 7, 9, 3, 9, 1, 3, 1, 7, 7, 3, 9, 7, 3, 9, 3, 9, 9, 1, 7, 1, 1, 7, 3, 9, 1, 1, 9, 1, 3, 9, 3, 9, 7, 9, 3, 9, 9, 1, 3, 9, 3, 9, 3, 7, 3, 7, 7, 1, 9, 1, 7, 3, 3, 3, 7, 1, 3, 9, 1, 3, 3, 1, 7, 7, 9, 9, 3, 3, 1, 1, 7, 9, 3, 7, 7, 9, 9, 1, 9, 3, 1, 9, 9, 3, 3, 9, 3, 3, 1, 7, 9, 7, 9, 1, 1, 3, 9, 7, 3, 7, 3, 7, 1, 7, 3, 7, 1, 7, 9, 9, 1, 7, 1, 3, 1, 9, 7, 1, 3, 7, 9, 1, 9, 9, 1, 3, 3, 7, 3, 7, 9, 1, 7, 3, 9, 1, 7, 3, 3, 3, 1, 7, 9, 3, 7, 3, 9, 1, 9, 9, 9, 7, 7, 3, 9, 1, 3, 3, 7, 1, 3, 7, 1, 3, 1, 9, 3, 1, 7, 1, 3, 3, 1, 3, 1, 9, 3, 7, 1, 7, 9, 1, 9, 7, 7, 3, 7, 9, 3, 9, 3, 9, 1, 7, 1, 9, 9, 7, 3, 7, 7, 9, 1, 3, 9, 3, 1, 3, 9, 1, 1, 7, 9, 1, 3, 7, 1, 9, 9, 1, 1, 1, 7, 9, 3, 7, 9, 3, 1, 1, 3, 9, 3, 9, 1, 7, 9, 7, 9, 7, 7, 7, 9, 3, 7, 1, 1, 1, 7, 9, 3, 3, 3, 9, 7, 1, 9, 3, 7, 3, 7, 1, 3, 7, 3, 7, 3, 7, 9, 1, 1, 3, 9, 3, 7, 1, 9, 1, 9, 1, 7, 1, 1, 3, 9, 1, 3, 7, 3, 1, 7, 3, 9, 7, 9, 9, 7, 1, 3, 9, 3, 1, 1, 7, 3, 7, 1, 7, 9, 1, 7, 9, 3, 9, 7, 7, 1, 3, 9, 9, 1, 3, 1, 7, 1, 3, 1, 9, 9, 3, 1, 7, 3, 7, 3, 1, 3, 9, 3, 1, 7, 9, 1, 7, 9, 3, 3, 9, 7, 1, 1, 3, 7, 1, 3, 7, 9, 3, 3, 9, 1, 3, 7, 9, 9, 1, 1, 3, 7, 3, 9, 1, 3, 7, 3, 9, 7, 9, 7, 3, 9, 3, 7, 9, 1, 3, 9, 3, 7, 1, 3, 9, 3, 1, 7, 7, 9, 1, 3, 7, 7, 9, 1, 3, 3, 9, 7, 9, 1, 3, 9, 1, 3, 7, 7, 3, 9, 1, 1, 9, 3, 7, 3, 9, 1, 9, 7, 1, 3, 3, 1, 7, 1, 7, 3, 9, 3, 9, 1, 3, 9, 9, 1, 3, 7, 1, 9, 1, 9, 9, 1, 1, 7, 3, 7, 3, 9, 1, 7, 9, 9, 3, 1, 7, 1, 7, 7, 7, 3, 7, 3, 9, 1, 7, 9, 9, 1, 3, 3, 9, 7, 9, 3, 1, 7, 1, 9, 1, 7, 3, 9, 9, 7, 1, 7, 7, 9, 7, 1, 9, 3, 9, 7, 7, 9, 3, 1, 7, 3, 1, 7, 3, 9, 9, 3, 7, 3, 3, 1, 1, 7, 3, 1, 1, 7, 9, 7, 9, 3, 1, 3, 9, 7, 3, 9, 3, 3, 7, 1, 7, 3, 7, 3, 9, 1, 3, 7, 3, 9, 1, 3, 9, 3, 1, 7, 9, 7, 3, 7, 9, 3, 1, 3, 7, 9, 1, 7, 3, 7, 9, 1, 1, 9, 7, 3, 7, 3, 1, 7, 1, 7, 7, 3, 1, 1, 3, 7, 1, 1, 7, 1, 3, 1, 9, 1, 7, 7, 9, 7, 1, 3, 9, 1, 3, 9, 3, 1, 7, 9, 7, 1, 3, 9, 1, 3, 7, 1, 3, 3, 9, 1, 7, 1, 7, 3, 7, 1, 7, 9, 7, 1, 3, 9, 3, 1, 3, 3, 7, 9, 1, 7, 9, 9, 1, 9, 3, 7, 1, 3, 7, 1, 9, 7, 3, 1, 9, 3, 9, 9, 3, 9, 7, 1, 7, 7, 1, 9, 3, 7, 3, 7, 9, 3, 1, 9, 3, 9, 1, 1, 7, 1, 7, 3, 9, 3, 7, 9, 1, 7, 1, 3, 7, 1, 7, 7, 9, 3, 7, 7, 3, 1, 7, 3, 3, 7, 1, 1, 1, 1, 9, 7, 1, 3, 3, 7, 1, 1, 9, 9, 7, 9, 7, 1, 9, 1, 9, 7, 1, 3, 3, 1, 7, 3, 3, 7, 3, 1, 7, 9, 3, 1, 3, 7, 9, 7, 9, 1, 3, 1, 9, 7, 1, 3, 7, 9, 3, 7, 9, 3, 1, 3, 7, 1, 7, 1, 7, 3, 9, 7, 7, 9, 7, 9, 1, 1, 9, 1, 3, 9, 3, 1, 7, 3, 9, 7, 1, 3, 7, 3, 7, 7, 3, 9, 3, 7, 9, 9, 1, 7, 1, 1, 1, 3, 7, 9, 3, 3, 7, 3, 1, 1, 3, 9, 1, 7, 9, 9, 1, 9, 1, 1, 9, 3, 7, 9, 7, 3, 3, 1, 1, 7, 3, 7, 9, 7, 1, 7, 3, 3, 1, 1, 3, 9, 1, 1, 7, 7, 9, 7, 1, 7, 7, 9, 3, 9, 7, 9, 9, 1, 9, 1, 3, 3, 7, 1, 1, 1, 9, 3, 7, 9, 9, 1, 1, 3, 7, 9, 9, 3, 3, 1, 7, 3, 3, 9, 7, 3, 1, 7, 7, 3, 9, 1, 9, 3, 9, 3, 9, 9, 1, 3, 1, 3, 7, 1, 1, 9, 3, 1, 1, 1, 1, 3, 9, 9, 9, 1, 7, 1, 9, 7, 9, 1, 1, 3, 7, 3, 3, 7, 3, 7, 9, 3, 1, 7, 7, 3, 9, 3, 9, 1, 7, 1, 1, 1, 9, 1, 9, 3, 1, 7, 7, 3, 9, 1, 9, 3, 9, 1, 9, 9, 7, 1, 3, 7, 3, 9, 7, 1, 9, 7, 9, 9, 1, 3, 9, 3, 1, 3, 9, 9, 1, 7, 3, 9, 7, 1, 1, 7, 7, 9, 3, 3, 9, 1, 1, 7, 3, 7, 1, 7, 3, 9, 7, 1, 9, 3, 7, 7, 1, 3, 7, 9, 1, 3, 9, 7, 1, 3, 9, 1, 3, 7, 1, 3, 9, 7, 7, 1, 1, 3, 1, 7, 3, 9, 1, 1, 9, 1, 7, 9, 3, 7, 7, 3, 9, 1, 3, 3, 9, 9, 3, 9, 3, 7, 7, 9, 1, 1, 7, 9, 7, 7, 3, 1, 1, 9, 9, 3, 3, 1, 9, 7, 3, 3, 7, 1, 7, 9, 3, 1, 9, 9, 1, 7, 3, 7, 1, 7, 9, 9, 1, 3, 7, 3, 9, 9, 1, 1, 7, 3, 9, 1, 3, 7, 3, 9, 1, 3, 1, 3, 7, 3, 7, 1, 1, 7, 9, 1, 7, 9, 7, 1, 3, 9, 7, 1, 9, 3, 9, 1, 7, 9, 1, 7, 9, 7, 1, 7, 1, 3, 7, 9, 1, 1, 3, 1, 3, 9, 3, 1, 7, 3, 1, 3, 7, 9, 3, 9, 1, 7, 1, 3, 7, 9, 9, 3, 7, 3, 9, 7, 7, 9, 1, 7, 9, 3, 1, 1, 3, 7, 7, 3, 7, 9, 7, 1, 3, 7, 9, 7, 7, 1, 1, 3, 7, 7, 3, 7, 9, 3, 1, 9, 9, 1, 7, 9, 3, 7, 9, 9, 7, 3, 1, 9, 3, 9, 1, 3, 7, 7, 3, 9, 3, 9, 1, 3, 1, 1, 3, 7, 3, 7, 3, 9, 3, 3, 7, 1, 7, 3, 7, 9, 3, 7, 1, 9, 9, 9, 7, 1, 9, 1, 9, 9, 3, 1, 7, 7, 9, 1, 7, 3, 9, 7, 3, 7, 3, 1, 7, 3, 9, 1, 3, 7, 1, 3, 9, 9, 1, 1, 9, 9, 1, 3, 3, 9, 7, 1, 9, 3, 1, 7, 9, 9, 7, 3, 7, 9, 3, 9, 1, 3, 1, 7, 3, 7, 1, 3, 9, 1, 7, 1, 7, 9, 9, 7, 3, 7, 3, 1, 3, 3, 3, 1, 1, 3, 7, 9, 9, 9, 1, 3, 9, 9, 1, 7, 1, 7, 3, 1, 3, 9, 1, 9, 9, 9, 1, 9, 3, 3, 7, 3, 1, 1, 9, 7, 1, 3, 3, 1, 7, 7, 3, 9, 3, 7, 3, 1, 1, 7, 3, 9, 1, 7, 1, 3, 3, 7, 1, 3, 1, 7, 9, 3, 9, 1, 3, 7, 9, 3, 1, 1, 3, 1, 3, 3, 9, 1, 7, 9, 7, 1, 7, 9, 9, 1, 7, 3, 1, 1, 9, 7, 7, 9, 1, 1, 9, 3, 7, 9, 3, 9, 3, 9, 1, 1, 9, 1, 1, 7, 1, 3, 7, 3, 7, 1, 1, 3, 1, 7, 1, 3, 7, 9, 9, 9, 3, 9, 7, 3, 1, 7, 9, 7, 9, 1, 1, 7, 9, 1, 7, 3, 9, 7, 3, 9, 7, 1, 3, 1, 3, 7, 9, 3, 3, 9, 9, 1, 9, 3, 7, 3, 7, 1, 3, 3, 1, 1, 9, 9, 7, 3, 3, 7, 1, 3, 3, 9, 3, 9, 1, 1, 9, 9, 1, 7, 9, 9, 1, 3, 1, 1, 3, 9, 3, 7, 1, 7, 3, 7, 9, 3, 1, 7, 9, 9, 1, 3, 1, 7, 7, 9, 3, 9, 1, 3, 9, 1, 3, 9, 1, 7, 1, 1, 7, 3, 3, 9, 7, 7, 9, 1, 3, 9, 1, 1, 7, 1, 3, 9, 9, 1, 7, 7, 9, 3, 7, 9, 9, 1, 3, 7, 3, 1, 7, 1, 1, 3, 7, 7, 3, 9, 1, 9, 1, 3, 9, 7, 9, 3, 9, 3, 7, 7, 3, 1, 9, 3, 7, 9, 9, 1, 3, 9, 3, 7, 3, 1, 3, 9, 3, 9, 1, 3, 9, 3, 9, 1, 3, 1, 9, 3, 1, 7, 1, 9, 7, 9, 7, 1, 7, 7, 9, 1, 9, 1, 3, 1, 3, 1, 7, 1, 3, 7, 3, 7, 1, 7, 3, 7, 3, 9, 7, 7, 9, 3, 7, 9, 9, 1, 7, 9, 1, 9, 3, 9, 3, 1, 7, 3, 7, 3, 7, 1, 3, 7, 9, 1, 1, 9, 3, 9, 7, 9, 9, 7, 9, 3, 3, 3, 9, 1, 7, 3, 9, 1, 1, 7, 7, 3, 3, 7, 9, 1, 7, 7, 9, 9, 1, 3, 7, 7, 9, 1, 3, 3, 7, 9, 3, 7, 1, 9, 9, 1, 9, 1, 1, 1, 3, 9, 3, 3, 1, 1, 3, 3, 1, 7, 1, 7, 9, 7, 7, 9, 1, 7, 3, 1, 7, 3, 7, 1, 3, 9, 9, 3, 3, 7, 7, 3, 3, 9, 9, 1, 9, 1, 3, 1, 7, 1, 3, 7, 1, 3, 3, 1, 9, 1, 7, 3, 9, 7, 7, 7, 9, 3, 1, 7, 1, 1, 7, 9, 1, 9, 3, 1, 7, 9, 9, 3, 7, 9, 1, 7, 3, 9, 3, 7, 1, 3, 1, 7, 9, 9, 7, 7, 9, 9, 7, 1, 3, 7, 7, 7, 1, 7, 3, 9, 1, 9, 1, 3, 7, 1, 3, 9, 1, 7, 9, 1, 1, 9, 9, 9, 7, 1, 3, 1, 9, 3, 1, 7, 3, 3, 9, 1, 7, 7, 9, 9, 3, 1, 9, 1, 7, 3, 9, 7, 3, 1, 7, 3, 1, 7, 3, 9, 1, 7, 9, 1, 7, 9, 1, 1, 3, 7, 1, 7, 7, 1, 1, 7, 3, 7, 9, 3, 3, 7, 3, 9, 9, 1, 1, 7, 9, 1, 3, 7, 3, 7, 1, 1, 7, 9, 3, 9, 1, 1, 3, 9, 1, 9, 7, 1, 7, 9, 7, 3, 1, 3, 7, 9, 9, 1, 1, 3, 7, 3, 9, 9, 1, 3, 7, 7, 3, 7, 9, 3, 9, 1, 3, 9, 3, 1, 7, 9, 7, 1, 3, 9, 7, 3, 7, 1, 9, 7, 9, 9, 1, 1, 3, 3, 3, 1, 9, 1, 3, 3, 1, 7, 9, 9, 7, 3, 9, 9, 1, 7, 9, 7, 1, 1, 9, 9, 3, 7, 3, 1, 1, 7, 7, 1, 9, 9, 7, 3, 1, 3, 1, 7, 3, 9, 1, 3, 9, 7, 9, 9, 9, 9, 9, 7, 1, 3, 1, 3, 7, 9, 7, 1, 7, 9, 7, 3, 9, 9, 7, 9, 1, 3, 9, 3, 7, 7, 7, 1, 3, 1, 3, 3, 1, 9, 1, 7, 3, 1, 7, 7, 1, 7, 9, 7, 1, 3, 7, 7, 7, 1, 3, 7, 1, 9, 3, 3, 3, 7, 1, 3, 1, 1, 3, 3, 9, 3, 9, 7, 1, 1, 7, 7, 7, 1, 3, 3, 9, 7, 3, 1, 1, 3, 3, 9, 3, 1, 7, 9, 7, 1, 7, 1, 3, 9, 7, 9, 3, 9, 1, 3, 7, 7, 9, 3, 7, 9, 1, 7, 9, 3, 3, 9, 1, 3, 1, 7, 7, 1, 3, 3, 9, 3, 9, 3, 9, 3, 7, 1, 9, 3, 9, 9, 1, 7, 1, 3, 3, 9, 9, 3, 7, 3, 7, 7, 9, 9, 1, 9, 1, 7, 1, 3, 7, 9, 3, 3, 3, 1, 7, 3, 7, 9, 1, 1, 9, 3, 7, 1, 7, 9, 1, 1, 3, 1, 9, 7, 9, 3, 1, 9, 9, 3, 1, 3, 7, 9, 7, 3, 9, 1, 3, 1, 7, 7, 9, 7, 9, 1, 1, 7, 7, 1, 7, 9, 1, 1, 9, 9, 3, 7, 3, 7, 1, 7, 1, 7, 3, 3, 7, 9, 1, 3, 3, 1, 3, 7, 7, 9, 1, 7, 9, 3, 1, 9, 3, 1, 1, 3, 9, 3, 1, 7, 1, 7, 7, 9, 7, 7, 7, 1, 3, 1, 3, 9, 1, 3, 7, 9, 3, 1, 7, 1, 7, 1, 7, 3, 7, 1, 9, 9, 7, 1, 3, 3, 7, 1, 3, 1, 7, 1, 3, 9, 7, 1, 7, 1, 3, 1, 1, 3, 1, 1, 3, 3, 1, 3, 3, 9, 3, 9, 3, 1, 7, 1, 1, 3, 7, 9, 1, 7, 9, 3, 3, 3, 9, 1, 7, 9, 1, 3, 7, 1, 9, 1, 3, 3, 3, 9, 7, 3, 9, 7, 7, 9, 1, 7, 9, 1, 1, 7, 9, 1, 7, 1, 1, 1, 3, 3, 3, 9, 3, 3, 7, 3, 1, 7, 3, 7, 9, 1, 9, 9, 3, 1, 7, 1, 7, 9, 7, 3, 9, 7, 3, 9, 9, 1, 1, 3, 9, 1, 7, 7, 3, 9, 7, 3, 1, 7, 7, 9, 7, 3, 9, 9, 7, 3, 7, 3, 1, 1, 1, 3, 9, 7, 1, 3, 7, 3, 9, 1, 3, 9, 7, 3, 9, 3, 9, 1, 3, 3, 1, 7, 9, 7, 3, 7, 1, 1, 1, 7, 9, 1, 7, 1, 7, 9, 3, 9, 1, 3, 1, 7, 9, 1, 7, 3, 7, 3, 9, 9, 9, 1, 9, 1, 3, 1, 9, 3, 1, 9, 7, 9, 3, 9, 7, 3, 3, 7, 7, 9, 1, 7, 3, 9, 1, 3, 7, 7, 1, 3, 9, 3, 3, 9, 1, 1, 9, 9, 1, 1, 3, 7, 3, 1, 1, 3, 7, 9, 1, 3, 9, 7, 3, 9, 1, 7, 9, 7, 3, 7, 9, 1, 3, 9, 3, 7, 1, 7, 9, 3, 3, 1, 7, 1, 9, 1, 3, 9, 9, 3, 9, 7, 1, 9, 1, 7, 9, 9, 7, 7, 9, 3, 9, 3, 1, 7, 9, 3, 7, 9, 1, 1, 3, 1, 7, 9, 3, 7, 9, 7, 3, 9, 3, 3, 1, 3, 7, 3, 1, 7, 9, 7, 3, 9, 7, 1, 3, 1, 7, 3, 1, 7, 9, 3, 9, 7, 9, 1, 7, 7, 1, 3, 9, 1, 1, 3, 1, 3, 9, 1, 7, 9, 3, 7, 7, 3, 9, 3, 7, 9, 9, 9, 9, 1, 3, 9, 7, 7, 9, 7, 3, 9, 3, 7, 3, 1, 7, 3, 9, 9, 9, 1, 1, 3, 9, 3, 9, 1, 7, 1, 7, 3, 9, 9, 9, 3, 7, 7, 1, 7, 9, 1, 3, 9, 3, 7, 7, 9, 3, 1, 7, 9, 1, 3, 1, 9, 3, 1, 1, 1, 3, 9, 3, 9, 1, 3, 3, 1, 1, 9, 1, 7, 3, 7, 3, 1, 7, 1, 7, 3, 1, 1, 3, 1, 7, 1, 7, 9, 7, 9, 9, 7, 1, 7, 9, 3, 1, 1, 1, 1, 7, 7, 9, 1, 1, 7, 1, 7, 1, 3, 1, 3, 9, 9, 1, 7, 9, 3, 7, 7, 9, 9, 1, 1, 3, 9, 9, 7, 3, 9, 1, 7, 9, 9, 1, 9, 7, 9, 9, 1, 3, 9, 3, 7, 1, 7, 9, 3, 9, 9, 3, 1, 7, 7, 3, 3, 7, 9, 3, 9, 1, 7, 1, 7, 1, 3, 3, 9, 1, 7, 9, 9, 1, 9, 1, 3, 7, 9, 3, 1, 7, 9, 7, 1, 9, 3, 1, 7, 7, 1, 7, 9, 9, 7, 1, 7, 9, 1, 9, 9, 1, 7, 1, 3, 7, 3, 1, 7, 9, 3, 7, 3, 1, 9, 7, 9, 3, 1, 7, 1, 9, 3, 3, 9, 1, 9, 3, 7, 7, 3, 9, 7, 1, 3, 7, 9, 3, 7, 1, 3, 1, 3, 1, 1, 7, 9, 3, 3, 9, 1, 7, 7, 9, 1, 9, 7, 1, 3, 7, 9, 7, 1, 1, 3, 9, 9, 1, 3, 9, 1, 3, 7, 1, 3, 9, 7, 9, 3, 1, 7, 9, 1, 7, 3, 3, 9, 1, 1, 1, 3, 1, 3, 3, 3, 7, 9, 9, 3, 7, 9, 1, 3, 9, 3, 9, 7, 3, 9, 7, 1, 7, 9, 3, 9, 3, 1, 1, 7, 1, 7, 3, 9, 7, 3, 7, 3, 9, 7, 1, 3, 7, 3, 9, 1, 3, 9, 3, 9, 1, 9, 1, 7, 7, 3, 1, 9, 3, 7, 3, 1, 7, 1, 3, 7, 9, 9, 9, 7, 1, 3, 9, 7, 1, 1, 3, 7, 9, 7, 7, 9, 1, 7, 7, 3, 7, 9, 7, 1, 3, 7, 1, 9, 9, 7, 7, 9, 9, 3, 9, 9, 7, 9, 1, 9, 1, 1, 3, 1, 3, 7, 9, 1, 1, 1, 7, 1, 7, 1, 3, 1, 9, 9, 7, 9, 3, 7, 9, 1, 3, 9, 7, 1, 3, 9, 1, 3, 7, 9, 9, 7, 1, 3, 9, 1, 1, 9, 3, 9, 1, 7, 3, 7, 3, 7, 7, 9, 1, 1, 7, 1, 9, 1, 7, 1, 3, 7, 1, 7, 9, 9, 1, 1, 9, 7, 3, 9, 1, 3, 9, 7, 7, 9, 3, 7, 3, 3, 7, 7, 9, 3, 9, 1, 3, 9, 3, 7, 9, 3, 7, 7, 3, 7, 7, 1, 3, 7, 3, 9, 9, 7, 3, 7, 3, 1, 1, 3, 9, 3, 7, 9, 3, 7, 1, 9, 7, 3, 3, 1, 1, 3, 1, 1, 9, 3, 1, 7, 1, 7, 9, 3, 1, 3, 7, 1, 9, 1, 7, 1, 3, 9, 1, 7, 3, 9, 1, 3, 9, 7, 1, 3, 1, 9, 9, 1, 9, 3, 9, 7, 3, 9, 1, 3, 3, 9, 7, 1, 3, 9, 9, 7, 7, 9, 7, 9, 1, 3, 7, 3, 7, 3, 1, 7, 1, 9, 9, 9, 1, 3, 9, 3, 1, 9, 1, 3, 9, 3, 9, 3, 7, 3, 9, 3, 7, 3, 7, 3, 7, 3, 1, 7, 9, 7, 7, 3, 7, 3, 7, 3, 3, 9, 3, 9, 9, 7, 3, 3, 7, 3, 1, 7, 1, 3, 7, 1, 9, 7, 9, 3, 9, 1, 7, 3, 1, 7, 7, 3, 3, 9, 7, 1, 3, 9, 1, 7, 9, 1, 7, 3, 9, 3, 7, 3, 9, 1, 1, 7, 9, 9, 1, 7, 1, 3, 9, 1, 9, 3, 7, 9, 1, 3, 9, 1, 3, 7, 7, 3, 9, 1, 1, 9, 3, 7, 1, 7, 7, 9, 3, 9, 1, 7, 1, 7, 9, 7, 9, 7, 1, 7, 1, 9, 3, 7, 1, 9, 3, 3, 7, 9, 1, 9, 1, 3, 9, 3, 9, 3, 9, 7, 3, 7, 9, 7, 7, 1, 3, 7, 9, 1, 9, 1, 3, 3, 9, 7, 7, 9, 1, 1, 7, 3, 1, 7, 1, 3, 9, 3, 3, 9, 3, 1, 7, 9, 7, 3, 7, 9, 3, 9, 9, 7, 9, 3, 7, 3, 1, 1, 7, 7, 1, 9, 1, 7, 9, 9, 7, 1, 3, 1, 7, 3, 9, 1, 9, 9, 7, 3, 9, 7, 1, 3, 1, 7, 1, 1, 3, 1, 1, 7, 1, 9, 3, 7, 9, 1, 7, 1, 9, 9, 3, 7, 9, 1, 1, 3, 3, 9, 7, 1, 7, 1, 7, 7, 1, 7, 7, 9, 3, 9, 1, 7, 7, 1, 3, 9, 1, 3, 1, 1, 7, 1, 7, 9, 3, 3, 9, 3, 3, 7, 1, 7, 3, 9, 1, 7, 7, 3, 3, 1, 7, 7, 9, 9, 9, 3, 7, 1, 3, 9, 7, 9, 1, 1, 9, 1, 3, 9, 7, 3, 7, 1, 7, 9, 3, 7, 9, 1, 3, 7, 9, 9, 9, 7, 3, 9, 3, 1, 1, 7, 3, 9, 1, 7, 1, 1, 7, 1, 9, 1, 9, 9, 1, 3, 3, 1, 7, 3, 9, 7, 3, 1, 7, 1, 9, 3, 9, 1, 7, 3, 3, 9, 3, 1, 1, 7, 9, 9, 1, 9, 9, 1, 7, 1, 3, 9, 3, 9, 7, 9, 3, 7, 1, 7, 9, 9, 7, 7, 9, 9, 1, 1, 7, 9, 3, 3, 3, 1, 9, 3, 1, 3, 3, 1, 7, 7, 1, 7, 1, 9, 1, 1, 1, 7, 9, 1, 9, 9, 7, 1, 7, 7, 9, 1, 3, 1, 7, 9, 9, 3, 9, 3, 1, 7, 3, 1, 7, 1, 7, 9, 7, 7, 9, 1, 1, 3, 1, 7, 3, 3, 9, 1, 9, 7, 3, 7, 3, 9, 7, 3, 9, 1, 1, 7, 9, 9, 7, 3, 7, 9, 1, 3, 7, 9, 1, 7, 9, 9, 1, 7, 1, 7, 1, 3, 7, 3, 7, 9, 9, 3, 9, 3, 9, 1, 3, 3, 3, 3, 7, 1, 3, 7, 1, 9, 7, 7, 9, 3, 9, 7, 1, 3, 1, 7, 1, 9, 3, 7, 7, 1, 3, 9, 3, 1, 7, 7, 3, 9, 1, 3, 9, 3, 9, 7, 7, 1, 7, 9, 3, 3, 9, 7, 9, 1, 3, 9, 7, 7, 9, 1, 9, 9, 3, 9, 1, 7, 7, 3, 1, 7, 1, 3, 3, 9, 1, 9, 7, 3, 1, 7, 1, 9, 3, 1, 7, 1, 1, 3, 3, 9, 1, 3, 7, 9, 3, 3, 3, 1, 7, 3, 9, 1, 9, 9, 7, 1, 3, 1, 9, 9, 3, 7, 9, 3, 7, 9, 1, 1, 9, 1, 7, 1, 9, 1, 3, 9, 7, 3, 9, 3, 1, 9, 9, 7, 1, 1, 9, 9, 1, 7, 1, 7, 3, 3, 9, 1, 7, 9, 9, 7, 3, 7, 9, 9, 7, 1, 1, 1, 7, 3, 3, 7, 9, 1, 1, 7, 3, 3, 9, 1, 9, 1, 3, 9, 7, 3, 7, 3, 9, 3, 9, 7, 3, 9, 3, 7, 9, 1, 1, 1, 9, 7, 3, 3, 1, 1, 9, 3, 1, 7, 7, 1, 1, 3, 7, 1, 3, 7, 9, 7, 9, 1, 3, 3, 7, 3, 1, 9, 1, 7, 3, 9, 1, 3, 3, 7, 9, 1, 7, 9, 7, 9, 3, 9, 1, 9, 7, 3, 1, 3, 9, 3, 7, 9, 7, 1, 9, 1, 1, 3, 3, 1, 7, 9, 3, 7, 3, 9, 7, 1, 1, 3, 1, 7, 3, 3, 1, 9, 9, 3, 1, 7, 9, 9, 7, 3, 7, 9, 9, 1, 3, 9, 7, 7, 3, 7, 9, 7, 3, 9, 1, 7, 9, 3, 3, 1, 3, 9, 7, 9, 7, 9, 7, 1, 3, 1, 9, 3, 9, 7, 7, 1, 7, 9, 3, 7, 3, 9, 7, 1, 3, 7, 1, 3, 1, 3, 7, 3, 7, 9, 1, 9, 1, 7, 3, 3, 9, 7, 7, 7, 9, 1, 3, 9, 7, 9, 1, 1, 7, 9, 3, 3, 3, 9, 3, 9, 1, 9, 1, 1, 7, 3, 7, 1, 7, 1, 9, 9, 9, 1, 7, 1, 7, 3, 7, 1, 7, 1, 7, 1, 3, 7, 3, 7, 9, 7, 1, 1, 3, 9, 3, 9, 7, 9, 3, 1, 9, 3, 9, 7, 3, 9, 1, 7, 3, 9, 3, 1, 9, 7, 9, 7, 7, 3, 1, 1, 3, 3, 9, 1, 3, 9, 7, 1, 3, 7, 1, 3, 9, 1, 7, 9, 3, 9, 9, 1, 3, 1, 9, 1, 7, 1, 7, 9, 3, 1, 9, 9, 7, 9, 1, 3, 1, 3, 7, 1, 7, 9, 3, 9, 9, 7, 3, 9, 3, 7, 9, 1, 3, 1, 1, 3, 7, 7, 3, 1, 3, 3, 7, 9, 3, 9, 1, 7, 3, 1, 3, 1, 7, 1, 3, 9, 7, 1, 1, 7, 1, 1, 7, 3, 3, 7, 9, 9, 7, 7, 9, 1, 1, 3, 9, 3, 3, 9, 1, 3, 3, 7, 3, 9, 9, 1, 7, 9, 7, 7, 9, 3, 3, 1, 1, 1, 7, 1, 3, 9, 1, 7, 9, 3, 1, 9, 9, 1, 7, 3, 9, 1, 1, 3, 3, 1, 1, 3, 9, 3, 3, 7, 9, 9, 1, 3, 7, 9, 1, 9, 9, 7, 1, 1, 3, 7, 7, 9, 1, 7, 3, 3, 9, 9, 1, 1, 9, 3, 9, 1, 3, 1, 1, 1, 3, 1, 7, 7, 3, 9, 1, 7, 7, 1, 1, 9, 3, 7, 3, 9, 1, 7, 1, 3, 9, 7, 7, 9, 1, 3, 9, 3, 3, 7, 9, 3, 1, 7, 3, 7, 1, 9, 3, 7, 3, 7, 3, 3, 1, 9, 1, 3, 7, 9, 7, 1, 7, 9, 9, 7, 7, 1, 3, 7, 9, 9, 1, 7, 7, 3, 7, 9, 1, 3, 9, 3, 1, 7, 9, 9, 9, 1, 7, 9, 9, 1, 7, 9, 3, 7, 9, 1, 7, 1, 1, 1, 3, 7, 3, 9, 1, 9, 1, 3, 7, 1, 3, 7, 3, 3, 9, 9, 3, 7, 9, 3, 7, 9, 1, 1, 7, 3, 9, 3, 1, 1, 7, 3, 9, 7, 7, 3, 1, 7, 9, 3, 1, 3, 9, 7, 3, 7, 9, 1, 7, 3, 1, 7, 3, 1, 7, 3, 3, 7, 9, 3, 9, 1, 3, 7, 9, 3, 7, 1, 7, 9, 1, 3, 7, 1, 3, 9, 7, 9, 7, 9, 3, 7, 7, 9, 9, 1, 3, 7, 1, 3, 3, 1, 3, 7, 3, 9, 7, 3, 3, 9, 1, 9, 9, 7, 7, 3, 7, 1, 3, 7, 1, 9, 3, 7, 7, 9, 3, 9, 1, 3, 9, 1, 1, 9, 1, 3, 9, 3, 7, 7, 9, 7, 3, 9, 9, 1, 7, 1, 1, 7, 3, 9, 3, 7, 7, 3, 1, 9, 9, 1, 3, 7, 9, 3, 1, 7, 9, 7, 9, 9, 9, 1, 7, 3, 9, 1, 9, 3, 1, 9, 7, 1, 3, 7, 9, 7, 3, 3, 7, 1, 1, 7, 9, 9, 1, 7, 1, 7, 3, 9, 7, 3, 3, 9, 1, 9, 7, 9, 1, 7, 7, 3, 9, 7, 9, 7, 9, 9, 1, 1, 3, 9, 3, 7, 3, 9, 7, 1, 3, 1, 9, 9, 1, 9, 3, 9, 3, 9, 7, 3, 7, 1, 1, 7, 7, 9, 1, 3, 9, 1, 7, 9, 3, 1, 7, 1, 7, 3, 7, 1, 7, 3, 9, 1, 7, 7, 1, 7, 3, 7, 9, 1, 3, 1, 3, 9, 3, 7, 7, 7, 9, 1, 3, 3, 1, 3, 9, 1, 9, 3, 7, 9, 7, 3, 9, 9, 7, 3, 1, 3, 3, 1, 3, 9, 9, 1, 3, 9, 1, 3, 7, 9, 1, 1, 9, 3, 7, 3, 7, 3, 9, 7, 9, 9, 7, 3, 1, 9, 1, 3, 7, 3, 7, 7, 3, 7, 3, 1, 1, 3, 9, 7, 7, 7, 9, 1, 3, 7, 9, 7, 3, 1, 7, 1, 1, 1, 3, 9, 9, 1, 1, 9, 1, 9, 3, 7, 7, 3, 1, 7, 1, 3, 7, 9, 3, 3, 3, 3, 1, 3, 1, 9, 1, 7, 9, 7, 9, 9, 1, 3, 9, 9, 1, 7, 3, 7, 3, 1, 9, 3, 9, 7, 7, 9, 3, 1, 1, 7, 3, 7, 3, 7, 1, 9, 1, 3, 9, 1, 1, 3, 7, 1, 3, 1, 7, 1, 9, 1, 9, 1, 1, 9, 9, 9, 7, 1, 9, 1, 7, 7, 7, 9, 1, 3, 7, 9, 9, 7, 9, 9, 7, 3, 1, 1, 9, 1, 7, 7, 7, 1, 3, 1, 1, 9, 7, 9, 3, 1, 9, 3, 1, 1, 9, 1, 7, 9, 3, 1, 3, 7, 9, 7, 3, 9, 1, 7, 9, 7, 3, 3, 1, 7, 9, 1, 3, 1, 3, 7, 1, 9, 7, 3, 9, 7, 9, 1, 7, 1, 1, 3, 9, 7, 3, 1, 3, 7, 1, 9, 7, 1, 7, 9, 9, 1, 3, 7, 3, 9, 1, 3, 7, 9, 1, 3, 7, 1, 7, 9, 1, 3, 3, 1, 7, 9, 3, 7, 7, 3, 9, 3, 9, 3, 3, 9, 1, 1, 9, 7, 7, 9, 9, 7, 9, 9, 1, 3, 9, 7, 9, 1, 3, 9, 3, 3, 1, 7, 1, 7, 7, 9, 7, 1, 7, 1, 3, 1, 1, 9, 3, 9, 7, 9, 7, 1, 7, 3, 9, 1, 3, 1, 9, 1, 9, 7, 1, 3, 3, 1, 9, 3, 3, 9, 1, 1, 7, 9, 3, 1, 3, 7, 9, 9, 3, 9, 9, 7, 9, 7, 7, 1, 3, 7, 3, 1, 1, 7, 1, 7, 1, 3, 7, 7, 3, 9, 1, 7, 9, 9, 1, 1, 7, 1, 3, 3, 9, 3, 7, 1, 9, 3, 7, 1, 9, 1, 3, 3, 7, 3, 9, 3, 9, 7, 3, 9, 7, 1, 7, 9, 9, 1, 3, 9, 9, 3, 7, 3, 7, 3, 1, 9, 7, 7, 9, 1, 9, 3, 7, 1, 1, 7, 7, 3, 9, 3, 1, 9, 3, 1, 9, 1, 3, 3, 9, 1, 9, 7, 3, 9, 1, 7, 1, 3, 3, 7, 1, 7, 1, 7, 9, 3, 9, 3, 9, 7, 1, 3, 9, 1, 3, 9, 3, 7, 9, 1, 9, 1, 1, 7, 7, 9, 1, 9, 9, 1, 3, 9, 3, 9, 1, 7, 1, 3, 7, 1, 9, 3, 9, 3, 1, 7, 7, 1, 3, 3, 9, 3, 9, 3, 7, 7, 3, 7, 7, 3, 9, 3, 1, 3, 1, 3, 9, 7, 1, 3, 9, 3, 1, 3, 9, 1, 7, 7, 9, 9, 1, 3, 9, 1, 7, 7, 9, 1, 3, 9, 1, 3, 7, 1, 9, 7, 3, 7, 9, 1, 1, 7, 9, 3, 3, 7, 3, 7, 9, 1, 7, 9, 7, 3, 9, 7, 3, 9, 1, 7, 3, 3, 7, 1, 9, 9, 7, 1, 1, 3, 7, 3, 7, 1, 3, 9, 3, 3, 9, 1, 3, 7, 7, 7, 1, 3, 9, 1, 1, 3, 7, 1, 7, 1, 3, 1, 3, 9, 3, 1, 9, 1, 7, 9, 1, 9, 3, 7, 9, 1, 1, 3, 3, 1, 1, 3, 9, 3, 7, 1, 9, 9, 3, 9, 1, 1, 1, 3, 7, 7, 9, 1, 7, 3, 9, 7, 1, 7, 3, 9, 9, 1, 9, 9, 3, 9, 1, 9, 1, 7, 3, 9, 7, 7, 9, 3, 3, 9, 9, 1, 3, 9, 9, 1, 7, 3, 3, 9, 7, 3, 7, 9, 3, 7, 3, 7, 3, 1, 1, 3, 9, 1, 9, 1, 7, 3, 1, 3, 9, 3, 7, 1, 9, 9, 1, 9, 7, 1, 1, 3, 9, 9, 7, 3, 9, 1, 9, 1, 7, 7, 7, 7, 1, 3, 9, 7, 3, 9, 1, 7, 1, 3, 9, 7, 7, 9, 7, 1, 9, 1, 1, 3, 9, 1, 3, 3, 9, 9, 7, 9, 1, 7, 7, 1, 3, 7, 3, 3, 9, 1, 7, 3, 9, 7, 1, 3, 7, 7, 3, 1, 7, 3, 1, 3, 1, 7, 3, 7, 3, 1, 3, 9, 7, 9, 3, 1, 3, 1, 1, 9, 1, 9, 1, 7, 3, 9, 1, 1, 3, 1, 9, 7, 3, 9, 1, 7, 1, 3, 7, 1, 3, 9, 1, 7, 1, 9, 3, 3, 7, 7, 9, 3, 3, 1, 1, 9, 1, 3, 9, 9, 1, 7, 9, 1, 9, 9, 1, 1, 7, 3, 1, 7, 7, 3, 9, 9, 1, 3, 7, 9, 1, 7, 3, 3, 1, 9, 1, 7, 9, 7, 1, 3, 7, 3, 3, 7, 3, 1, 7, 9, 3, 7, 1, 9, 9, 1, 1, 7, 9, 1, 3, 1, 3, 3, 7, 9, 1, 7, 1, 7, 9, 9, 9, 3, 9, 3, 3, 1, 3, 1, 3, 1, 9, 3, 7, 7, 3, 1, 3, 7, 1, 3, 9, 7, 9, 3, 1, 7, 7, 3, 9, 7, 3, 9, 9, 1, 3, 7, 3, 1, 1, 3, 9, 9, 7, 9, 1, 1, 7, 3, 7, 3, 1, 3, 7, 9, 3, 9, 1, 9, 9, 9, 1, 7, 9, 3, 7, 7, 3, 7, 1, 1, 1, 7, 1, 3, 3, 1, 7, 1, 3, 3, 1, 9, 7, 1, 7, 9, 3, 9, 7, 9, 7, 7, 9, 3, 9, 7, 1, 3, 9, 9, 1, 7, 3, 3, 9, 3, 9, 7, 9, 7, 1, 7, 1, 1, 7, 1, 7, 1, 3, 9, 3, 9, 7, 1, 3, 7, 7, 9, 9, 3, 3, 3, 9, 1, 1, 3, 9, 7, 3, 1, 3, 7, 9, 3, 1, 7, 1, 9, 9, 1, 9, 7, 3, 9, 7, 9, 7, 1, 3, 3, 9, 7, 1, 1, 7, 1, 7, 9, 7, 3, 7, 9, 9, 9, 3, 7, 1, 7, 3, 1, 9, 1, 7, 9, 9, 1, 7, 9, 9, 1, 1, 3, 7, 3, 3, 9, 7, 1, 3, 9, 1, 3, 1, 1, 7, 3, 3, 7, 1, 1, 3, 7, 3, 1, 3, 7, 3, 1, 9, 7, 9, 1, 7, 9, 1, 9, 1, 3, 3, 9, 7, 1, 9, 1, 7, 3, 1, 7, 3, 3, 9, 7, 3, 7, 1, 3, 9, 9, 7, 3, 1, 3, 7, 1, 7, 7, 3, 3, 9, 7, 1, 3, 3, 1, 7, 3, 1, 9, 3, 9, 1, 7, 3, 1, 1, 9, 3, 7, 3, 1, 9, 9, 1, 7, 9, 1, 3, 3, 7, 7, 3, 9, 1, 7, 3, 1, 9, 1, 3, 1, 3, 9, 7, 3, 9, 1, 3, 7, 3, 7, 1, 3, 7, 9, 9, 9, 3, 7, 9, 9, 3, 7, 1, 9, 1, 9, 7, 1, 9, 7, 9, 1, 3, 9, 9, 3, 7, 3, 9, 1, 7, 9, 3, 1, 9, 3, 9, 9, 7, 7, 1, 3, 9, 3, 1, 3, 1, 3, 7, 3, 1, 7, 7, 3, 9, 9, 7, 1, 7, 1, 1, 3, 9, 3, 1, 3, 9, 7, 3, 9, 7, 3, 1, 7, 3, 9, 9, 1, 9, 3, 9, 3, 7, 3, 1, 7, 7, 1, 3, 1, 9, 7, 7, 3, 1, 9, 1, 1, 3, 1, 7, 9, 9, 7, 7, 3, 7, 1, 9, 3, 9, 3, 7, 9, 3, 9, 7, 1, 7, 1, 3, 3, 9, 1, 3, 9, 3, 3, 1, 7, 3, 3, 7, 3, 9, 7, 9, 1, 7, 9, 3, 9, 7, 3, 1, 7, 9, 9, 1, 7, 1, 1, 9, 9, 1, 7, 3, 7, 1, 9, 3, 7, 7, 3, 1, 7, 3, 1, 7, 9, 1, 7, 3, 7, 1, 7, 3, 9, 3, 7, 9, 3, 7, 9, 1, 3, 1, 1, 3, 7, 9, 9, 3, 3, 1, 3, 3, 1, 3, 9, 7, 9, 1, 3, 1, 3, 7, 9, 9, 7, 9, 3, 1, 1, 7, 9, 9, 1, 3, 9, 1, 3, 7, 9, 7, 1, 3, 9, 1, 3, 9, 7, 7, 3, 9, 3, 7, 1, 3, 3, 9, 3, 1, 3, 7, 1, 3, 9, 7, 1, 9, 7, 3, 9, 7, 7, 1, 9, 1, 7, 1, 9, 9, 9, 3, 7, 7, 7, 3, 7, 9, 1, 1, 9, 3, 7, 9, 3, 3, 9, 9, 3, 7, 7, 3, 1, 1, 3, 1, 7, 3, 9, 1, 1, 3, 7, 3, 9, 1, 9, 7, 7, 9, 1, 3, 1, 3, 3, 9, 7, 3, 7, 9, 3, 3, 9, 7, 3, 3, 1, 7, 9, 7, 1, 1, 1, 9, 7, 1, 7, 9, 9, 3, 9, 7, 1, 7, 3, 3, 9, 3, 1, 7, 3, 9, 1, 3, 9, 3, 9, 1, 7, 9, 7, 1, 9, 7, 3, 9, 1, 7, 9, 9, 9, 3, 7, 3, 1, 3, 7, 9, 7, 7, 9, 9, 1, 3, 3, 1, 7, 1, 1, 9, 3, 9, 1, 3, 9, 7, 9, 7, 1, 9, 9, 1, 3, 7, 9, 7, 3, 9, 1, 3, 3, 7, 9, 3, 7, 9, 7, 9, 1, 1, 7, 1, 7, 9, 7, 3, 3, 9, 7, 1, 3, 7, 7, 9, 7, 9, 1, 7, 1, 7, 9, 1, 1, 1, 7, 3, 9, 7, 9, 7, 1, 1, 7, 9, 3, 1, 9, 9, 1, 9, 1, 7, 7, 7, 9, 7, 3, 1, 3, 7, 7, 9, 1, 7, 1, 7, 3, 9, 1, 3, 9, 3, 7, 1, 7, 9, 3, 9, 3, 9, 3, 1, 7, 9, 1, 3, 7, 3, 9, 1, 9, 1, 9, 7, 3, 1, 7, 7, 9, 1, 3, 9, 9, 1, 3, 3, 9, 1, 7, 9, 9, 1, 3, 9, 1, 1, 9, 1, 7, 7, 1, 3, 9, 7, 3, 9, 1, 1, 3, 3, 1, 3, 7, 3, 3, 1, 3, 9, 9, 3, 3, 3, 1, 1, 1, 3, 9, 3, 3, 7, 1, 9, 9, 3, 7, 3, 7, 9, 1, 3, 1, 9, 7, 3, 3, 9, 3, 1, 7, 9, 9, 7, 9, 9, 1, 3, 9, 1, 3, 7, 1, 3, 1, 7, 1, 3, 3, 1, 7, 9, 3, 9, 3, 9, 1, 9, 1, 1, 7, 3, 1, 7, 7, 3, 1, 9, 3, 7, 1, 7, 9, 3, 7, 3, 7, 9, 3, 9, 1, 3, 7, 9, 1, 9, 1, 7, 9, 7, 3, 7, 9, 1, 1, 7, 9, 1, 7, 3, 1, 7, 9, 9, 1, 9, 1, 1, 7, 9, 1, 3, 1, 7, 3, 7, 9, 9, 1, 7, 7, 9, 9, 9, 7, 7, 9, 3, 1, 3, 7, 3, 1, 7, 3, 9, 7, 1, 3, 9, 3, 1, 1, 9, 3, 7, 1, 7, 3, 9, 1, 7, 3, 9, 7, 9, 3, 1, 9, 3, 7, 7, 9, 3, 9, 1, 7, 1, 3, 7, 3, 1, 7, 3, 1, 3, 9, 3, 9, 1, 3, 7, 7, 9, 1, 9, 3, 1, 3, 7, 1, 7, 1, 3, 9, 1, 3, 7, 9, 3, 7, 3, 7, 9, 3, 9, 3, 7, 9, 1, 1, 7, 9, 7, 9, 1, 3, 3, 7, 7, 1, 1, 9, 3, 7, 7, 3, 1, 7, 9, 9, 1, 9, 1, 7, 7, 3, 9, 1, 1, 3, 7, 3, 7, 9, 1, 7, 9, 1, 7, 9, 1, 3, 1, 7, 9, 1, 7, 1, 7, 1, 3, 9, 3, 1, 7, 9, 3, 1, 1, 3, 7, 3, 7, 1, 3, 9, 7, 3, 7, 9, 1, 3, 9, 3, 7, 9, 7, 3, 7, 9, 1, 1, 3, 9, 1, 3, 7, 1, 9, 3, 1, 1, 7, 3, 9, 9, 7, 1, 9, 3, 1, 7, 3, 3, 9, 3, 3, 3, 1, 9, 1, 7, 7, 1, 7, 1, 7, 9, 1, 3, 3, 7, 1, 9, 7, 1, 3, 1, 1, 9, 3, 7, 9, 7, 3, 9, 3, 3, 9, 1, 1, 3, 3, 3, 3, 1, 7, 9, 1, 7, 9, 3, 7, 9, 7, 3, 9, 9, 1, 7, 3, 9, 1, 7, 3, 9, 7, 9, 3, 9, 7, 3, 9, 7, 1, 3, 7, 9, 1, 9, 9, 1, 7, 3, 3, 3, 1, 3, 7, 7, 7, 1, 9, 1, 1, 1, 3, 9, 1, 7, 9, 3, 1, 7, 9, 7, 1, 7, 1, 7, 7, 1, 1, 9, 1, 3, 9, 7, 3, 3, 1, 7, 3, 1, 3, 9, 1, 7, 3, 9, 7, 3, 9, 7, 7, 9, 1, 1, 9, 1, 3, 9, 3, 7, 9, 1, 7, 1, 3, 7, 9, 9, 1, 3, 9, 1, 9, 1, 3, 1, 7, 3, 1, 7, 3, 3, 9, 1, 1, 3, 9, 3, 3, 3, 7, 3, 7, 1, 3, 1, 7, 7, 9, 9, 1, 9, 7, 9, 9, 1, 3, 3, 7, 9, 3, 3, 7, 9, 9, 9, 7, 9, 3, 1, 7, 1, 9, 9, 1, 7, 9, 3, 7, 7, 9, 3, 7, 1, 3, 9, 1, 3, 3, 9, 7, 1, 3, 7, 7, 1, 7, 9, 1, 7, 9, 1, 7, 7, 9, 9, 9, 1, 7, 1, 3, 9, 1, 1, 9, 7, 7, 9, 1, 9, 3, 9, 3, 1, 9, 7, 9, 3, 9, 1, 3, 7, 9, 7, 3, 1, 3, 3, 7, 1, 3, 9, 3, 9, 9, 7, 9, 1, 9, 7, 3, 9, 3, 7, 7, 9, 1, 3, 7, 9, 1, 7, 1, 1, 3, 7, 3, 9, 9, 3, 3, 1, 9, 1, 7, 7, 7, 3, 9, 1, 7, 9, 3, 3, 7, 9, 1, 9, 3, 7, 1, 7, 9, 7, 9, 1, 9, 1, 7, 1, 3, 7, 9, 3, 3, 9, 9, 1, 7, 7, 9, 9, 3, 9, 1, 3, 7, 3, 9, 7, 7, 9, 1, 1, 3, 9, 7, 7, 9, 3, 9, 1, 3, 7, 9, 1, 7, 1, 7, 3, 1, 7, 1, 3, 1, 7, 7, 9, 3, 1, 3, 7, 9, 3, 9, 1, 7, 1, 7, 7, 9, 3, 9, 9, 1, 3, 9, 3, 7, 3, 1, 9, 3, 7, 3, 1, 7, 1, 7, 3, 3, 7, 1, 7, 9, 9, 1, 1, 1, 9, 1, 3, 9, 1, 9, 1, 3, 7, 1, 9, 9, 7, 1, 7, 3, 7, 7, 9, 1, 7, 3, 3, 9, 7, 1, 7, 7, 9, 7, 1, 3, 9, 1, 9, 7, 3, 3, 1, 1, 7, 3, 3, 7, 3, 9, 1, 7, 3, 9, 9, 1, 3, 3, 9, 7, 7, 9, 3, 7, 9, 1, 7, 1, 7, 3, 9, 1, 7, 9, 9, 3, 1, 7, 9, 3, 1, 7, 7, 3, 9, 1, 3, 3, 7, 1, 9, 3, 9, 3, 7, 9, 3, 9, 1, 1, 9, 1, 7, 7, 3, 1, 9, 7, 1, 3, 9, 3, 1, 7, 7, 9, 3, 9, 1, 1, 1, 7, 1, 3, 3, 9, 7, 1, 3, 7, 7, 9, 3, 7, 9, 7, 3, 9, 1, 1, 3, 9, 9, 3, 3, 7, 3, 7, 3, 7, 1, 7, 9, 1, 7, 3, 7, 3, 9, 3, 7, 1, 9, 1, 7, 3, 7, 3, 9, 9, 7, 1, 3, 7, 1, 1, 7, 9, 9, 7, 3, 9, 1, 3, 9, 1, 1, 7, 3, 7, 9, 1, 7, 9, 7, 1, 9, 9, 1, 1, 9, 1, 3, 7, 1, 9, 9, 7, 9, 3, 1, 9, 9, 1, 7, 9, 7, 3, 3, 7, 1, 3, 3, 3, 9, 1, 9, 9, 1, 7, 3, 9, 7, 7, 9, 3, 9, 7, 3, 9, 7, 9, 3, 1, 1, 1, 3, 7, 9, 3, 9, 1, 3, 1, 7, 1, 9, 3, 1, 7, 9, 3, 7, 3, 7, 3, 7, 9, 9, 1, 7, 3, 9, 7, 3, 9, 7, 3, 3, 1, 3, 9, 1, 7, 7, 3, 1, 7, 9, 3, 7, 1, 3, 7, 9, 1, 1, 9, 7, 9, 1, 1, 1, 3, 7, 3, 3, 3, 1, 1, 7, 3, 7, 7, 9, 1, 7, 1, 1, 3, 3, 7, 1, 7, 1, 9, 7, 7, 3, 7, 9, 1, 9, 9, 7, 9, 1, 3, 1, 1, 9, 3, 1, 7, 3, 3, 1, 9, 9, 9, 1, 7, 7, 1, 7, 3, 9, 3, 3, 1, 9, 7, 3, 3, 9, 3, 9, 1, 3, 3, 7, 1, 7, 3, 1, 7, 1, 9, 9, 3, 7, 9, 1, 1, 7, 1, 3, 3, 7, 1, 3, 9, 1, 1, 7, 3, 9, 1, 3, 7, 3, 9, 1, 7, 9, 1, 3, 1, 7, 7, 9, 9, 1, 9, 7, 9, 3, 9, 9, 1, 3, 7, 1, 7, 1, 7, 7, 9, 3, 1, 7, 9, 1, 1, 7, 1, 3, 7, 9, 3, 7, 3, 9, 1, 3, 9, 7, 3, 9, 7, 9, 3, 3, 9, 3, 7, 9, 3, 3, 1, 1, 1, 7, 1, 3, 3, 3, 7, 7, 7, 9, 7, 3, 1, 3, 9, 7, 1, 7, 1, 3, 9, 7, 9, 1, 7, 7, 3, 9, 7, 7, 1, 1, 3, 3, 7, 1, 9, 7, 9, 1, 7, 3, 9, 1, 1, 3, 7, 1, 3, 1, 1, 9, 7, 7, 9, 7, 1, 3, 9, 1, 7, 3, 9, 7, 3, 3, 7, 9, 3, 1, 7, 3, 3, 9, 9, 7, 7, 9, 9, 9, 1, 7, 3, 9, 3, 9, 3, 7, 3, 7, 1, 3, 9, 7, 3, 1, 9, 1, 1, 9, 3, 1, 9, 7, 1, 7, 3, 9, 7, 7, 1, 9, 9, 9, 3, 7, 1, 3, 1, 3, 9, 7, 1, 7, 9, 1, 1, 7, 9, 9, 1, 3, 3, 1, 7, 9, 3, 9, 1, 7, 3, 1, 7, 7, 9, 9, 1, 3, 7, 1, 1, 3, 9, 9, 1, 7, 7, 9, 1, 7, 9, 3, 9, 7, 7, 7, 9, 3, 3, 1, 1, 3, 7, 1, 3, 7, 1, 9, 3, 1, 9, 3, 9, 7, 9, 7, 3, 9, 7, 3, 7, 3, 1, 7, 3, 3, 1, 3, 9, 1, 3, 7, 1, 3, 9, 3, 9, 1, 9, 3, 1, 7, 7, 9, 3, 1, 3, 7, 3, 7, 3, 1, 7, 1, 1, 3, 7, 9, 9, 9, 7, 3, 7, 1, 1, 3, 7, 1, 1, 3, 7, 9, 1, 7, 7, 7, 7, 7, 3, 9, 7, 7, 1, 1, 9, 1, 7, 3, 7, 3, 9, 7, 3, 7, 9, 7, 3, 1, 9, 1, 1, 7, 9, 1, 3, 9, 3, 1, 3, 1, 7, 3, 3, 3, 9, 7, 3, 3, 1, 3, 9, 1, 3, 7, 1, 3, 1, 7, 7, 7, 7, 3, 9, 1, 7, 3, 3, 3, 1, 7, 1, 3, 9, 3, 7, 3, 1, 9, 9, 3, 7, 7, 1, 3, 7, 9, 9, 3, 9, 3, 3, 7, 1, 1, 7, 3, 1, 9, 3, 9, 1, 3, 1, 7, 9, 1, 1, 3, 7, 3, 1, 7, 9, 3, 1, 7, 9, 3, 3, 7, 7, 7, 9, 1, 3, 7, 3, 1, 3, 9, 1, 9, 7, 9, 7, 3, 9, 3, 7, 9, 9, 3, 3, 1, 7, 3, 1, 3, 1, 9, 3, 7, 1, 7, 3, 9, 1, 1, 9, 7, 3, 9, 1, 1, 3, 7, 7, 3, 7, 3, 9, 9, 7, 1, 9, 3, 9, 7, 9, 1, 3, 7, 9, 1, 9, 1, 7, 3, 3, 7, 1, 9, 3, 9, 3, 7, 9, 3, 1, 7, 9, 3, 1, 7, 1, 7, 7, 1, 3, 3, 7, 3, 9, 1, 3, 9, 1, 7, 1, 1, 9, 9, 1, 3, 3, 9, 9, 1, 7, 3, 7, 3, 7, 9, 9, 3, 7, 1, 7, 9, 1, 1, 3, 9, 9, 7, 1, 7, 9, 1, 3, 7, 9, 3, 1, 1, 1, 7, 1, 9, 7, 3, 9, 3, 7, 3, 7, 3, 9, 9, 1, 7, 1, 3, 7, 1, 7, 3, 3, 9, 3, 1, 3, 1, 7, 1, 7, 9, 9, 9, 1, 7, 1, 7, 3, 1, 7, 1, 7, 9, 1, 3, 7, 1, 7, 9, 7, 9, 9, 3, 9, 7, 9, 1, 9, 3, 1, 3, 9, 1, 9, 3, 7, 3, 3, 7, 1, 3, 1, 7, 9, 9, 7, 7, 9, 1, 9, 1, 9, 7, 1, 7, 3, 1, 3, 9, 1, 7, 9, 7, 1, 1, 3, 3, 9, 3, 3, 9, 3, 7, 3, 9, 1, 7, 3, 7, 7, 9, 1, 3, 7, 1, 3, 3, 7, 1, 9, 3, 9, 3, 7, 9, 1, 9, 1, 7, 9, 9, 1, 1, 3, 9, 9, 3, 1, 3, 9, 7, 1, 9, 1, 7, 9, 3, 7, 9, 9, 1, 1, 7, 1, 7, 3, 9, 9, 1, 3, 1, 3, 9, 7, 3, 9, 3, 7, 1, 7, 7, 1, 3, 9, 1, 7, 3, 7, 7, 9, 3, 9, 1, 3, 7, 1, 3, 7, 3, 3, 1, 7, 9, 7, 9, 3, 9, 3, 7, 1, 3, 1, 1, 7, 9, 7, 1, 1, 3, 3, 7, 7, 9, 7, 1, 7, 9, 3, 7, 7, 9, 1, 3, 9, 9, 1, 3, 9, 3, 3, 1, 9, 3, 9, 3, 3, 7, 1, 7, 9, 3, 9, 1, 9, 3, 1, 9, 1, 7, 3, 7, 9, 3, 9, 1, 1, 9, 9, 1, 9, 7, 1, 3, 3, 9, 7, 1, 7, 7, 1, 3, 7, 9, 9, 1, 3, 9, 1, 3, 1, 3, 7, 1, 7, 1, 7, 9, 3, 1, 7, 3, 7, 3, 9, 9, 3, 1, 7, 9, 7, 3, 7, 3, 7, 9, 9, 1, 3, 9, 7, 3, 1, 3, 1, 7, 7, 9, 3, 9, 7, 7, 1, 9, 9, 1, 1, 3, 7, 3, 9, 7, 1, 3, 9, 1, 3, 3, 7, 9, 9, 1, 1, 3, 1, 7, 9, 3, 9, 7, 3, 9, 3, 1, 3, 7, 7, 1, 3, 9, 1, 7, 3, 1, 1, 7, 1, 7, 7, 3, 3, 7, 3, 9, 1, 1, 7, 3, 1, 1, 3, 1, 7, 7, 3, 1, 7, 3, 3, 9, 3, 9, 7, 1, 7, 9, 9, 7, 1, 9, 9, 3, 3, 1, 1, 9, 9, 7, 7, 3, 1, 7, 9, 1, 1, 9, 3, 9, 7, 9, 1, 3, 7, 9, 7, 1, 1, 7, 9, 3, 1, 7, 9, 1, 9, 1, 3, 7, 3, 3, 9, 1, 3, 7, 1, 1, 7, 7, 9, 7, 9, 9, 1, 3, 3, 7, 9, 1, 3, 1, 3, 7, 9, 1, 7, 7, 7, 7, 1, 9, 9, 1, 3, 9, 3, 1, 7, 3, 3, 1, 9, 1, 3, 7, 7, 9, 1, 7, 1, 7, 9, 1, 3, 7, 9, 3, 7, 1, 9, 3, 7, 1, 9, 3, 7, 7, 3, 1, 3, 9, 7, 1, 1, 1, 9, 1, 3, 7, 7, 9, 9, 1, 7, 9, 3, 7, 1, 9, 1, 3, 7, 9, 1, 9, 7, 9, 3, 7, 1, 1, 7, 3, 3, 9, 1, 1, 1, 3, 9, 9, 9, 7, 7, 1, 3, 1, 7, 7, 9, 1, 7, 9, 3, 7, 9, 3, 7, 1, 3, 7, 7, 9, 7, 3, 1, 9, 7, 9, 9, 7, 1, 1, 3, 9, 7, 3, 1, 7, 9, 1, 7, 3, 9, 1, 7, 7, 1, 3, 3, 7, 9, 3, 1, 7, 3, 9, 9, 3, 9, 1, 7, 1, 3, 9, 1, 1, 3, 3, 1, 3, 7, 3, 7, 9, 9, 1, 9, 9, 1, 1, 9, 3, 9, 9, 1, 7, 7, 1, 3, 7, 9, 3, 9, 3, 1, 7, 1, 3, 9, 7, 9, 1, 3, 7, 9, 3, 7, 9, 1, 1, 7, 3, 9, 1, 7, 9, 9, 7, 3, 9, 3, 7, 9, 7, 1, 7, 3, 7, 3, 1, 1, 3, 3, 3, 1, 9, 1, 1, 9, 9, 1, 3, 9, 1, 7, 1, 7, 7, 7, 1, 7, 9, 3, 1, 1, 7, 9, 1, 7, 1, 7, 3, 3, 7, 9, 1, 3, 3, 1, 7, 9, 7, 9, 3, 9, 1, 1, 1, 3, 7, 3, 1, 7, 9, 1, 7, 3, 7, 3, 1, 7, 3, 9, 3, 9, 1, 3, 3, 3, 9, 1, 7, 3, 1, 9, 3, 1, 1, 7, 1, 7, 1, 1, 3, 3, 7, 3, 7, 7, 7, 9, 7, 9, 7, 1, 7, 9, 7, 1, 3, 7, 3, 1, 3, 3, 7, 3, 7, 3, 7, 9, 9, 7, 9, 3, 9, 9, 3, 7, 9, 7, 3, 1, 7, 1, 3, 3, 1, 9, 3, 3, 7, 3, 7, 7, 9, 3, 3, 7, 9, 1, 7, 3, 7, 1, 1, 3, 9, 1, 7, 3, 9, 7, 1, 9, 7, 1, 3, 3, 3, 7, 9, 3, 1, 7, 3, 9, 1, 3, 7, 9, 1, 3, 3, 9, 1, 1, 9, 3, 1, 7, 1, 9, 3, 9, 7, 1, 3, 9, 7, 1, 7, 7, 3, 9, 1, 9, 7, 3, 1, 3, 7, 3, 3, 7, 9, 1, 1, 9, 9, 9, 3, 3, 7, 3, 9, 1, 7, 9, 7, 7, 9, 1, 7, 3, 3, 9, 1, 3, 3, 3, 7, 9, 7, 1, 1, 3, 9, 3, 1, 7, 9, 9, 7, 1, 7, 9, 7, 9, 1, 7, 9, 7, 3, 1, 7, 9, 1, 1, 3, 7, 1, 7, 1, 9, 3, 3, 7, 3, 9, 9, 1, 1, 7, 9, 1, 7, 1, 3, 1, 7, 1, 3, 9, 9, 3, 9, 9, 3, 3, 1, 1, 3, 9, 9, 9, 1, 3, 3, 9, 7, 9, 1, 1, 3, 7, 9, 7, 3, 1, 1, 7, 3, 7, 1, 3, 7, 1, 3, 9, 7, 9, 7, 7, 3, 9, 1, 1, 9, 9, 1, 7, 9, 7, 3, 7, 3, 1, 3, 1, 7, 9, 3, 1, 9, 9, 3, 7, 7, 9, 7, 1, 3, 9, 3, 1, 7, 9, 3, 9, 9, 3, 9, 1, 1, 3, 9, 9, 3, 7, 9, 1, 9, 7, 1, 7, 7, 3, 7, 7, 9, 1, 9, 9, 9, 7, 9, 7, 7, 3, 7, 9, 1, 7, 7, 1, 3, 1, 3, 1, 3, 7, 1, 9, 9, 3, 1, 9, 3, 7, 9, 3, 9, 9, 1, 3, 3, 1, 7, 3, 9, 7, 3, 7, 9, 9, 1, 7, 7, 3, 7, 3, 7, 9, 1, 1, 3, 1, 1, 1, 9, 9, 1, 7, 7, 9, 3, 3, 9, 3, 7, 9, 9, 1, 7, 1, 3, 9, 7, 9, 9, 7, 1, 7, 7, 9, 3, 7, 1, 9, 1, 9, 3, 9, 1, 7, 1, 7, 1, 7, 7, 7, 9, 9, 3, 9, 1, 7, 3, 7, 1, 9, 1, 7, 3, 1, 7, 1, 9, 3, 7, 1, 9, 3, 7, 9, 3, 7, 1, 3, 9, 9, 3, 1, 7, 7, 3, 7, 3, 9, 7, 9, 3, 7, 9, 1, 1, 1, 3, 7, 1, 7, 1, 7, 1, 7, 1, 9, 3, 7, 3, 7, 9, 1, 9, 1, 3, 9, 1, 9, 3, 9, 1, 9, 1, 3, 3, 9, 1, 3, 7, 9, 3, 7, 9, 1, 7, 1, 3, 3, 9, 3, 1, 7, 7, 9, 9, 1, 1, 3, 7, 3, 3, 7, 9, 1, 3, 7, 7, 3, 9, 3, 7, 9, 9, 1, 1, 7, 1, 3, 1, 7, 3, 9, 3, 9, 9, 9, 3, 3, 7, 3, 1, 7, 9, 3, 9, 1, 7, 3, 9, 1, 3, 3, 7, 9, 9, 3, 7, 1, 3, 1, 1, 3, 1, 3, 7, 1, 7, 7, 1, 9, 1, 1, 7, 9, 7, 3, 7, 9, 9, 1, 7, 1, 3, 3, 9, 9, 9, 7, 9, 9, 7, 1, 9, 7, 3, 1, 1, 1, 7, 3, 3, 7, 9, 7, 9, 3, 1, 3, 7, 3, 9, 3, 1, 9, 3, 7, 7, 3, 1, 7, 9, 1, 7, 7, 1, 3, 9, 7, 3, 7, 3, 1, 9, 1, 7, 3, 1, 7, 1, 1, 7, 7, 3, 1, 7, 9, 3, 1, 7, 3, 9, 7, 3, 9, 1, 7, 9, 9, 3, 9, 3, 7, 9, 1, 7, 9, 1, 3, 9, 9, 3, 1, 3, 3, 9, 7, 3, 9, 7, 3, 3, 1, 7, 9, 7, 9, 9, 7, 9, 9, 1, 3, 1, 7, 7, 9, 1, 7, 1, 1, 3, 3, 9, 3, 7, 9, 9, 1, 3, 3, 7, 1, 9, 9, 3, 1, 7, 7, 1, 1, 9, 1, 7, 3, 7, 9, 1, 7, 1, 9, 9, 3, 7, 9, 3, 3, 7, 9, 3, 7, 9, 1, 1, 3, 3, 1, 3, 9, 7, 1, 9, 3, 1, 7, 3, 7, 9, 1, 3, 9, 7, 3, 9, 3, 7, 9, 1, 3, 3, 1, 1, 9, 3, 9, 1, 7, 3, 9, 1, 3, 9, 7, 7, 9, 1, 1, 9, 1, 9, 3, 7, 1, 9, 1, 7, 3, 7, 3, 1, 3, 9, 3, 1, 9, 3, 1, 3, 7, 9, 7, 1, 7, 1, 9, 3, 7, 3, 1, 3, 9, 3, 7, 7, 3, 1, 3, 7, 7, 3, 1, 3, 3, 1, 9, 3, 1, 7, 9, 9, 1, 3, 9, 7, 9, 7, 9, 1, 3, 9, 1, 9, 3, 9, 7, 3, 7, 9, 1, 1, 3, 7, 3, 7, 1, 1, 3, 3, 7, 7, 3, 9, 1, 7, 9, 3, 3, 7, 3, 7, 1, 7, 1, 7, 3, 3, 1, 7, 3, 3, 9, 9, 1, 7, 9, 3, 9, 1, 3, 3, 7, 1, 1, 1, 3, 7, 3, 9, 7, 3, 9, 7, 3, 9, 1, 7, 3, 9, 3, 9, 7, 9, 9, 7, 1, 3, 9, 7, 1, 1, 1, 1, 1, 3, 9, 3, 1, 3, 9, 1, 7, 7, 7, 1, 7, 9, 3, 1, 9, 3, 9, 1, 3, 1, 7, 1, 9, 1, 7, 1, 3, 9, 1, 1, 9, 7, 9, 1, 1, 7, 9, 7, 7, 3, 1, 1, 3, 7, 3, 7, 9, 1, 1, 7, 1, 7, 3, 9, 9, 1, 7, 9, 3, 9, 1, 3, 1, 7, 9, 3, 9, 3, 7, 9, 1, 1, 3, 7, 9, 7, 7, 9, 1, 1, 9, 9, 7, 3, 9, 9, 7, 9, 9, 1, 3, 7, 9, 9, 3, 1, 7, 1, 7, 1, 7, 7, 7, 3, 9, 7, 1, 1, 3, 3, 9, 9, 9, 1, 7, 9, 3, 7, 9, 9, 1, 3, 1, 7, 9, 7, 1, 3, 7, 7, 1, 7, 1, 7, 3, 9, 1, 1, 3, 7, 3, 9, 9, 7, 7, 3, 1, 1, 9, 1, 7, 9, 3, 7, 7, 3, 9, 1, 9, 9, 3, 1, 7, 1, 9, 1, 9, 1, 9, 1, 3, 7, 9, 1, 1, 7, 7, 1, 1, 7, 9, 3, 7, 9, 1, 3, 7, 9, 9, 3, 9, 3, 9, 7, 3, 7, 3, 1, 7, 3, 9, 1, 7, 9, 3, 1, 7, 9, 1, 1, 3, 9, 1, 3, 1, 7, 3, 9, 3, 3, 9, 7, 7, 3, 1, 7, 1, 3, 1, 1, 3, 3, 1, 1, 7, 9, 7, 9, 3, 7, 1, 3, 7, 1, 3, 7, 3, 9, 3, 7, 7, 7, 9, 7, 3, 9, 9, 7, 9, 7, 9, 3, 9, 7, 1, 7, 1, 9, 7, 1, 3, 7, 7, 7, 9, 9, 3, 9, 9, 7, 1, 1, 1, 9, 1, 7, 1, 7, 1, 3, 3, 9, 1, 7, 9, 3, 9, 3, 9, 1, 7, 3, 3, 1, 7, 1, 3, 9, 7, 9, 7, 3, 9, 1, 1, 7, 7, 3, 1, 7, 1, 9, 3, 1, 9, 3, 1, 1, 7, 9, 1, 1, 3, 9, 7, 3, 3, 9, 3, 9, 9, 3, 3, 7, 3, 1, 7, 9, 9, 1, 7, 7, 1, 3, 9, 3, 7, 1, 1, 9, 1, 3, 7, 9, 9, 7, 1, 3, 7, 9, 1, 3, 9, 3, 1, 7, 9, 9, 1, 7, 3, 7, 3, 1, 9, 1, 3, 7, 1, 3, 9, 9, 7, 3, 9, 1, 1, 1, 3, 1, 7, 7, 3, 9, 1, 1, 3, 7, 3, 1, 1, 7, 9, 7, 9, 7, 9, 9, 7, 1, 7, 3, 1, 3, 3, 7, 9, 1, 7, 7, 3, 7, 9, 3, 9, 7, 7, 3, 7, 7, 3, 7, 1, 9, 3, 1, 9, 1, 1, 3, 7, 7, 9, 9, 7, 1, 3, 9, 1, 3, 9, 7, 3, 7, 9, 3, 7, 7, 9, 1, 1, 3, 3, 7, 9, 7, 9, 9, 3, 1, 7, 3, 9, 7, 7, 9, 1, 7, 9, 9, 3, 9, 7, 1, 3, 9, 1, 7, 3, 3, 7, 7, 1, 3, 9, 3, 7, 9, 9, 7, 3, 1, 3, 9, 7, 1, 3, 9, 3, 9, 1, 7, 3, 7, 3, 3, 9, 1, 1, 7, 3, 7, 7, 9, 1, 7, 9, 9, 7, 9, 1, 1, 3, 7, 9, 3, 9, 3, 1, 7, 1, 7, 9, 9, 1, 3, 7, 3, 9, 3, 7, 3, 1, 3, 3, 9, 1, 7, 9, 1, 7, 1, 3, 3, 9, 9, 1, 3, 9, 1, 3, 7, 9, 3, 7, 9, 7, 9, 1, 3, 7, 7, 9, 1, 7, 1, 7, 3, 7, 9, 1, 3, 9, 1, 7, 1, 3, 9, 3, 9, 1, 9, 3, 9, 9, 1, 7, 3, 1, 7, 7, 9, 1, 1, 3, 9, 1, 9, 3, 1, 7, 7, 1, 9, 1, 3, 9, 1, 1, 7, 1, 9, 3, 9, 7, 7, 1, 9, 3, 1, 3, 9, 3, 9, 1, 7, 3, 1, 1, 3, 7, 3, 9, 9, 1, 3, 1, 7, 9, 3, 9, 7, 3, 9, 1, 7, 9, 7, 3, 9, 1, 7, 3, 1, 3, 9, 1, 1, 7, 9, 1, 1, 9, 7, 1, 9, 7, 3, 3, 7, 1, 7, 7, 9, 9, 9, 9, 3, 3, 9, 7, 1, 3, 7, 7, 1, 3, 7, 1, 7, 3, 7, 9, 9, 7, 1, 3, 7, 9, 3, 1, 3, 3, 7, 1, 7, 1, 9, 3, 9, 3, 9, 3, 7, 9, 9, 1, 3, 1, 1, 3, 9, 9, 7, 1, 3, 9, 7, 1, 3, 9, 1, 7, 9, 9, 1, 9, 1, 9, 9, 9, 1, 9, 9, 1, 1, 3, 9, 1, 7, 3, 9, 1, 7, 3, 7, 3, 7, 9, 3, 3, 9, 3, 1, 9, 3, 9, 9, 1, 7, 1, 1, 7, 3, 7, 3, 7, 7, 7, 9, 1, 7, 9, 7, 3, 1, 3, 3, 3, 7, 1, 1, 7, 9, 3, 1, 1, 9, 1, 1, 7, 3, 9, 7, 3, 9, 1, 7, 1, 3, 9, 7, 3, 9, 9, 3, 7, 9, 3, 3, 1, 1, 3, 7, 3, 7, 3, 1, 1, 7, 3, 1, 9, 3, 1, 3, 1, 7, 3, 9, 7, 7, 9, 1, 7, 9, 1, 3, 1, 7, 7, 1, 9, 3, 3, 1, 7, 7, 3, 9, 7, 9, 1, 3, 9, 7, 1, 3, 9, 7, 1, 9, 1, 3, 7, 1, 7, 9, 1, 3, 7, 3, 9, 1, 7, 9, 1, 3, 3, 1, 3, 9, 7, 9, 9, 3, 9, 7, 7, 9, 9, 3, 3, 7, 1, 7, 9, 3, 3, 3, 9, 1, 7, 7, 3, 3, 7, 1, 9, 1, 7, 9, 3, 1, 3, 3, 1, 7, 1, 9, 1, 7, 1, 1, 7, 1, 3, 9, 3, 9, 9, 1, 7, 3, 1, 7, 1, 9, 9, 9, 1, 7, 1, 3, 9, 9, 7, 1, 7, 3, 1, 1, 7, 9, 7, 7, 7, 7, 3, 1, 3, 7, 1, 7, 3, 3, 7, 9, 9, 1, 7, 3, 9, 9, 1, 3, 7, 1, 1, 3, 3, 9, 3, 9, 1, 3, 9, 3, 7, 7, 1, 3, 3, 7, 3, 9, 3, 7, 1, 1, 9, 9, 3, 7, 3, 7, 7, 9, 3, 1, 7, 3, 9, 1, 3, 1, 3, 3, 9, 3, 9, 3, 3, 9, 9, 7, 9, 7, 9, 9, 7, 9, 3, 1, 3, 9, 1, 1, 3, 7, 1, 7, 9, 1, 3, 9, 3, 1, 7, 7, 9, 1, 3, 9, 3, 9, 1, 7, 1, 9, 3, 9, 7, 1, 7, 9, 7, 3, 7, 9, 9, 1, 3, 9, 1, 3, 7, 7, 9, 3, 7, 1, 9, 1, 7, 7, 3, 7, 3, 9, 9, 3, 3, 1, 7, 3, 9, 7, 3, 1, 1, 3, 9, 1, 7, 9, 1, 3, 7, 9, 3, 7, 9, 3, 1, 9, 3, 7, 1, 9, 1, 7, 9, 1, 1, 3, 7, 7, 1, 7, 3, 3, 3, 3, 9, 9, 3, 1, 7, 1, 3, 9, 7, 9, 7, 3, 9, 1, 3, 3, 1, 9, 3, 9, 1, 9, 9, 7, 9, 1, 7, 9, 1, 1, 3, 7, 9, 7, 9, 1, 9, 7, 3, 1, 9, 1, 7, 9, 3, 9, 7, 3, 1, 7, 9, 9, 7, 9, 9, 9, 1, 3, 3, 1, 3, 9, 1, 3, 3, 9, 3, 7, 1, 9, 3, 1, 9, 9, 7, 1, 3, 1, 3, 1, 7, 1, 9, 9, 9, 9, 9, 1, 3, 7, 9, 1, 9, 1, 7, 3, 1, 9, 3, 3, 7, 1, 7, 3, 7, 3, 9, 1, 3, 9, 1, 1, 3, 9, 7, 9, 3, 1, 7, 9, 7, 7, 9, 3, 7, 3, 7, 3, 7, 1, 1, 9, 1, 7, 3, 9, 1, 7, 9, 7, 9, 3, 3, 9, 7, 1, 1, 7, 7, 1, 3, 3, 3, 9, 1, 9, 9, 1, 1, 1, 3, 7, 1, 1, 9, 3, 7, 3, 1, 1, 7, 1, 1, 7, 9, 7, 1, 3, 7, 1, 9, 1, 3, 3, 7, 1, 3, 9, 1, 3, 3, 1, 1, 1, 9, 1, 7, 9, 3, 7, 3, 7, 9, 1, 7, 3, 7, 1, 7, 7, 9, 3, 7, 7, 9, 9, 9, 1, 7, 1, 9, 9, 7, 1, 1, 3, 9, 3, 7, 9, 3, 3, 3, 7, 9, 7, 7, 1, 1, 9, 1, 1, 7, 1, 3, 9, 1, 9, 3, 3, 7, 9, 3, 7, 3, 9, 3, 1, 1, 9, 9, 1, 7, 1, 7, 1, 3, 7, 3, 1, 7, 9, 9, 1, 1, 7, 3, 7, 9, 3, 1, 1, 3, 1, 3, 1, 7, 1, 3, 7, 3, 9, 1, 7, 9, 9, 1, 7, 1, 7, 9, 9, 3, 9, 3, 9, 3, 3, 3, 1, 7, 3, 3, 9, 9, 1, 1, 9, 3, 9, 1, 3, 7, 1, 3, 9, 3, 7, 7, 1, 7, 9, 1, 7, 7, 9, 9, 3, 7, 9, 3, 3, 1, 7, 9, 1, 9, 1, 7, 9, 1, 7, 1, 9, 1, 1, 1, 3, 3, 9, 7, 9, 7, 9, 9, 7, 9, 1, 7, 3, 9, 3, 3, 9, 3, 7, 1, 3, 9, 7, 1, 1, 7, 1, 1, 3, 3, 9, 9, 3, 7, 1, 3, 7, 9, 3, 1, 3, 9, 1, 7, 9, 1, 1, 9, 7, 1, 7, 9, 7, 7, 1, 3, 3, 9, 7, 7, 7, 1, 9, 3, 3, 7, 7, 9, 9, 1, 1, 7, 3, 7, 3, 9, 3, 9, 7, 1, 7, 9, 7, 9, 9, 1, 1, 7, 9, 3, 7, 9, 7, 9, 3, 3, 9, 7, 1, 3, 9, 1, 9, 1, 7, 3, 3, 9, 7, 9, 1, 3, 9, 3, 7, 3, 7, 9, 9, 1, 1, 3, 7, 9, 7, 7, 1, 3, 3, 1, 9, 3, 3, 7, 1, 3, 9, 1, 7, 3, 1, 7, 1, 3, 3, 9, 3, 7, 3, 7, 1, 7, 3, 7, 1, 3, 9, 1, 3, 1, 3, 9, 1, 9, 7, 7, 9, 7, 3, 1, 1, 7, 9, 1, 3, 3, 9, 1, 1, 7, 3, 7, 9, 3, 7, 1, 1, 1, 1, 7, 9, 7, 3, 1, 1, 9, 9, 7, 1, 3, 7, 7, 1, 9, 9, 1, 7, 9, 9, 1, 3, 9, 3, 9, 1, 1, 7, 9, 3, 1, 1, 1, 7, 3, 3, 9, 7, 7, 1, 7, 1, 7, 3, 1, 1, 9, 1, 3, 9, 3, 7, 7, 3, 9, 1, 3, 1, 7, 1, 9, 9, 9, 1, 7, 3, 1, 7, 9, 9, 7, 3, 1, 1, 3, 9, 3, 7, 9, 7, 9, 1, 9, 1, 9, 7, 1, 3, 9, 7, 9, 3, 7, 9, 1, 9, 3, 9, 7, 1, 7, 3, 7, 3, 9, 1, 7, 9, 7, 7, 7, 1, 9, 1, 1, 3, 7, 3, 1, 3, 3, 7, 7, 9, 3, 7, 7, 3, 7, 9, 7, 3, 9, 1, 1, 1, 9, 9, 1, 7, 1, 9, 3, 7, 7, 9, 7, 7, 1, 3, 3, 1, 1, 9, 9, 1, 3, 1, 7, 3, 9, 3, 3, 7, 1, 3, 9, 1, 7, 3, 9, 3, 9, 3, 7, 7, 3, 7, 9, 7, 1, 7, 1, 3, 7, 9, 9, 3, 9, 1, 9, 3, 1, 9, 1, 9, 3, 7, 3, 9, 7, 9, 3, 1, 3, 7, 9, 1, 7, 9, 3, 1, 9, 1, 3, 7, 3, 9, 1, 3, 9, 7, 1, 1, 7, 9, 9, 7, 3, 1, 1, 9, 7, 1, 7, 9, 7, 3, 9, 3, 3, 9, 7, 1, 9, 1, 3, 9, 9, 1, 3, 3, 9, 3, 3, 3, 9, 7, 7, 3, 7, 7, 9, 1, 1, 7, 9, 9, 3, 7, 7, 1, 9, 7, 3, 7, 9, 9, 3, 9, 1, 1, 1, 3, 3, 1, 7, 3, 7, 3, 1, 3, 1, 3, 1, 9, 1, 3, 3, 9, 9, 1, 3, 7, 7, 3, 9, 1, 7, 9, 7, 1, 3, 9, 3, 1, 3, 7, 9, 7, 1, 1, 7, 9, 1, 1, 3, 3, 7, 1, 7, 3, 7, 1, 7, 3, 7, 3, 3, 7, 9, 1, 1, 9, 1, 3, 3, 9, 1, 3, 9, 7, 9, 9, 3, 3, 1, 9, 9, 7, 1, 1, 3, 7, 1, 7, 3, 7, 1, 3, 9, 9, 9, 7, 1, 7, 3, 9, 3, 9, 1, 7, 9, 3, 7, 9, 3, 1, 9, 9, 1, 3, 1, 1, 3, 7, 1, 9, 3, 9, 7, 9, 7, 1, 9, 3, 9, 1, 7, 3, 9, 9, 7, 7, 3, 9, 3, 7, 3, 7, 1, 3, 7, 1, 9, 9, 1, 1, 3, 7, 1, 1, 9, 9, 1, 7, 9, 7, 1, 7, 7, 3, 9, 7, 3, 9, 9, 3, 1, 1, 3, 7, 1, 1, 3, 1, 1, 3, 7, 1, 9, 3, 9, 7, 7, 1, 7, 3, 9, 3, 7, 3, 7, 9, 3, 3, 1, 3, 7, 1, 3, 1, 3, 7, 9, 9, 1, 7, 9, 9, 9, 9, 1, 7, 3, 1, 9, 1, 7, 1, 3, 3, 9, 3, 9, 1, 3, 3, 7, 1, 9, 1, 9, 1, 7, 7, 9, 7, 9, 7, 9, 3, 7, 3, 1, 1, 7, 1, 3, 3, 3, 9, 1, 7, 7, 9, 1, 3, 9, 3, 1, 3, 9, 1, 7, 3, 1, 1, 3, 7, 9, 7, 3, 1, 7, 3, 9, 7, 3, 9, 3, 7, 9, 7, 9, 7, 1, 3, 1, 1, 3, 7, 3, 9, 1, 7, 3, 7, 1, 3, 9, 1, 3, 7, 9, 7, 1, 9, 3, 7, 7, 3, 9, 3, 9, 1, 3, 7, 7, 9, 1, 9, 1, 3, 7, 3, 9, 1, 7, 1, 9, 9, 1, 9, 7, 1, 9, 3, 9, 7, 1, 7, 9, 7, 1, 3, 7, 1, 3, 9, 1, 7, 3, 1, 3, 7, 1, 3, 1, 7, 9, 9, 3, 1, 1, 3, 1, 9, 3, 1, 7, 3, 9, 1, 3, 9, 1, 9, 1, 3, 1, 7, 9, 9, 1, 1, 3, 7, 1, 3, 9, 1, 7, 9, 3, 7, 9, 1, 1, 3, 1, 7, 3, 7, 3, 3, 9, 7, 3, 1, 7, 1, 1, 7, 9, 7, 9, 9, 3, 9, 1, 1, 1, 3, 9, 9, 3, 7, 9, 1, 3, 7, 9, 7, 9, 7, 9, 7, 1, 3, 7, 1, 3, 1, 3, 9, 7, 9, 3, 1, 9, 9, 3, 1, 7, 3, 3, 9, 1, 7, 3, 9, 9, 9, 7, 3, 9, 3, 9, 1, 7, 1, 7, 1, 9, 1, 7, 1, 7, 9, 3, 7, 9, 1, 3, 3, 1, 3, 9, 1, 9, 9, 9, 1, 9, 7, 9, 3, 3, 9, 1, 1, 3, 9, 1, 3, 9, 1, 3, 1, 9, 9, 1, 7, 3, 9, 1, 1, 3, 7, 9, 3, 3, 9, 1, 1, 3, 7, 1, 7, 9, 9, 9, 9, 1, 1, 9, 1, 3, 9, 7, 3, 3, 9, 9, 1, 3, 9, 3, 7, 1, 3, 7, 9, 1, 3, 1, 1, 7, 3, 1, 7, 9, 9, 7, 9, 7, 1, 1, 7, 7, 9, 9, 1, 3, 1, 3, 7, 7, 1, 3, 9, 9, 7, 3, 1, 7, 1, 9, 1, 7, 1, 1, 7, 1, 3, 7, 3, 9, 3, 7, 3, 9, 9, 7, 3, 7, 9, 1, 7, 9, 1, 7, 3, 1, 7, 9, 3, 7, 9, 3, 9, 3, 9, 7, 3, 1, 7, 9, 1, 1, 7, 9, 9, 7, 1, 3, 3, 9, 1, 1, 7, 7, 7, 9, 9, 9, 7, 3, 7, 7, 1, 3, 3, 1, 7, 9, 1, 7, 9, 3, 3, 7, 7, 1, 7, 9, 1, 7, 7, 3, 7, 9, 1, 7, 3, 7, 9, 9, 3, 7, 9, 3, 7, 1, 3, 9, 1, 3, 3, 9, 3, 7, 7, 9, 1, 7, 3, 1, 7, 7, 9, 3, 9, 7, 1, 7, 3, 3, 7, 9, 3, 1, 1, 1, 3, 3, 7, 7, 1, 3, 9, 7, 3, 7, 1, 7, 3, 9, 1, 7, 3, 1, 9, 3, 7, 3, 9, 9, 3, 9, 7, 9, 1, 7, 3, 1, 3, 9, 3, 3, 1, 1, 9, 9, 1, 3, 3, 9, 3, 3, 1, 7, 3, 3, 9, 1, 7, 9, 1, 1, 3, 7, 7, 3, 9, 7, 3, 9, 7, 1, 3, 7, 1, 9, 9, 9, 1, 3, 7, 9, 9, 3, 3, 3, 1, 7, 9, 3, 1, 1, 7, 9, 7, 3, 9, 9, 1, 7, 9, 1, 7, 1, 3, 9, 1, 1, 3, 7, 1, 3, 7, 1, 7, 3, 7, 3, 9, 7, 3, 7, 9, 1, 7, 3, 7, 3, 7, 3, 1, 1, 3, 9, 7, 3, 9, 3, 1, 7, 9, 1, 1, 3, 9, 3, 3, 7, 1, 7, 7, 1, 9, 1, 9, 1, 3, 3, 7, 1, 9, 7, 3, 7, 3, 7, 9, 1, 7, 9, 1, 3, 1, 3, 7, 9, 7, 9, 1, 9, 3, 1, 7, 3, 9, 3, 1, 3, 9, 3, 3, 3, 7, 3, 9, 3, 3, 9, 3, 1, 9, 3, 1, 1, 9, 9, 1, 3, 9, 7, 3, 1, 9, 3, 1, 9, 3, 9, 7, 1, 7, 1, 7, 1, 9, 3, 7, 1, 7, 1, 7, 9, 7, 3, 7, 9, 9, 7, 1, 7, 3, 9, 1, 3, 9, 7, 9, 1, 9, 3, 3, 3, 9, 3, 1, 3, 9, 3, 3, 7, 9, 9, 3, 7, 3, 7, 1, 3, 9, 1, 7, 9, 1, 7, 7, 3, 7, 3, 9, 7, 9, 1, 3, 1, 7, 1, 7, 3, 3, 7, 3, 1, 7, 9, 3, 3, 7, 9, 1, 1, 9, 1, 3, 7, 3, 1, 1, 3, 9, 7, 7, 9, 1, 1, 9, 3, 3, 7, 1, 9, 1, 7, 9, 9, 7, 9, 1, 9, 7, 3, 9, 3, 1, 7, 9, 1, 7, 3, 1, 3, 9, 1, 7, 1, 9, 7, 7, 9, 3, 9, 7, 9, 1, 1, 9, 9, 9, 7, 3, 9, 7, 3, 7, 7, 1, 9, 1, 9, 7, 7, 3, 3, 7, 7, 9, 3, 9, 3, 9, 1, 1, 7, 3, 3, 7, 3, 1, 3, 7, 1, 3, 7, 9, 3, 9, 7, 9, 1, 7, 9, 1, 9, 3, 1, 7, 7, 3, 7, 9, 3, 3, 9, 3, 1, 7, 3, 7, 7, 1, 7, 3, 7, 9, 3, 9, 1, 1, 3, 7, 9, 7, 9, 7, 1, 3, 9, 3, 9, 9, 1, 1, 3, 3, 9, 3, 7, 7, 9, 3, 7, 9, 3, 1, 7, 3, 1, 1, 7, 9, 3, 7, 7, 1, 9, 3, 9, 7, 9, 9, 3, 3, 3, 7, 3, 7, 3, 9, 1, 7, 1, 9, 9, 7, 7, 7, 7, 9, 3, 7, 1, 1, 3, 7, 9, 9, 1, 1, 3, 9, 7, 9, 3, 7, 1, 9, 3, 7, 3, 9, 1, 7, 9, 9, 1, 9, 9, 1, 7, 3, 7, 9, 3, 9, 1, 3, 3, 1, 9, 1, 3, 9, 3, 9, 7, 1, 1, 7, 7, 9, 9, 3, 9, 9, 3, 1, 1, 7, 9, 1, 3, 7, 1, 9, 1, 3, 1, 3, 7, 9, 1, 3, 1, 9, 7, 7, 1, 3, 7, 3, 9, 7, 3, 9, 7, 3, 1, 1, 1, 7, 9, 9, 1, 9, 9, 3, 3, 1, 7, 3, 7, 1, 1, 9, 1, 3, 1, 1, 9, 1, 7, 7, 3, 7, 9, 3, 9, 7, 1, 3, 9, 9, 1, 1, 1, 7, 9, 7, 1, 7, 9, 7, 1, 3, 7, 1, 3, 1, 7, 7, 7, 1, 3, 7, 9, 9, 3, 3, 1, 7, 3, 1, 7, 9, 3, 9, 3, 1, 1, 7, 1, 7, 9, 3, 9, 7, 1, 3, 7, 1, 3, 7, 1, 3, 1, 3, 7, 3, 9, 7, 9, 9, 1, 7, 3, 3, 9, 3, 7, 3, 1, 7, 3, 9, 9, 7, 1, 9, 1, 7, 9, 1, 3, 9, 1, 7, 1, 3, 7, 3, 1, 7, 9, 3, 7, 1, 7, 3, 7, 1, 3, 7, 3, 3, 9, 7, 3, 9, 7, 7, 1, 7, 7, 9, 9, 9, 7, 1, 7, 3, 1, 1, 9, 9, 3, 9, 1, 3, 1, 7, 9, 3, 9, 7, 3, 1, 1, 3, 9, 9, 1, 7, 9, 1, 9, 9, 1, 7, 7, 1, 1, 9, 1, 3, 9, 9, 7, 7, 1, 7, 7, 7, 3, 3, 9, 1, 7, 1, 9, 3, 7, 7, 1, 1, 7, 7, 3, 3, 1, 1, 1, 3, 1, 3, 3, 9, 7, 1, 7, 7, 3, 7, 3, 9, 7, 1, 3, 3, 9, 1, 7, 3, 7, 1, 9, 1, 7, 1, 9, 9, 1, 1, 7, 9, 3, 1, 3, 9, 7, 9, 9, 3, 7, 9, 1, 3, 7, 9, 1, 3, 1, 7, 3, 9, 7, 9, 3, 9, 1, 9, 3, 1, 7, 9, 9, 7, 1, 1, 7, 3, 7, 3, 7, 3, 1, 3, 1, 7, 9, 9, 7, 1, 3, 3, 9, 3, 1, 1, 1, 9, 9, 3, 7, 9, 1, 3, 7, 1, 3, 9, 1, 1, 7, 9, 1, 7, 7, 9, 3, 9, 1, 1, 1, 1, 1, 3, 9, 7, 7, 3, 9, 9, 7, 7, 1, 3, 9, 1, 3, 7, 9, 3, 9, 7, 3, 7, 1, 7, 3, 1, 9, 1, 7, 1, 3, 3, 7, 7, 3, 1, 9, 7, 1, 3, 7, 1, 9, 3, 7, 1, 7, 7, 9, 1, 3, 7, 3, 7, 7, 9, 1, 9, 9, 3, 9, 1, 1, 7, 3, 9, 7, 1, 3, 7, 3, 7, 1, 7, 3, 1, 1, 3, 3, 1, 1, 7, 9, 1, 9, 7, 1, 9, 1, 3, 9, 9, 9, 1, 1, 3, 9, 1, 3, 3, 7, 3, 7, 1, 7, 3, 9, 1, 7, 1, 3, 7, 9, 3, 3, 9, 1, 7, 1, 3, 7, 9, 3, 7, 3, 7, 1, 9, 7, 9, 7, 1, 9, 3, 7, 3, 1, 7, 3, 9, 1, 1, 9, 9, 7, 1, 3, 1, 1, 9, 3, 7, 9, 7, 7, 9, 3, 7, 3, 3, 3, 9, 3, 7, 9, 1, 1, 3, 9, 7, 3, 9, 1, 3, 3, 9, 1, 3, 7, 1, 7, 3, 1, 7, 9, 1, 1, 7, 1, 7, 7, 3, 9, 7, 9, 1, 3, 9, 1, 7, 3, 9, 3, 7, 9, 1, 9, 9, 1, 7, 3, 1, 1, 3, 7, 3, 7, 3, 9, 1, 3, 9, 1, 3, 1, 1, 3, 7, 3, 7, 9, 7, 9, 9, 1, 1, 3, 9, 3, 9, 1, 3, 1, 3, 9, 3, 9, 1, 1, 3, 7, 3, 3, 7, 7, 9, 3, 9, 7, 1, 9, 1, 9, 1, 7, 3, 9, 7, 1, 9, 3, 9, 7, 3, 9, 9, 7, 1, 3, 1, 7, 9, 9, 1, 1, 9, 3, 9, 9, 1, 9, 9, 1, 7, 1, 7, 3, 7, 1, 7, 9, 1, 3, 7, 3, 9, 1, 1, 7, 3, 9, 3, 7, 1, 1, 7, 9, 1, 1, 3, 7, 3, 3, 7, 9, 1, 9, 3, 7, 3, 7, 1, 9, 1, 3, 3, 1, 3, 1, 3, 7, 1, 7, 1, 9, 7, 3, 9, 1, 3, 9, 1, 7, 9, 9, 7, 7, 1, 7, 7, 3, 9, 1, 1, 7, 1, 1, 3, 3, 1, 1, 7, 1, 7, 3, 9, 3, 7, 9, 7, 1, 3, 9, 1, 3, 9, 3, 9, 1, 7, 9, 7, 3, 9, 7, 3, 1, 9, 1, 9, 1, 1, 3, 7, 3, 1, 3, 9, 9, 1, 1, 1, 7, 7, 9, 7, 9, 9, 1, 1, 9, 7, 9, 3, 3, 1, 7, 3, 1, 7, 1, 3, 7, 9, 1, 1, 9, 9, 7, 7, 1, 1, 7, 9, 3, 7, 1, 7, 9, 9, 1, 7, 3, 7, 3, 7, 1, 7, 3, 3, 9, 7, 7, 9, 7, 1, 3, 9, 3, 7, 7, 3, 9, 3, 7, 7, 9, 3, 9, 1, 7, 9, 1, 7, 7, 1, 3, 3, 9, 1, 1, 3, 3, 9, 1, 3, 9, 1, 9, 9, 1, 3, 7, 1, 7, 1, 3, 1, 1, 7, 9, 1, 7, 3, 1, 1, 3, 9, 7, 3, 7, 9, 1, 7, 1, 7, 9, 3, 9, 1, 7, 7, 9, 9, 3, 1, 1, 7, 3, 1, 9, 3, 7, 3, 7, 7, 3, 9, 1, 7, 3, 9, 1, 9, 1, 3, 3, 3, 9, 3, 9, 1, 3, 3, 3, 1, 9, 9, 7, 1, 7, 3, 7, 1, 3, 1, 7, 3, 3, 9, 9, 7, 3, 1, 7, 7, 9, 9, 1, 7, 7, 3, 7, 3, 7, 3, 1, 3, 1, 9, 3, 7, 7, 9, 1, 7, 1, 3, 9, 1, 3, 7, 9, 3, 1, 3, 1, 3, 7, 9, 3, 1, 7, 7, 9, 3, 9, 3, 7, 9, 3, 9, 9, 1, 7, 3, 9, 9, 7, 1, 1, 7, 7, 9, 3, 9, 1, 9, 9, 1, 1, 7, 1, 7, 1, 7, 7, 3, 1, 1, 7, 3, 7, 9, 3, 3, 9, 9, 1, 1, 1, 3, 3, 9, 7, 9, 3, 1, 3, 9, 7, 7, 3, 1, 1, 3, 3, 1, 3, 9, 3, 1, 9, 1, 9, 3, 1, 1, 9, 7, 1, 7, 3, 9, 7, 3, 1, 7, 1, 9, 1, 7, 9, 1, 3, 7, 1, 1, 3, 3, 7, 3, 7, 1, 9, 7, 3, 9, 9, 1, 9, 1, 7, 9, 7, 1, 3, 9, 7, 3, 1, 9, 7, 1, 7, 3, 1, 1, 3, 3, 9, 7, 9, 7, 1, 3, 3, 7, 3, 7, 3, 1, 9, 1, 3, 9, 7, 9, 9, 1, 9, 9, 7, 9, 1, 3, 1, 7, 9, 1, 3, 1, 9, 9, 3, 3, 1, 7, 3, 1, 7, 3, 3, 3, 1, 7, 3, 7, 7, 9, 7, 9, 7, 9, 3, 9, 7, 1, 1, 7, 1, 1, 3, 1, 3, 7, 9, 9, 3, 1, 7, 3, 7, 3, 9, 9, 1, 3, 1, 3, 9, 9, 1, 7, 9, 3, 1, 3, 7, 3, 9, 7, 9, 1, 7, 3, 3, 3, 9, 3, 9, 1, 7, 7, 1, 9, 1, 9, 3, 1, 7, 9, 7, 3, 9, 7, 9, 7, 9, 1, 3, 9, 1, 9, 9, 3, 9, 3, 1, 1, 1, 9, 3, 9, 1, 1, 3, 7, 1, 9, 7, 3, 7, 9, 7, 9, 7, 9, 3, 1, 7, 1, 3, 9, 9, 1, 3, 9, 7, 1, 7, 3, 9, 3, 7, 7, 3, 7, 9, 9, 3, 7, 1, 3, 1, 1, 9, 3, 3, 7, 9, 7, 9, 1, 1, 7, 7, 9, 3, 3, 9, 7, 3, 1, 7, 7, 3, 9, 1, 1, 3, 9, 9, 1, 9, 3, 7, 9, 1, 7, 3, 3, 7, 3, 7, 1, 9, 7, 1, 7, 3, 3, 3, 9, 1, 1, 3, 9, 1, 3, 3, 9, 9, 7, 3, 7, 3, 3, 7, 1, 7, 1, 9, 1, 3, 7, 9, 1, 3, 3, 7, 9, 9, 7, 9, 3, 7, 7, 3, 1, 7, 7, 1, 9, 1, 3, 9, 9, 1, 3, 7, 1, 9, 7, 7, 9, 3, 1, 9, 1, 3, 3, 7, 1, 3, 9, 7, 3, 1, 7, 7, 9, 1, 3, 3, 7, 3, 9, 1, 7, 3, 1, 3, 9, 7, 1, 3, 3, 1, 1, 3, 7, 1, 9, 7, 9, 9, 3, 1, 9, 7, 1, 7, 9, 3, 7, 9, 1, 3, 9, 1, 7, 3, 7, 1, 7, 9, 1, 7, 3, 7, 3, 1, 7, 1, 9, 9, 1, 3, 1, 7, 1, 3, 3, 3, 7, 9, 7, 3, 9, 3, 7, 9, 1, 7, 3, 9, 1, 7, 3, 1, 7, 7, 1, 3, 9, 9, 9, 1, 3, 9, 7, 1, 9, 3, 9, 9, 3, 7, 9, 3, 9, 1, 9, 1, 3, 1, 1, 3, 9, 3, 9, 1, 1, 3, 9, 3, 1, 1, 7, 9, 7, 9, 1, 9, 9, 1, 7, 3, 3, 3, 7, 7, 1, 7, 1, 7, 1, 3, 9, 9, 1, 3, 9, 1, 7, 9, 7, 1, 9, 7, 1, 3, 7, 9, 9, 3, 1, 3, 7, 1, 3, 1, 7, 1, 9, 9, 9, 7, 1, 7, 7, 3, 9, 3, 7, 3, 7, 9, 1, 3, 9, 1, 9, 3, 9, 1, 7, 7, 9, 3, 7, 7, 3, 7, 1, 7, 9, 3, 9, 3, 9, 7, 1, 3, 7, 1, 9, 3, 7, 9, 1, 7, 1, 3, 7, 3, 9, 7, 9, 3, 1, 7, 7, 9, 9, 9, 3, 1, 7, 3, 7, 1, 1, 3, 3, 7, 7, 9, 7, 3, 9, 7, 3, 3, 7, 3, 1, 7, 9, 1, 3, 9, 7, 1, 9, 1, 3, 3, 1, 1, 7, 9, 3, 3, 9, 3, 1, 7, 9, 7, 7, 9, 7, 1, 3, 7, 9, 3, 7, 3, 7, 1, 3, 1, 7, 1, 7, 7, 9, 3, 3, 9, 7, 9, 3, 9, 1, 7, 3, 9, 1, 3, 9, 7, 9, 1, 1, 3, 1, 7, 1, 9, 3, 3, 7, 9, 7, 1, 7, 9, 9, 7, 3, 7, 1, 9, 9, 1, 9, 7, 3, 3, 7, 3, 3, 7, 9, 9, 9, 1, 7, 1, 3, 3, 9, 7, 1, 3, 1, 1, 9, 1, 7, 3, 7, 9, 1, 1, 7, 9, 1, 7, 1, 3, 3, 7, 1, 7, 9, 3, 9, 7, 3, 9, 7, 9, 1, 1, 3, 9, 1, 7, 7, 1, 1, 7, 3, 9, 7, 3, 9, 9, 1, 7, 1, 7, 3, 3, 9, 7, 3, 1, 1, 9, 1, 7, 9, 7, 3, 7, 7, 3, 1, 1, 3, 1, 9, 1, 1, 3, 1, 1, 3, 7, 1, 7, 3, 3, 7, 3, 9, 7, 1, 9, 9, 9, 9, 7, 9, 1, 1, 1, 7, 9, 7, 3, 7, 7, 3, 3, 3, 9, 1, 9, 7, 7, 1, 1, 9, 3, 1, 7, 1, 9, 7, 9, 3, 1, 9, 9, 3, 7, 9, 7, 9, 3, 9, 3, 9, 3, 7, 7, 3, 1, 7, 7, 9, 1, 3, 9, 1, 1, 3, 7, 9, 7, 3, 7, 1, 7, 9, 1, 3, 9, 1, 7, 3, 7, 3, 7, 9, 3, 1, 7, 9, 3, 1, 7, 9, 1, 9, 9, 1, 1, 7, 7, 3, 9, 1, 9, 3, 7, 9, 3, 1, 7, 3, 9, 9, 7, 3, 7, 9, 7, 3, 3, 3, 3, 9, 1, 7, 1, 3, 9, 7, 9, 1, 7, 7, 3, 3, 9, 1, 3, 9, 1, 7, 7, 1, 7, 9, 3, 7, 3, 1, 9, 3, 9, 1, 9, 7, 1, 9, 9, 1, 7, 3, 9, 1, 9, 1, 3, 7, 1, 7, 1, 3, 3, 9, 3, 7, 9, 7, 7, 1, 7, 7, 3, 1, 7, 3, 7, 3, 7, 9, 9, 7, 7, 7, 3, 1, 3, 7, 3, 7, 9, 1, 9, 3, 1, 1, 9, 3, 9, 1, 9, 1, 7, 1, 3, 7, 3, 7, 7, 1, 9, 9, 1, 3, 1, 7, 9, 7, 1, 3, 9, 7, 3, 9, 1, 7, 9, 3, 7, 9, 1, 1, 7, 3, 9, 3, 1, 7, 9, 9, 7, 1, 1, 7, 9, 3, 1, 7, 3, 7, 3, 7, 9, 3, 7, 9, 7, 3, 7, 1, 9, 1, 9, 7, 1, 3, 7, 9, 3, 7, 1, 1, 7, 9, 7, 1, 9, 3, 7, 9, 1, 7, 1, 3, 9, 9, 3, 1, 3, 3, 7, 1, 7, 7, 9, 3, 9, 7, 3, 1, 7, 3, 7, 9, 1, 1, 9, 1, 3, 1, 3, 9, 3, 1, 7, 9, 1, 7, 9, 9, 7, 7, 1, 1, 3, 9, 1, 3, 9, 7, 3, 7, 1, 7, 9, 1, 3, 9, 7, 9, 7, 1, 9, 3, 3, 1, 1, 7, 9, 3, 3, 1, 7, 9, 1, 9, 3, 9, 1, 3, 1, 1, 7, 1, 3, 7, 3, 1, 7, 9, 3, 1, 1, 7, 9, 7, 7, 7, 3, 3, 9, 7, 7, 7, 3, 9, 7, 9, 1, 7, 9, 1, 1, 3, 7, 1, 3, 3, 3, 1, 7, 9, 1, 9, 1, 7, 3, 9, 1, 7, 1, 3, 7, 9, 9, 7, 3, 3, 7, 3, 9, 1, 3, 9, 7, 1, 7, 9, 7, 7, 7, 9, 9, 7, 3, 1, 9, 1, 9, 1, 1, 3, 9, 1, 9, 1, 1, 9, 1, 9, 1, 7, 1, 1, 3, 7, 9, 1, 7, 3, 7, 1, 3, 1, 7, 3, 9, 3, 7, 7, 1, 3, 9, 3, 7, 9, 9, 9, 1, 3, 9, 1, 1, 3, 1, 7, 3, 7, 7, 9, 1, 1, 9, 7, 3, 7, 3, 1, 3, 7, 9, 1, 1, 7, 9, 3, 7, 9, 3, 7, 1, 9, 9, 3, 9, 1, 3, 3, 3, 9, 3, 1, 9, 3, 9, 9, 1, 3, 7, 9, 1, 3, 7, 1, 1, 7, 3, 7, 9, 9, 7, 3, 7, 3, 9, 3, 9, 1, 3, 7, 3, 9, 1, 9, 3, 9, 3, 1, 3, 7, 7, 3, 1, 1, 3, 1, 3, 3, 1, 7, 9, 1, 3, 1, 9, 3, 7, 3, 1, 7, 9, 3, 7, 7, 9, 7, 3, 9, 7, 7, 7, 1, 9, 9, 7, 3, 9, 1, 9, 3, 7, 9, 1, 7, 9, 9, 1, 1, 7, 1, 7, 3, 1, 7, 3, 7, 3, 7, 9, 1, 1, 3, 7, 9, 7, 9, 7, 1, 9, 9, 1, 1, 9, 1, 1, 7, 3, 9, 1, 3, 1, 9, 1, 7, 3, 7, 3, 7, 1, 3, 9, 7, 7, 3, 9, 3, 1, 7, 9, 9, 7, 9, 1, 1, 9, 3, 9, 7, 1, 7, 7, 3, 3, 7, 3, 7, 9, 9, 1, 3, 9, 3, 3, 7, 3, 1, 7, 1, 3, 9, 7, 9, 9, 1, 9, 1, 7, 3, 7, 9, 3, 1, 9, 3, 9, 7, 1, 3, 1, 7, 3, 3, 7, 3, 3, 9, 1, 3, 7, 7, 3, 9, 1, 7, 3, 9, 9, 1, 7, 1, 9, 1, 1, 3, 9, 9, 3, 7, 9, 3, 9, 1, 7, 9, 9, 1, 1, 9, 1, 1, 9, 3, 3, 1, 3, 9, 3, 3, 3, 1, 7, 9, 9, 3, 9, 1, 9, 1, 7, 7, 3, 9, 3, 3, 9, 7, 9, 1, 3, 9, 3, 7, 9, 3, 7, 7, 3, 7, 9, 7, 1, 7, 3, 1, 9, 3, 1, 9, 7, 1, 3, 7, 3, 9, 1, 9, 7, 7, 1, 7, 7, 3, 7, 9, 1, 1, 3, 7, 3, 9, 1, 7, 7, 3, 7, 3, 9, 7, 1, 1, 3, 9, 1, 9, 9, 3, 3, 9, 7, 7, 7, 1, 9, 9, 3, 3, 9, 9, 9, 1, 3, 7, 1, 3, 9, 7, 9, 7, 1, 3, 9, 7, 3, 7, 1, 7, 1, 3, 7, 7, 9, 3, 9, 1, 7, 1, 7, 1, 7, 1, 7, 1, 3, 1, 7, 7, 9, 1, 9, 9, 7, 3, 9, 3, 1, 7, 3, 9, 7, 3, 7, 1, 3, 7, 9, 1, 3, 7, 3, 3, 7, 9, 3, 1, 9, 9, 7, 3, 7, 1, 7, 3, 9, 1, 7, 9, 9, 7, 1, 3, 7, 9, 7, 9, 3, 7, 1, 1, 3, 9, 1, 9, 7, 9, 3, 9, 9, 7, 9, 1, 7, 9, 1, 1, 1, 7, 3, 1, 9, 1, 7, 9, 3, 3, 7, 9, 7, 7, 9, 1, 3, 1, 9, 3, 7, 1, 7, 7, 7, 9, 9, 1, 1, 3, 3, 1, 7, 7, 1, 3, 3, 1, 1, 9, 7, 3, 1, 9, 9, 3, 1, 3, 7, 1, 3, 7, 1, 9, 9, 1, 7, 3, 9, 3, 7, 1, 1, 9, 1, 3, 7, 1, 7, 1, 1, 7, 3, 9, 3, 3, 9, 1, 7, 7, 3, 9, 7, 3, 1, 7, 9, 7, 1, 9, 7, 9, 9, 1, 3, 9, 3, 9, 3, 1, 1, 1, 7, 3, 9, 7, 3, 9, 7, 9, 3, 7, 9, 1, 7, 3, 1, 7, 1, 3, 9, 1, 9, 9, 1, 7, 9, 3, 1, 1, 3, 9, 7, 3, 3, 7, 3, 9, 3, 7, 1, 3, 9, 1, 9, 7, 1, 1, 7, 3, 9, 9, 7, 3, 1, 3, 7, 1, 1, 3, 3, 9, 1, 7, 3, 9, 9, 1, 3, 3, 9, 3, 3, 9, 7, 3, 7, 1, 9, 7, 7, 9, 9, 1, 9, 1, 3, 7, 1, 7, 1, 9, 7, 9, 3, 1, 3, 7, 9, 7, 1, 7, 3, 3, 1, 7, 3, 1, 9, 1, 7, 9, 9, 9, 3, 9, 1, 3, 9, 1, 7, 9, 9, 3, 3, 1, 1, 7, 1, 3, 1, 7, 3, 9, 3, 9, 1, 9, 9, 9, 7, 3, 1, 9, 3, 7, 9, 3, 9, 9, 1, 7, 7, 3, 7, 9, 9, 3, 9, 1, 1, 3, 9, 3, 7, 9, 1, 9, 7, 7, 9, 1, 7, 3, 1, 3, 9, 3, 7, 3, 7, 1, 7, 9, 3, 9, 1, 9, 3, 7, 1, 3, 7, 1, 1, 1, 3, 3, 9, 3, 7, 1, 9, 9, 7, 7, 9, 1, 7, 3, 7, 3, 1, 1, 3, 7, 9, 1, 3, 9, 7, 3, 9, 1, 1, 3, 3, 1, 7, 7, 1, 7, 1, 3, 9, 7, 9, 7, 9, 3, 1, 3, 1, 7, 3, 9, 1, 9, 3, 9, 7, 9, 7, 3, 3, 9, 7, 7, 1, 3, 7, 9, 9, 3, 7, 9, 9, 1, 7, 1, 3, 9, 1, 7, 1, 7, 1, 3, 9, 3, 7, 3, 3, 9, 9, 1, 1, 9, 3, 7, 1, 3, 7, 1, 9, 7, 1, 3, 3, 9, 1, 1, 9, 1, 9, 1, 1, 3, 7, 9, 3, 9, 1, 7, 9, 3, 7, 3, 3, 1, 1, 9, 1, 3, 7, 1, 7, 3, 9, 7, 9, 1, 7, 1, 7, 3, 1, 9, 7, 7, 9, 1, 7, 3, 9, 3, 3, 1, 9, 1, 7, 3, 7, 3, 9, 1, 9, 3, 1, 7, 9, 7, 7, 9, 3, 7, 9, 1, 3, 1, 3, 1, 9, 3, 7, 1, 1, 3, 7, 1, 9, 1, 3, 1, 1, 3, 9, 3, 7, 3, 9, 3, 7, 9, 9, 1, 7, 1, 1, 3, 3, 7, 7, 1, 3, 3, 7, 7, 9, 3, 9, 9, 3, 9, 9, 1, 7, 1, 7, 3, 3, 9, 9, 3, 9, 1, 7, 1, 1, 1, 7, 9, 1, 7, 1, 3, 9, 3, 3, 7, 9, 7, 9, 1, 7, 9, 1, 7, 3, 1, 7, 7, 3, 3, 9, 1, 7, 7, 9, 3, 9, 3, 7, 9, 7, 3, 7, 7, 1, 9, 1, 7, 3, 9, 1, 1, 7, 1, 7, 9, 3, 7, 9, 3, 1, 9, 3, 1, 7, 9, 7, 1, 3, 7, 9, 1, 3, 1, 7, 9, 7, 9, 3, 7, 3, 3, 1, 1, 3, 9, 1, 1, 3, 1, 3, 9, 1, 7, 7, 3, 7, 1, 1, 1, 3, 9, 3, 1, 1, 9, 7, 3, 3, 7, 7, 3, 3, 3, 9, 9, 9, 7, 9, 1, 3, 7, 1, 3, 1, 9, 3, 9, 7, 7, 9, 1, 7, 9, 3, 1, 3, 7, 7, 7, 3, 7, 1, 9, 3, 1, 1, 3, 7, 9, 1, 7, 9, 1, 3, 9, 3, 3, 1, 7, 9, 1, 7, 3, 3, 1, 9, 1, 3, 9, 3, 9, 7, 1, 9, 7, 9, 9, 1, 3, 1, 7, 9, 7, 9, 3, 9, 1, 3, 1, 7, 3, 7, 7, 3, 7, 9, 1, 7, 3, 9, 3, 7, 1, 3, 9, 7, 1, 3, 1, 9, 7, 1, 3, 7, 7, 3, 9, 1, 3, 9, 1, 3, 1, 3, 9, 3, 9, 7, 9, 3, 1, 7, 9, 3, 1, 1, 7, 9, 3, 1, 1, 9, 7, 3, 9, 7, 9, 3, 1, 3, 1, 7, 1, 3, 9, 9, 3, 3, 1, 1, 3, 7, 7, 7, 1, 7, 3, 7, 3, 3, 9, 9, 1, 3, 7, 9, 9, 3, 1, 3, 3, 7, 1, 3, 9, 1, 3, 1, 7, 1, 3, 9, 7, 7, 9, 7, 9, 9, 1, 7, 9, 3, 9, 3, 7, 3, 1, 3, 7, 3, 9, 1, 7, 3, 7, 9, 9, 7, 3, 1, 1, 3, 7, 9, 7, 9, 1, 1, 1, 3, 7, 3, 1, 7, 3, 1, 3, 9, 1, 7, 1, 9, 9, 1, 7, 3, 9, 9, 7, 1, 3, 9, 9, 9, 3, 3, 9, 1, 7, 9, 9, 3, 1, 7, 7, 7, 7, 1, 3, 7, 3, 9, 7, 3, 3, 7, 1, 1, 7, 1, 7, 9, 9, 9, 1, 1, 3, 9, 3, 1, 3, 7, 9, 9, 7, 1, 3, 1, 1, 7, 3, 3, 7, 9, 3, 7, 9, 9, 3, 9, 1, 3, 3, 7, 1, 9, 7, 1, 3, 7, 7, 9, 9, 1, 9, 7, 7, 1, 7, 9, 3, 7, 9, 3, 1, 3, 9, 9, 3, 7, 9, 1, 1, 9, 7, 1, 3, 3, 9, 3, 1, 7, 3, 3, 9, 9, 1, 3, 1, 9, 7, 3, 3, 1, 3, 1, 7, 9, 3, 9, 7, 9, 7, 1, 9, 1, 1, 7, 3, 7, 1, 3, 9, 1, 7, 9, 1, 3, 1, 3, 7, 9, 3, 9, 9, 1, 7, 3, 1, 1, 9, 7, 3, 1, 7, 9, 7, 9, 3, 7, 1, 3, 7, 3, 7, 3, 9, 1, 9, 1, 7, 1, 3, 9, 3, 7, 9, 3, 1, 1, 3, 9, 1, 3, 7, 9, 9, 1, 7, 3, 7, 1, 7, 9, 9, 1, 3, 3, 9, 7, 1, 7, 1, 3, 9, 3, 1, 9, 1, 7, 9, 3, 9, 7, 1, 3, 1, 3, 1, 3, 7, 3, 1, 1, 3, 9, 3, 7, 9, 1, 3, 9, 9, 1, 1, 3, 3, 1, 9, 9, 7, 1, 7, 3, 7, 7, 3, 7, 1, 9, 1, 3, 9, 1, 9, 3, 1, 1, 3, 9, 9, 7, 7, 9, 1, 3, 9, 9, 7, 3, 9, 3, 1, 9, 1, 7, 9, 9, 7, 7, 9, 7, 9, 1, 1, 7, 7, 3, 3, 9, 1, 3, 1, 7, 9, 3, 1, 3, 7, 7, 9, 3, 3, 1, 9, 1, 3, 7, 7, 9, 9, 3, 1, 9, 1, 7, 9, 7, 3, 7, 1, 7, 3, 3, 9, 3, 9, 1, 7, 9, 3, 1, 9, 9, 1, 3, 7, 9, 1, 3, 3, 1, 9, 7, 3, 9, 1, 7, 9, 1, 3, 3, 9, 1, 7, 3, 7, 3, 9, 1, 7, 9, 1, 7, 1, 7, 9, 9, 3, 1, 1, 1, 1, 3, 9, 7, 3, 7, 3, 9, 9, 7, 1, 3, 9, 1, 9, 7, 1, 3, 1, 3, 9, 7, 3, 1, 3, 9, 1, 3, 1, 3, 9, 9, 9, 3, 7, 7, 1, 1, 1, 3, 1, 7, 7, 9, 7, 1, 9, 3, 3, 9, 9, 3, 1, 3, 3, 9, 1, 7, 3, 7, 3, 9, 3, 1, 3, 7, 7, 7, 9, 1, 1, 7, 9, 9, 1, 7, 7, 1, 9, 3, 7, 7, 1, 9, 1, 3, 1, 1, 3, 3, 1, 3, 1, 9, 3, 7, 9, 1, 7, 7, 9, 3, 7, 9, 3, 9, 1, 9, 9, 7, 1, 3, 9, 1, 7, 9, 9, 3, 1, 7, 9, 1, 1, 7, 7, 7, 3, 3, 3, 1, 1, 9, 9, 1, 7, 9, 3, 1, 3, 7, 9, 7, 1, 1, 3, 3, 7, 7, 1, 9, 9, 1, 3, 3, 1, 3, 9, 1, 9, 1, 7, 3, 9, 3, 9, 7, 7, 1, 7, 7, 3, 1, 7, 9, 9, 1, 7, 1, 3, 1, 3, 7, 7, 9, 9, 1, 7, 7, 9, 9, 1, 7, 3, 9, 1, 7, 1, 1, 7, 7, 9, 9, 1, 7, 3, 9, 1, 7, 3, 3, 3, 1, 3, 3, 7, 1, 3, 9, 7, 3, 3, 9, 7, 9, 3, 1, 9, 1, 7, 1, 7, 3, 9, 7, 1, 7, 1, 7, 3, 3, 3, 7, 1, 1, 7, 9, 3, 1, 7, 1, 1, 9, 1, 9, 3, 9, 1, 1, 7, 3, 9, 1, 7, 1, 9, 9, 7, 7, 9, 1, 7, 3, 1, 9, 1, 3, 7, 3, 3, 7, 3, 9, 7, 3, 7, 9, 1, 3, 9, 3, 3, 9, 1, 7, 9, 1, 3, 7, 9, 7, 3, 3, 3, 7, 9, 1, 7, 1, 7, 9, 3, 9, 3, 9, 7, 1, 3, 7, 1, 3, 7, 3, 7, 9, 1, 3, 7, 1, 7, 7, 9, 1, 7, 1, 7, 3, 1, 7, 3, 9, 1, 3, 7, 1, 3, 3, 9, 1, 7, 1, 1, 7, 9, 3, 9, 1, 7, 9, 3, 1, 1, 3, 9, 1, 3, 9, 1, 3, 1, 3, 9, 3, 1, 3, 7, 1, 7, 3, 7, 1, 9, 9, 7, 7, 1, 3, 3, 1, 3, 9, 1, 7, 9, 3, 3, 3, 7, 9, 1, 3, 9, 7, 7, 3, 7, 3, 9, 9, 9, 1, 7, 3, 7, 9, 9, 1, 7, 1, 3, 7, 1, 9, 9, 3, 9, 1, 7, 1, 7, 9, 7, 9, 3, 7, 1, 3, 3, 7, 1, 9, 1, 9, 7, 3, 9, 7, 1, 7, 1, 1, 3, 3, 1, 3, 1, 7, 9, 9, 1, 7, 7, 7, 3, 9, 3, 1, 7, 1, 3, 9, 7, 3, 3, 9, 7, 9, 1, 9, 9, 9, 1, 7, 1, 7, 9, 1, 3, 7, 3, 9, 9, 3, 9, 3, 9, 7, 9, 1, 1, 3, 9, 1, 9, 9, 1, 7, 1, 3, 7, 3, 1, 9, 3, 7, 7, 3, 7, 9, 7, 9, 1, 3, 9, 3, 9, 7, 3, 9, 3, 7, 1, 3, 7, 9, 9, 9, 1, 7, 9, 9, 1, 7, 3, 1, 3, 7, 1, 7, 3, 7, 3, 9, 9, 1, 1, 7, 9, 3, 3, 7, 1, 1, 3, 7, 1, 9, 3, 7, 1, 1, 7, 9, 7, 3, 7, 1, 9, 3, 7, 7, 3, 3, 7, 3, 9, 1, 3, 7, 7, 9, 7, 3, 7, 3, 9, 7, 9, 1, 3, 9, 3, 7, 1, 7, 9, 1, 3, 9, 1, 3, 7, 9, 7, 9, 1, 7, 9, 1, 1, 7, 1, 3, 7, 1, 7, 9, 7, 1, 9, 9, 9, 3, 9, 3, 7, 1, 3, 1, 7, 1, 7, 1, 3, 9, 3, 1, 9, 3, 1, 9, 1, 7, 1, 3, 3, 9, 7, 7, 9, 1, 7, 7, 3, 1, 3, 7, 1, 7, 3, 7, 7, 9, 3, 9, 3, 7, 9, 3, 1, 3, 9, 3, 1, 3, 9, 1, 1, 7, 1, 1, 9, 3, 3, 3, 1, 3, 3, 9, 9, 3, 9, 1, 3, 9, 1, 7, 1, 7, 1, 7, 3, 1, 3, 7, 9, 1, 3, 1, 1, 7, 9, 3, 7, 3, 9, 9, 7, 3, 3, 1, 7, 9, 7, 3, 9, 1, 9, 1, 3, 7, 9, 7, 1, 7, 1, 1, 3, 1, 1, 9, 7, 3, 1, 7, 7, 9, 3, 9, 1, 9, 9, 7, 9, 7, 7, 3, 7, 9, 9, 1, 3, 7, 3, 1, 3, 3, 1, 9, 1, 9, 1, 7, 3, 9, 3, 9, 1, 3, 9, 7, 3, 7, 1, 3, 9, 9, 7, 1, 1, 3, 1, 3, 1, 1, 7, 9, 1, 1, 3, 1, 3, 7, 3, 9, 7, 7, 1, 9, 7, 7, 3, 1, 3, 7, 9, 3, 9, 1, 3, 7, 1, 7, 3, 7, 3, 7, 7, 7, 1, 3, 9, 1, 1, 3, 9, 1, 9, 3, 7, 9, 1, 1, 7, 9, 9, 1, 3, 9, 3, 7, 7, 9, 7, 3, 7, 9, 1, 3, 7, 7, 3, 3, 3, 7, 9, 9, 1, 9, 1, 9, 1, 3, 1, 7, 9, 3, 1, 1, 3, 7, 3, 9, 1, 1, 3, 9, 1, 7, 3, 3, 1, 3, 1, 3, 9, 7, 1, 7, 9, 9, 9, 1, 7, 1, 7, 9, 7, 1, 9, 3, 7, 7, 7, 9, 3, 7, 9, 9, 3, 1, 1, 3, 7, 9, 9, 9, 3, 1, 7, 9, 3, 1, 7, 7, 1, 9, 1, 7, 3, 9, 1, 3, 9, 7, 3, 9, 9, 1, 9, 1, 7, 7, 7, 9, 1, 1, 7, 9, 3, 9, 1, 7, 1, 9, 7, 9, 3, 7, 7, 3, 1, 7, 9, 9, 1, 9, 3, 7, 1, 9, 7, 1, 7, 7, 3, 1, 3, 9, 1, 7, 9, 1, 3, 7, 3, 1, 3, 1, 7, 3, 9, 1, 3, 9, 3, 9, 9, 3, 9, 7, 9, 7, 9, 3, 1, 3, 3, 7, 9, 9, 7, 7, 9, 1, 7, 1, 9, 1, 7, 3, 3, 1, 3, 9, 1, 3, 1, 9, 1, 7, 7, 7, 9, 9, 7, 3, 9, 3, 1, 9, 7, 1, 1, 3, 9, 3, 1, 1, 7, 9, 1, 3, 7, 9, 1, 3, 7, 7, 1, 7, 7, 3, 3, 7, 1, 9, 3, 3, 9, 7, 3, 9, 3, 1, 7, 9, 7, 9, 1, 1, 3, 9, 3, 9, 1, 1, 9, 7, 1, 3, 7, 3, 3, 7, 3, 9, 7, 9, 9, 7, 3, 9, 1, 7, 3, 1, 7, 9, 1, 7, 1, 9, 7, 9, 1, 3, 3, 1, 7, 9, 9, 7, 1, 3, 9, 3, 7, 1, 9, 1, 1, 7, 9, 1, 3, 1, 1, 9, 3, 7, 9, 1, 7, 7, 3, 9, 3, 7, 9, 1, 9, 9, 1, 3, 3, 9, 7, 3, 7, 9, 1, 1, 9, 7, 9, 9, 1, 7, 3, 9, 7, 9, 3, 9, 3, 1, 3, 9, 3, 7, 9, 9, 1, 3, 3, 9, 1, 7, 3, 7, 1, 3, 9, 9, 9, 7, 7, 7, 9, 1, 1, 3, 7, 9, 9, 1, 7, 1, 1, 9, 1, 9, 1, 3, 9, 7, 9, 3, 9, 7, 3, 7, 3, 7, 3, 1, 3, 1, 7, 9, 1, 7, 3, 3, 9, 1, 3, 3, 9, 1, 9, 9, 1, 7, 1, 3, 3, 9, 1, 3, 7, 1, 3, 7, 9, 7, 9, 7, 9, 1, 1, 7, 9, 3, 1, 7, 1, 9, 7, 1, 7, 9, 7, 9, 7, 1, 3, 9, 7, 9, 9, 3, 3, 7, 3, 1, 7, 7, 1, 1, 3, 7, 3, 9, 7, 1, 3, 9, 1, 3, 1, 1, 9, 9, 9, 1, 7, 3, 9, 1, 3, 9, 1, 9, 9, 1, 1, 1, 7, 3, 9, 7, 1, 7, 9, 9, 1, 9, 3, 1, 7, 3, 7, 3, 9, 7, 7, 9, 3, 7, 9, 7, 1, 7, 1, 3, 9, 7, 7, 3, 3, 7, 3, 3, 1, 1, 9, 9, 1, 9, 7, 9, 1, 9, 3, 1, 1, 1, 9, 3, 7, 9, 3, 1, 7, 1, 9, 9, 1, 7, 3, 1, 3, 9, 1, 3, 3, 3, 3, 1, 7, 9, 1, 7, 9, 9, 1, 9, 1, 1, 7, 9, 9, 3, 3, 9, 9, 1, 1, 9, 7, 3, 9, 3, 7, 7, 3, 7, 7, 1, 3, 1, 7, 7, 7, 1, 3, 7, 3, 1, 1, 3, 7, 9, 3, 9, 7, 1, 3, 9, 7, 1, 3, 7, 3, 9, 1, 7, 3, 9, 1, 1, 1, 9, 3, 1, 7, 7, 3, 9, 3, 7, 3, 3, 7, 9, 1, 3, 9, 1, 3, 7, 9, 3, 9, 1, 9, 3, 9, 1, 7, 9, 3, 1, 3, 9, 7, 1, 9, 7, 9, 7, 3, 7, 9, 9, 1, 3, 7, 1, 3, 7, 9, 1, 7, 3, 7, 9, 3, 1, 7, 3, 1, 7, 7, 1, 3, 9, 1, 3, 7, 9, 3, 1, 3, 3, 9, 1, 7, 1, 3, 3, 9, 1, 7, 1, 7, 3, 9, 1, 9, 7, 3, 3, 9, 3, 3, 9, 1, 7, 1, 3, 7, 9, 7, 1, 7, 9, 1, 7, 3, 7, 1, 7, 9, 9, 1, 3, 3, 3, 9, 3, 9, 1, 3, 9, 1, 7, 9, 3, 7, 9, 1, 1, 3, 9, 9, 9, 7, 1, 7, 3, 9, 7, 1, 7, 9, 7, 9, 7, 9, 9, 3, 7, 9, 9, 1, 3, 9, 1, 1, 9, 7, 3, 1, 3, 7, 9, 3, 7, 7, 3, 1, 1, 3, 7, 3, 3, 9, 1, 7, 9, 1, 7, 3, 3, 9, 1, 7, 3, 1, 3, 7, 1, 3, 3, 7, 3, 9, 1, 7, 1, 1, 9, 9, 1, 1, 3, 9, 3, 9, 9, 1, 9, 1, 3, 7, 9, 1, 7, 7, 9, 1, 3, 7, 1, 7, 9, 3, 9, 7, 7, 9, 3, 1, 7, 1, 9, 1, 1, 1, 1, 9, 7, 3, 9, 1, 3, 9, 1, 1, 3, 3, 7, 7, 1, 1, 7, 9, 3, 3, 7, 7, 9, 1, 3, 7, 9, 9, 7, 1, 3, 7, 7, 3, 1, 9, 1, 1, 3, 9, 3, 9, 3, 1, 7, 7, 1, 7, 3, 7, 7, 9, 9, 7, 3, 1, 7, 3, 7, 1, 7, 3, 9, 1, 3, 9, 9, 1, 3, 3, 7, 3, 1, 9, 1, 7, 1, 7, 9, 7, 3, 9, 7, 9, 7, 1, 7, 3, 1, 7, 7, 3, 1, 3, 9, 9, 7, 9, 3, 7, 7, 9, 3, 1, 7, 1, 7, 9, 1, 3, 9, 1, 7, 9, 3, 9, 9, 3, 7, 1, 3, 9, 9, 9, 7, 3, 9, 7, 7, 1, 3, 1, 3, 3, 1, 9, 3, 9, 7, 3, 9, 1, 1, 9, 7, 7, 1, 3, 1, 3, 9, 3, 7, 9, 7, 7, 9, 7, 7, 3, 3, 7, 3, 7, 1, 3, 3, 1, 9, 7, 1, 7, 3, 9, 1, 3, 7, 3, 7, 1, 1, 9, 9, 7, 3, 1, 7, 9, 3, 7, 9, 9, 7, 9, 1, 9, 3, 7, 1, 9, 1, 1, 9, 3, 7, 3, 7, 9, 3, 7, 9, 9, 3, 9, 3, 1, 3, 1, 3, 7, 1, 9, 3, 9, 7, 1, 1, 9, 1, 3, 1, 3, 9, 7, 7, 9, 1, 7, 3, 7, 7, 3, 7, 9, 9, 1, 9, 3, 9, 1, 9, 3, 7, 7, 9, 1, 9, 3, 1, 1, 3, 7, 9, 1, 1, 3, 3, 7, 3, 9, 7, 3, 9, 1, 7, 1, 7, 1, 7, 1, 3, 7, 9, 9, 3, 1, 7, 9, 3, 1, 7, 3, 1, 7, 9, 1, 9, 3, 9, 7, 9, 1, 3, 7, 1, 3, 1, 7, 3, 1, 3, 7, 1, 7, 9, 3, 9, 3, 9, 1, 1, 9, 1, 7, 1, 3, 7, 1, 9, 1, 7, 7, 9, 7, 3, 3, 9, 1, 3, 7, 9, 3, 1, 7, 1, 9, 7, 3, 7, 9, 7, 3, 9, 9, 1, 7, 9, 1, 3, 7, 3, 7, 3, 9, 3, 1, 9, 3, 1, 7, 7, 3, 9, 1, 1, 3, 9, 1, 7, 7, 9, 9, 7, 1, 3, 3, 1, 7, 1, 1, 3, 9, 1, 9, 3, 9, 7, 1, 1, 3, 9, 7, 9, 3, 9, 7, 3, 7, 1, 7, 3, 9, 9, 1, 7, 1, 9, 7, 9, 1, 3, 9, 3, 9, 7, 3, 3, 1, 3, 7, 9, 7, 7, 3, 7, 1, 3, 1, 7, 9, 1, 3, 9, 7, 3, 1, 1, 7, 1, 3, 9, 7, 1, 7, 1, 3, 9, 1, 7, 3, 7, 3, 3, 1, 7, 9, 1, 7, 1, 3, 3, 7, 1, 3, 9, 1, 9, 3, 7, 1, 7, 7, 1, 9, 7, 3, 7, 3, 1, 9, 1, 1, 3, 7, 3, 1, 9, 1, 3, 1, 9, 3, 1, 7, 1, 3, 1, 7, 9, 9, 3, 9, 3, 7, 7, 9, 7, 9, 7, 7, 9, 1, 9, 3, 1, 3, 3, 9, 1, 9, 3, 9, 9, 3, 7, 1, 7, 9, 3, 1, 3, 3, 7, 9, 3, 7, 7, 1, 3, 7, 9, 9, 1, 1, 9, 9, 1, 3, 9, 3, 1, 3, 1, 7, 3, 1, 9, 1, 1, 3, 7, 9, 7, 1, 3, 3, 7, 7, 3, 1, 3, 7, 3, 9, 7, 3, 1, 9, 3, 1, 7, 9, 3, 1, 3, 1, 7, 7, 3, 9, 3, 1, 3, 9, 3, 7, 1, 3, 9, 3, 7, 7, 1, 7, 9, 3, 3, 9, 3, 3, 7, 9, 7, 3, 1, 7, 9, 1, 1, 9, 1, 7, 3, 9, 7, 3, 1, 1, 9, 9, 9, 1, 1, 7, 1, 3, 9, 1, 3, 7, 9, 3, 1, 7, 9, 3, 1, 1, 3, 7, 9, 3, 9, 1, 7, 9, 7, 1, 7, 3, 7, 7, 9, 1, 7, 9, 7, 1, 3, 3, 7, 9, 7, 3, 9, 1, 1, 9, 1, 1, 7, 1, 1, 1, 9, 1, 3, 7, 7, 3, 9, 1, 7, 1, 3, 1, 1, 3, 7, 9, 9, 7, 9, 3, 9, 7, 7, 3, 9, 7, 1, 3, 9, 1, 7, 1, 3, 7, 3, 7, 3, 1, 7, 1, 3, 7, 9, 9, 7, 3, 7, 9, 1, 3, 9, 1, 7, 9, 3, 9, 7, 1, 3, 3, 1, 9, 1, 3, 7, 7, 1, 3, 3, 7, 3, 9, 1, 9, 9, 9, 3, 7, 7, 7, 1, 7, 3, 1, 3, 7, 1, 3, 9, 1, 7, 7, 3, 9, 7, 9, 3, 9, 3, 9, 7, 1, 1, 3, 7, 1, 7, 7, 9, 1, 1, 3, 7, 1, 3, 9, 7, 7, 3, 9, 7, 3, 1, 1, 3, 9, 3, 3, 7, 1, 7, 7, 9, 7, 3, 9, 1, 3, 7, 1, 7, 9, 3, 9, 1, 3, 9, 7, 7, 9, 1, 1, 9, 9, 1, 7, 1, 7, 9, 1, 3, 7, 7, 3, 9, 1, 7, 7, 1, 7, 9, 7, 1, 3, 3, 9, 3, 1, 7, 1, 7, 9, 9, 3, 1, 1, 7, 1, 7, 3, 7, 1, 7, 9, 9, 1, 7, 3, 7, 9, 9, 7, 1, 3, 7, 1, 9, 1, 9, 3, 7, 9, 3, 1, 1, 9, 3, 3, 9, 7, 1, 7, 3, 9, 3, 7, 7, 7, 9, 3, 1, 1, 9, 9, 9, 7, 9, 7, 3, 9, 3, 9, 7, 1, 3, 7, 9, 7, 9, 9, 7, 7, 1, 7, 9, 3, 3, 7, 3, 1, 1, 9, 1, 3, 9, 7, 3, 9, 3, 1, 7, 3, 3, 1, 1, 3, 3, 9, 7, 7, 3, 3, 7, 9, 1, 7, 1, 1, 7, 1, 3, 7, 9, 7, 7, 3, 7, 3, 9, 1, 7, 9, 1, 7, 1, 9, 3, 9, 1, 3, 7, 3, 1, 7, 9, 1, 3, 9, 1, 7, 7, 1, 3, 9, 3, 3, 3, 7, 7, 9, 9, 1, 1, 3, 7, 1, 7, 1, 3, 9, 7, 1, 7, 3, 1, 3, 9, 1, 7, 1, 3, 9, 9, 7, 1, 3, 7, 9, 1, 3, 9, 9, 3, 1, 9, 1, 7, 9, 1, 7, 1, 7, 7, 3, 9, 3, 9, 7, 7, 3, 9, 3, 9, 1, 7, 3, 7, 1, 1, 9, 3, 1, 3, 1, 7, 3, 9, 1, 9, 9, 9, 9, 1, 9, 9, 7, 1, 1, 3, 1, 7, 7, 1, 3, 3, 9, 7, 3, 9, 9, 7, 3, 3, 1, 7, 9, 3, 7, 9, 3, 7, 3, 7, 3, 9, 1, 1, 3, 1, 3, 3, 1, 9, 7, 9, 1, 3, 7, 9, 1, 9, 3, 9, 1, 1, 7, 1, 9, 9, 1, 7, 7, 9, 7, 9, 1, 7, 9, 1, 3, 7, 3, 9, 1, 1, 7, 1, 3, 3, 9, 3, 1, 3, 7, 7, 1, 9, 3, 3, 1, 7, 3, 1, 7, 1, 3, 7, 9, 7, 9, 3, 1, 1, 7, 3, 9, 1, 7, 3, 9, 3, 1, 3, 1, 7, 7, 3, 3, 1, 7, 3, 9, 3, 9, 3, 7, 3, 7, 7, 9, 1, 1, 9, 9, 3, 1, 1, 3, 3, 9, 9, 3, 9, 1, 7, 1, 7, 9, 1, 3, 7, 3, 3, 7, 3, 9, 7, 1, 1, 7, 9, 3, 9, 7, 1, 1, 7, 9, 1, 7, 7, 9, 9, 3, 9, 3, 1, 3, 1, 7, 9, 9, 3, 1, 7, 1, 9, 9, 3, 1, 1, 1, 3, 3, 9, 7, 1, 7, 3, 7, 1, 1, 7, 1, 9, 1, 7, 7, 3, 7, 9, 3, 9, 9, 1, 7, 7, 1, 3, 9, 9, 7, 9, 3, 1, 3, 1, 7, 3, 3, 9, 1, 7, 9, 7, 3, 7, 3, 9, 7, 3, 9, 3, 1, 9, 1, 7, 1, 7, 3, 9, 1, 7, 9, 7, 1, 7, 7, 3, 9, 1, 7, 3, 9, 1, 1, 7, 9, 1, 9, 3, 1, 3, 7, 9, 7, 1, 9, 3, 9, 1, 7, 3, 9, 1, 9, 3, 7, 3, 9, 1, 9, 1, 7, 7, 9, 9, 1, 7, 7, 9, 9, 1, 1, 9, 1, 3, 3, 1, 9, 7, 3, 7, 1, 3, 3, 9, 3, 1, 3, 3, 3, 1, 1, 7, 9, 3, 9, 1, 9, 9, 1, 1, 3, 1, 7, 3, 7, 3, 7, 1, 9, 7, 3, 9, 1, 7, 7, 7, 9, 7, 9, 1, 9, 1, 1, 7, 3, 9, 9, 3, 9, 3, 9, 1, 3, 9, 7, 1, 9, 1, 9, 1, 1, 7, 7, 9, 1, 7, 9, 1, 3, 9, 1, 3, 1, 9, 3, 7, 1, 9, 9, 3, 1, 7, 9, 9, 1, 3, 7, 9, 3, 1, 1, 7, 1, 3, 3, 7, 3, 7, 9, 3, 1, 1, 9, 7, 1, 9, 1, 7, 3, 9, 9, 7, 7, 3, 3, 7, 9, 1, 7, 9, 1, 1, 3, 7, 3, 1, 7, 1, 3, 7, 7, 7, 3, 9, 3, 1, 3, 7, 7, 9, 7, 3, 1, 1, 9, 1, 9, 7, 3, 9, 9, 1, 7, 3, 9, 1, 3, 9, 1, 7, 9, 3, 7, 9, 9, 1, 7, 9, 3, 1, 9, 1, 3, 9, 9, 1, 3, 1, 7, 3, 7, 9, 7, 1, 1, 1, 3, 3, 1, 7, 3, 7, 9, 3, 9, 1, 7, 7, 9, 3, 9, 1, 3, 1, 7, 3, 3, 9, 7, 9, 9, 3, 7, 9, 9, 3, 7, 3, 7, 7, 9, 7, 9, 3, 9, 7, 3, 1, 3, 9, 9, 1, 7, 1, 9, 1, 3, 7, 3, 9, 7, 1, 3, 9, 9, 3, 7, 1, 3, 9, 3, 9, 7, 9, 3, 7, 1, 7, 9, 9, 1, 3, 9, 7, 9, 7, 1, 3, 7, 1, 7, 1, 1, 3, 9, 1, 7, 3, 7, 3, 9, 3, 1, 9, 1, 3, 7, 3, 7, 1, 9, 7, 3, 7, 9, 1, 9, 9, 1, 7, 1, 7, 7, 1, 3, 9, 3, 9, 3, 1, 9, 1, 7, 1, 9, 1, 7, 3, 1, 1, 3, 9, 1, 3, 1, 7, 1, 7, 3, 9, 1, 7, 9, 7, 1, 3, 1, 7, 9, 7, 3, 9, 7, 9, 9, 7, 9, 3, 1, 1, 1, 3, 7, 9, 1, 3, 1, 7, 1, 3, 7, 7, 7, 9, 9, 7, 3, 7, 9, 1, 3, 7, 9, 3, 3, 1, 7, 1, 7, 7, 1, 3, 9, 1, 3, 3, 9, 7, 3, 1, 9, 7, 1, 9, 3, 7, 3, 9, 9, 1, 9, 1, 1, 7, 1, 3, 9, 7, 9, 3, 1, 7, 9, 1, 3, 3, 1, 3, 1, 7, 9, 7, 9, 7, 1, 3, 1, 9, 7, 3, 9, 7, 1, 7, 9, 1, 9, 3, 9, 1, 1, 3, 1, 9, 3, 1, 3, 9, 3, 1, 3, 3, 9, 9, 9, 1, 7, 9, 3, 7, 1, 1, 1, 9, 1, 3, 7, 1, 3, 7, 9, 1, 7, 1, 3, 7, 3, 7, 9, 1, 9, 9, 1, 3, 1, 1, 1, 7, 3, 7, 9, 1, 9, 7, 3, 7, 7, 9, 1, 3, 9, 1, 3, 7, 3, 3, 7, 1, 9, 3, 1, 9, 9, 1, 1, 9, 3, 3, 9, 1, 3, 9, 1, 7, 1, 7, 7, 3, 1, 1, 7, 9, 1, 3, 7, 7, 1, 7, 9, 1, 7, 7, 7, 7, 3, 7, 7, 3, 9, 3, 7, 9, 9, 1, 7, 1, 7, 1, 9, 9, 3, 1, 7, 7, 3, 1, 7, 1, 3, 7, 3, 1, 7, 1, 9, 3, 9, 3, 9, 1, 9, 7, 1, 3, 7, 9, 1, 1, 7, 3, 7, 3, 9, 7, 3, 1, 3, 7, 3, 1, 1, 1, 9, 3, 1, 1, 3, 9, 9, 3, 9, 1, 3, 1, 7, 9, 3, 7, 1, 7, 7, 9, 1, 3, 7, 7, 3, 1, 3, 9, 1, 9, 9, 3, 9, 7, 9, 7, 1, 3, 1, 3, 1, 1, 3, 9, 3, 7, 7, 9, 7, 1, 7, 9, 9, 7, 3, 3, 7, 3, 9, 9, 1, 7, 9, 1, 3, 1, 1, 7, 7, 1, 1, 9, 3, 1, 3, 9, 7, 7, 1, 7, 3, 3, 9, 1, 7, 3, 7, 9, 9, 1, 9, 9, 1, 3, 1, 9, 3, 3, 1, 9, 9, 7, 7, 1, 3, 3, 3, 7, 3, 9, 1, 9, 1, 7, 3, 7, 1, 9, 3, 3, 7, 9, 1, 7, 9, 3, 9, 7, 3, 1, 3, 3, 9, 7, 1, 3, 1, 3, 7, 9, 3, 1, 3, 7, 9, 1, 7, 3, 1, 7, 9, 1, 3, 9, 3, 7, 9, 1, 9, 3, 9, 1, 3, 7, 9, 1, 1, 7, 3, 3, 1, 1, 7, 9, 1, 3, 9, 1, 1, 9, 7, 3, 7, 9, 3, 7, 9, 9, 7, 1, 9, 9, 1, 7, 3, 9, 3, 3, 7, 9, 1, 9, 9, 9, 7, 9, 1, 9, 9, 1, 3, 1, 1, 3, 3, 9, 7, 9, 3, 9, 7, 9, 1, 1, 7, 3, 3, 9, 7, 1, 9, 3, 9, 1, 3, 7, 3, 1, 3, 9, 9, 3, 9, 1, 7, 1, 7, 3, 9, 3, 7, 3, 7, 9, 7, 9, 1, 7, 3, 9, 7, 3, 9, 9, 9, 3, 3, 7, 7, 3, 9, 7, 1, 1, 9, 3, 9, 3, 9, 3, 7, 9, 1, 1, 3, 9, 3, 9, 3, 3, 7, 9, 9, 1, 7, 1, 3, 7, 1, 9, 3, 7, 7, 9, 1, 7, 9, 1, 3, 7, 9, 1, 1, 1, 3, 1, 7, 1, 7, 3, 7, 7, 9, 1, 1, 7, 3, 1, 3, 7, 3, 7, 3, 9, 3, 3, 1, 9, 7, 9, 1, 7, 7, 9, 1, 3, 7, 9, 1, 1, 3, 9, 7, 3, 9, 3, 7, 7, 1, 3, 9, 1, 1, 9, 7, 3, 7, 3, 7, 1, 7, 9, 1, 3, 3, 7, 9, 1, 7, 9, 1, 3, 7, 3, 7, 7, 9, 7, 7, 9, 1, 9, 7, 9, 3, 1, 9, 9, 9, 1, 3, 1, 7, 9, 1, 3, 1, 7, 3, 1, 3, 9, 1, 7, 3, 1, 7, 3, 7, 1, 9, 7, 1, 9, 1, 7, 7, 3, 7, 9, 3, 1, 9, 1, 3, 7, 9, 1, 7, 3, 7, 3, 9, 3, 7, 1, 7, 7, 9, 3, 7, 7, 3, 7, 1, 7, 1, 9, 7, 1, 7, 9, 1, 1, 1, 9, 3, 1, 7, 9, 3, 9, 9, 9, 1, 3, 7, 1, 3, 7, 1, 3, 3, 9, 1, 7, 7, 9, 3, 9, 3, 7, 9, 9, 1, 3, 3, 3, 9, 1, 3, 1, 9, 3, 1, 3, 7, 9, 3, 7, 1, 1, 9, 3, 1, 7, 7, 9, 1, 7, 3, 3, 9, 1, 1, 3, 1, 7, 1, 3, 9, 1, 9, 7, 1, 3, 1, 1, 9, 1, 7, 7, 3, 9, 1, 3, 9, 7, 3, 7, 7, 3, 9, 7, 9, 3, 9, 7, 3, 1, 3, 7, 1, 3, 9, 9, 7, 3, 1, 7, 3, 9, 3, 3, 7, 1, 3, 9, 9, 1, 3, 9, 7, 7, 3, 7, 1, 7, 1, 3, 3, 1, 3, 7, 1, 1, 3, 3, 9, 3, 9, 7, 3, 7, 3, 1, 7, 1, 3, 7, 9, 9, 1, 3, 9, 9, 3, 1, 1, 9, 1, 9, 9, 3, 7, 3, 7, 7, 3, 1, 3, 9, 3, 9, 1, 1, 3, 7, 7, 3, 1, 7, 1, 1, 3, 9, 7, 3, 7, 7, 9, 7, 3, 7, 9, 1, 7, 9, 9, 1, 7, 1, 3, 9, 9, 1, 7, 7, 9, 1, 7, 3, 7, 9, 3, 9, 1, 7, 1, 3, 9, 7, 1, 3, 1, 7, 9, 3, 1, 1, 7, 3, 9, 3, 1, 1, 7, 3, 9, 7, 1, 9, 1, 9, 9, 7, 3, 1, 9, 1, 1, 7, 1, 7, 3, 9, 9, 9, 3, 1, 1, 7, 9, 1, 1, 7, 1, 7, 9, 9, 7, 7, 9, 7, 1, 9, 3, 9, 3, 7, 9, 1, 1, 3, 7, 3, 3, 3, 1, 7, 1, 9, 1, 3, 3, 1, 3, 7, 9, 3, 9, 3, 1, 7, 3, 3, 7, 1, 9, 1, 9, 3, 3, 7, 1, 3, 1, 3, 1, 7, 1, 7, 3, 7, 9, 7, 1, 9, 7, 9, 7, 1, 3, 9, 1, 9, 3, 3, 9, 3, 1, 9, 9, 1, 7, 3, 1, 9, 3, 7, 3, 7, 1, 9, 3, 9, 9, 7, 9, 9, 7, 7, 9, 3, 9, 1, 3, 1, 9, 1, 7, 1, 3, 7, 3, 7, 3, 7, 9, 7, 1, 3, 9, 3, 1, 1, 7, 1, 3, 9, 9, 7, 9, 3, 7, 1, 7, 7, 7, 9, 7, 1, 1, 7, 9, 1, 9, 3, 9, 9, 7, 9, 9, 3, 9, 1, 7, 9, 7, 9, 1, 3, 9, 3, 1, 9, 3, 1, 3, 9, 9, 1, 3, 7, 7, 3, 7, 3, 9, 1, 7, 9, 3, 1, 3, 9, 1, 7, 1, 7, 9, 9, 9, 7, 7, 3, 7, 3, 9, 1, 3, 7, 3, 7, 9, 9, 3, 7, 9, 1, 3, 7, 9, 7, 1, 7, 1, 7, 3, 9, 7, 1, 7, 3, 7, 1, 3, 3, 1, 7, 3, 7, 1, 1, 9, 1, 1, 3, 9, 9, 1, 9, 1, 7, 7, 3, 1, 3, 7, 3, 3, 7, 1, 7, 9, 1, 7, 3, 9, 9, 7, 1, 3, 7, 9, 3, 1, 9, 1, 7, 9, 9, 1, 3, 9, 1, 3, 7, 7, 9, 3, 1, 7, 9, 1, 7, 7, 3, 7, 9, 1, 9, 1, 1, 7, 9, 1, 3, 7, 3, 3, 1, 7, 9, 1, 3, 3, 7, 9, 1, 1, 3, 9, 1, 1, 7, 1, 9, 9, 3, 1, 1, 9, 3, 7, 9, 3, 9, 9, 9, 7, 1, 9, 7, 9, 7, 3, 9, 9, 7, 1, 7, 9, 1, 9, 3, 1, 9, 7, 7, 1, 3, 3, 3, 9, 7, 3, 3, 7, 9, 3, 9, 9, 1, 3, 7, 3, 1, 1, 7, 3, 1, 1, 9, 1, 9, 3, 7, 9, 3, 7, 1, 3, 9, 7, 9, 7, 3, 3, 3, 9, 1, 1, 3, 3, 7, 3, 1, 9, 1, 9, 7, 7, 7, 3, 3, 9, 7, 1, 7, 9, 7, 9, 3, 7, 3, 9, 1, 1, 7, 1, 7, 3, 3, 9, 3, 3, 1, 9, 1, 3, 1, 7, 9, 9, 9, 7, 1, 9, 3, 7, 1, 7, 7, 9, 1, 3, 3, 9, 1, 9, 1, 1, 3, 1, 7, 9, 3, 1, 1, 7, 3, 3, 7, 7, 9, 1, 9, 3, 1, 7, 3, 9, 1, 3, 7, 1, 7, 1, 1, 3, 1, 3, 7, 9, 9, 3, 9, 7, 3, 7, 1, 7, 1, 3, 7, 9, 1, 1, 3, 7, 9, 1, 1, 3, 1, 7, 3, 3, 1, 9, 7, 7, 1, 1, 7, 3, 9, 3, 9, 1, 1, 3, 3, 9, 7, 3, 3, 9, 3, 1, 3, 7, 1, 3, 9, 3, 1, 7, 9, 9, 7, 9, 7, 9, 1, 3, 7, 9, 1, 1, 3, 3, 7, 9, 1, 3, 7, 3, 7, 9, 1, 7, 1, 1, 9, 3, 1, 1, 3, 9, 1, 3, 9, 3, 7, 9, 7, 7, 3, 1, 9, 1, 9, 3, 9, 1, 3, 7, 7, 7, 3, 9, 3, 9, 9, 9, 7, 9, 7, 1, 7, 3, 1, 7, 9, 3, 7, 7, 9, 9, 1, 1, 7, 1, 1, 9, 3, 3, 7, 9, 9, 1, 7, 7, 1, 1, 7, 9, 7, 3, 9, 3, 1, 3, 9, 1, 7, 9, 3, 9, 1, 3, 3, 7, 1, 7, 7, 1, 9, 3, 3, 1, 1, 3, 1, 7, 1, 3, 9, 7, 1, 3, 9, 7, 3, 1, 7, 7, 9, 7, 9, 9, 3, 9, 1, 3, 9, 3, 7, 3, 9, 7, 9, 3, 9, 7, 9, 1, 7, 1, 1, 7, 1, 3, 1, 3, 9, 3, 7, 9, 9, 3, 3, 1, 7, 1, 7, 1, 1, 3, 7, 3, 9, 7, 1, 3, 9, 1, 3, 1, 7, 1, 7, 9, 3, 9, 7, 1, 3, 9, 3, 7, 3, 9, 3, 7, 9, 1, 7, 3, 1, 7, 3, 1, 1, 9, 7, 1, 9, 3, 7, 1, 3, 7, 7, 3, 3, 7, 9, 1, 3, 9, 7, 3, 1, 3, 9, 1, 7, 9, 9, 9, 9, 1, 7, 3, 9, 3, 9, 3, 1, 7, 3, 7, 9, 9, 3, 7, 9, 3, 9, 9, 7, 1, 3, 9, 7, 1, 3, 7, 1, 9, 9, 9, 1, 3, 7, 1, 3, 1, 1, 7, 7, 7, 3, 9, 1, 3, 9, 7, 1, 3, 7, 1, 3, 9, 9, 1, 3, 1, 1, 3, 9, 7, 7, 9, 7, 9, 9, 9, 7, 3, 3, 9, 9, 9, 3, 7, 1, 7, 9, 3, 7, 9, 9, 3, 9, 9, 3, 1, 7, 1, 3, 3, 9, 1, 7, 9, 7, 3, 9, 3, 9, 3, 7, 3, 7, 1, 3, 7, 9, 1, 3, 1, 1, 9, 7, 1, 3, 1, 7, 3, 3, 9, 1, 7, 7, 1, 9, 1, 3, 7, 3, 3, 9, 3, 9, 3, 7, 3, 1, 3, 7, 7, 3, 3, 7, 9, 3, 7, 1, 3, 9, 7, 9, 3, 1, 7, 9, 1, 3, 1, 7, 1, 9, 3, 7, 1, 3, 9, 1, 9, 9, 3, 1, 7, 9, 7, 3, 7, 3, 1, 3, 9, 1, 7, 1, 3, 1, 7, 7, 1, 3, 3, 9, 7, 3, 9, 1, 7, 3, 1, 1, 9, 1, 7, 3, 7, 3, 9, 3, 9, 7, 1, 3, 9, 7, 9, 7, 9, 9, 1, 9, 7, 9, 9, 7, 3, 1, 7, 1, 9, 3, 7, 1, 7, 3, 9, 1, 7, 1, 7, 1, 3, 9, 3, 9, 1, 1, 1, 9, 1, 9, 3, 9, 7, 7, 1, 3, 3, 7, 9, 1, 7, 3, 7, 1, 7, 7, 9, 9, 7, 3, 9, 1, 7, 3, 9, 1, 7, 1, 3, 1, 7, 7, 3, 7, 1, 3, 1, 3, 9, 7, 3, 3, 3, 1, 7, 1, 7, 7, 9, 1, 1, 9, 9, 1, 9, 7, 1, 3, 1, 3, 7, 1, 3, 1, 9, 1, 9, 3, 1, 1, 3, 9, 1, 7, 7, 9, 1, 3, 7, 9, 3, 3, 9, 9, 1, 3, 9, 7, 3, 9, 7, 3, 1, 9, 1, 7, 9, 9, 3, 7, 3, 3, 9, 3, 3, 1, 9, 9, 1, 3, 3, 1, 9, 9, 1, 7, 1, 3, 1, 3, 3, 9, 7, 1, 9, 3, 9, 7, 1, 3, 9, 3, 3, 1, 9, 9, 1, 9, 3, 7, 7, 7, 7, 9, 3, 3, 9, 3, 1, 7, 7, 3, 3, 3, 7, 7, 3, 7, 7, 9, 9, 7, 3, 7, 3, 9, 7, 9, 3, 3, 9, 7, 1, 7, 9, 7, 3, 9, 1, 1, 9, 9, 1, 3, 1, 1, 9, 1, 3, 9, 7, 7, 3, 9, 3, 7, 9, 1, 3, 9, 3, 1, 3, 7, 1, 7, 7, 1, 7, 7, 9, 3, 9, 7, 9, 3, 9, 3, 7, 1, 3, 9, 3, 7, 9, 1, 7, 9, 1, 7, 9, 1, 1, 7, 9, 9, 7, 1, 3, 7, 1, 1, 7, 9, 7, 1, 9, 9, 1, 7, 9, 3, 3, 7, 3, 7, 3, 1, 7, 3, 9, 1, 3, 3, 3, 7, 3, 1, 1, 3, 9, 1, 1, 7, 7, 3, 9, 3, 7, 7, 3, 9, 7, 9, 3, 7, 9, 9, 1, 9, 7, 9, 1, 7, 1, 7, 3, 1, 1, 9, 7, 7, 1, 1, 7, 7, 3, 7, 9, 1, 9, 1, 3, 3, 9, 3, 7, 9, 1, 9, 3, 3, 7, 1, 3, 7, 3, 9, 1, 3, 9, 9, 3, 1, 7, 1, 7, 9, 3, 7, 9, 3, 1, 9, 9, 7, 9, 1, 7, 9, 3, 7, 7, 3, 7, 9, 9, 7, 1, 1, 3, 7, 1, 3, 9, 1, 7, 7, 3, 9, 7, 9, 1, 1, 3, 1, 7, 1, 9, 3, 7, 3, 7, 3, 1, 9, 9, 1, 1, 3, 7, 1, 3, 1, 1, 7, 3, 3, 1, 7, 9, 7, 3, 3, 7, 1, 9, 1, 9, 3, 7, 9, 3, 9, 1, 1, 1, 3, 9, 1, 3, 3, 3, 9, 7, 9, 7, 1, 3, 9, 7, 1, 7, 3, 3, 7, 1, 7, 1, 3, 3, 9, 3, 9, 1, 9, 9, 1, 3, 9, 1, 1, 9, 7, 1, 3, 9, 1, 7, 3, 3, 7, 3, 1, 9, 9, 1, 1, 7, 1, 1, 7, 3, 1, 7, 1, 3, 9, 7, 9, 9, 9, 3, 9, 9, 1, 7, 3, 9, 7, 3, 7, 9, 1, 3, 7, 3, 1, 7, 9, 1, 3, 3, 3, 9, 3, 9, 7, 7, 1, 7, 7, 3, 1, 3, 7, 9, 9, 1, 9, 7, 3, 1, 1, 3, 9, 3, 7, 1, 7, 9, 9, 1, 7, 9, 9, 7, 3, 3, 3, 1, 7, 3, 7, 3, 3, 7, 7, 3, 7, 9, 7, 7, 9, 9, 1, 7, 1, 3, 9, 7, 3, 3, 7, 7, 9, 3, 9, 1, 7, 7, 9, 3, 7, 7, 1, 9, 9, 1, 9, 3, 1, 3, 1, 7, 1, 9, 3, 7, 1, 7, 3, 9, 7, 1, 7, 1, 7, 1, 9, 7, 3, 9, 1, 1, 3, 1, 3, 7, 9, 7, 9, 9, 1, 7, 9, 7, 9, 9, 1, 3, 9, 1, 3, 9, 3, 9, 1, 7, 9, 9, 1, 1, 7, 1, 1, 9, 1, 3, 7, 3, 7, 3, 1, 1, 3, 1, 9, 1, 7, 9, 1, 3, 9, 9, 1, 7, 7, 1, 1, 9, 7, 1, 3, 9, 9, 1, 1, 3, 3, 1, 7, 1, 7, 3, 9, 7, 7, 1, 7, 7, 9, 3, 7, 1, 7, 7, 9, 1, 7, 1, 3, 3, 7, 9, 9, 1, 3, 9, 3, 9, 1, 3, 9, 7, 3, 7, 9, 3, 9, 7, 9, 3, 9, 3, 9, 3, 9, 1, 1, 3, 1, 1, 3, 9, 1, 7, 1, 9, 1, 1, 7, 3, 9, 9, 7, 9, 1, 1, 9, 1, 7, 1, 7, 9, 3, 3, 9, 3, 1, 7, 7, 9, 9, 1, 7, 1, 1, 7, 3, 7, 7, 9, 3, 7, 7, 1, 7, 1, 7, 3, 9, 9, 7, 1, 1, 9, 3, 7, 7, 9, 3, 7, 3, 3, 9, 1, 7, 3, 9, 1, 1, 7, 3, 3, 7, 9, 3, 3, 3, 9, 9, 1, 7, 7, 3, 3, 1, 1, 9, 7, 9, 3, 7, 1, 7, 3, 9, 3, 1, 1, 9, 9, 3, 7, 1, 3, 7, 3, 7, 1, 3, 7, 9, 1, 7, 7, 1, 9, 9, 1, 7, 3, 9, 3, 9, 7, 1, 3, 7, 1, 1, 7, 3, 9, 3, 7, 1, 3, 9, 1, 3, 9, 3, 1, 3, 9, 1, 7, 1, 3, 9, 9, 9, 9, 1, 7, 3, 1, 1, 7, 3, 1, 3, 7, 9, 1, 7, 7, 7, 1, 9, 3, 3, 3, 7, 9, 9, 1, 7, 1, 3, 1, 3, 7, 1, 3, 1, 3, 3, 7, 9, 1, 7, 7, 3, 9, 9, 1, 7, 1, 9, 1, 7, 1, 3, 9, 9, 7, 1, 9, 3, 7, 7, 9, 3, 7, 9, 1, 9, 1, 7, 7, 1, 9, 3, 7, 3, 7, 1, 3, 9, 1, 3, 7, 9, 9, 1, 1, 9, 1, 9, 3, 7, 9, 3, 3, 3, 9, 1, 3, 3, 1, 7, 9, 9, 9, 7, 1, 7, 3, 1, 3, 7, 1, 7, 3, 7, 1, 1, 9, 9, 1, 3, 7, 7, 3, 7, 1, 7, 9, 3, 9, 1, 7, 1, 1, 3, 9, 9, 1, 3, 3, 1, 9, 7, 3, 3, 7, 3, 9, 7, 3, 9, 1, 7, 3, 9, 1, 3, 7, 9, 3, 9, 7, 1, 3, 9, 3, 7, 9, 3, 1, 7, 3, 1, 3, 3, 7, 1, 7, 7, 9, 3, 1, 3, 1, 1, 9, 1, 9, 1, 9, 7, 3, 9, 3, 3, 9, 1, 7, 9, 1, 9, 9, 1, 1, 9, 7, 3, 7, 3, 3, 7, 3, 1, 9, 3, 7, 9, 7, 9, 1, 7, 9, 3, 3, 1, 1, 1, 7, 1, 7, 3, 9, 7, 3, 7, 9, 3, 1, 1, 3, 7, 9, 7, 3, 9, 3, 9, 7, 1, 9, 1, 9, 1, 3, 1, 7, 3, 9, 1, 3, 7, 9, 1, 7, 3, 7, 1, 3, 9, 9, 1, 3, 7, 1, 9, 1, 7, 7, 9, 1, 3, 3, 9, 9, 7, 9, 1, 1, 3, 1, 3, 9, 3, 9, 7, 1, 9, 3, 1, 3, 9, 1, 1, 3, 7, 9, 9, 1, 7, 9, 1, 3, 9, 7, 1, 3, 3, 9, 3, 7, 3, 7, 3, 7, 9, 3, 9, 1, 3, 9, 9, 3, 9, 1, 9, 7, 3, 9, 9, 3, 7, 1, 9, 1, 7, 3, 7, 9, 7, 1, 7, 9, 1, 7, 9, 3, 1, 3, 7, 9, 7, 3, 9, 1, 3, 7, 3, 7, 1, 9, 3, 7, 9, 3, 7, 3, 9, 1, 7, 3, 7, 1, 1, 7, 1, 3, 9, 1, 7, 7, 1, 7, 9, 1, 1, 1, 1, 3, 7, 3, 1, 3, 3, 1, 3, 9, 7, 7, 1, 9, 1, 1, 7, 1, 7, 1, 3, 7, 3, 1, 9, 7, 9, 7, 1, 7, 3, 7, 9, 3, 1, 7, 9, 9, 1, 9, 7, 7, 3, 7, 9, 3, 1, 1, 9, 9, 1, 7, 1, 7, 9, 7, 7, 9, 9, 9, 3, 3, 9, 3, 9, 3, 7, 9, 7, 1, 1, 3, 1, 9, 9, 1, 1, 9, 7, 7, 3, 7, 9, 3, 9, 1, 3, 1, 9, 1, 7, 3, 9, 9, 1, 7, 9, 1, 9, 1, 3, 7, 3, 3, 9, 7, 1, 7, 9, 3, 9, 7, 9, 7, 1, 3, 7, 9, 9, 7, 1, 9, 7, 1, 3, 3, 7, 9, 1, 7, 3, 3, 7, 9, 7, 9, 9, 3, 7, 1, 3, 9, 7, 1, 7, 9, 3, 9, 1, 1, 1, 3, 1, 1, 3, 7, 3, 3, 9, 1, 3, 7, 3, 7, 9, 1, 3, 9, 3, 9, 1, 9, 3, 3, 7, 3, 1, 7, 1, 1, 7, 7, 1, 7, 7, 1, 9, 7, 1, 9, 7, 3, 9, 1, 3, 7, 1, 7, 9, 1, 3, 9, 1, 1, 9, 1, 1, 3, 1, 9, 1, 3, 7, 9, 7, 3, 1, 7, 9, 3, 7, 9, 7, 9, 9, 3, 9, 1, 1, 3, 9, 3, 3, 7, 9, 3, 7, 7, 3, 9, 9, 9, 3, 7, 3, 1, 7, 3, 7, 1, 1, 9, 3, 9, 1, 7, 7, 7, 9, 3, 9, 3, 9, 3, 3, 1, 1, 3, 7, 9, 1, 7, 3, 7, 3, 1, 3, 7, 3, 7, 7, 1, 7, 3, 3, 3, 9, 7, 1, 3, 1, 3, 1, 7, 3, 7, 3, 9, 3, 9, 7, 1, 3, 7, 1, 7, 1, 3, 9, 7, 9, 3, 9, 9, 9, 3, 7, 9, 1, 3, 7, 9, 7, 9, 1, 7, 3, 3, 3, 7, 7, 1, 3, 9, 1, 3, 7, 9, 3, 9, 7, 1, 9, 9, 7, 7, 7, 1, 9, 1, 3, 3, 1, 1, 3, 9, 3, 9, 3, 9, 3, 7, 7, 3, 7, 9, 9, 3, 9, 1, 7, 3, 9, 7, 9, 1, 7, 3, 7, 3, 1, 3, 9, 1, 7, 3, 7, 9, 3, 7, 7, 3, 1, 9, 7, 1, 3, 7, 1, 9, 9, 3, 9, 7, 9, 1, 1, 9, 1, 1, 7, 9, 1, 3, 3, 1, 9, 1, 9, 1, 3, 9, 1, 3, 7, 3, 7, 3, 7, 1, 3, 1, 9, 7, 9, 3, 1, 3, 9, 7, 1, 9, 7, 1, 7, 1, 7, 9, 1, 3, 3, 1, 7, 1, 7, 9, 1, 3, 1, 7, 1, 3, 3, 9, 9, 1, 1, 3, 9, 3, 9, 3, 1, 1, 3, 9, 3, 7, 1, 7, 1, 7, 3, 7, 1, 3, 7, 3, 7, 7, 7, 9, 1, 9, 7, 1, 9, 7, 1, 9, 1, 7, 3, 1, 3, 1, 7, 9, 1, 3, 7, 1, 3, 9, 3, 9, 9, 1, 3, 1, 7, 9, 7, 3, 9, 3, 1, 7, 7, 9, 7, 7, 7, 3, 7, 9, 1, 7, 1, 7, 7, 3, 1, 1, 9, 1, 1, 9, 7, 9, 1, 7, 1, 1, 3, 9, 9, 7, 1, 7, 9, 3, 1, 7, 9, 1, 3, 1, 1, 3, 9, 3, 9, 3, 7, 9, 3, 9, 1, 3, 7, 1, 3, 9, 3, 7, 7, 9, 9, 3, 7, 9, 7, 7, 1, 3, 9, 1, 3, 9, 1, 9, 1, 7, 3, 9, 7, 9, 1, 1, 9, 1, 7, 1, 1, 3, 7, 1, 7, 3, 7, 7, 9, 7, 9, 1, 7, 7, 3, 7, 9, 1, 9, 1, 9, 7, 1, 3, 1, 3, 9, 3, 7, 9, 1, 7, 7, 3, 9, 7, 9, 3, 7, 9, 1, 7, 3, 3, 9, 7, 3, 9, 3, 1, 9, 1, 7, 1, 3, 7, 9, 7, 1, 3, 9, 3, 3, 7, 9, 7, 3, 9, 1, 1, 3, 9, 1, 1, 9, 3, 3, 9, 3, 7, 3, 1, 7, 7, 9, 1, 1, 9, 1, 3, 7, 3, 1, 3, 1, 1, 7, 9, 1, 7, 1, 3, 7, 9, 7, 3, 7, 3, 7, 1, 9, 3, 9, 1, 3, 3, 7, 9, 1, 1, 3, 7, 3, 9, 7, 1, 3, 9, 7, 3, 3, 1, 9, 3, 1, 9, 1, 3, 3, 1, 7, 9, 1, 9, 7, 1, 9, 3, 9, 7, 1, 3, 9, 3, 9, 1, 7, 7, 9, 3, 7, 7, 1, 3, 7, 1, 9, 1, 9, 1, 7, 3, 7, 1, 9, 7, 3, 7, 7, 9, 1, 9, 1, 7, 7, 9, 1, 3, 1, 7, 9, 9, 1, 3, 9, 1, 7, 1, 9, 1, 1, 9, 3, 9, 3, 1, 7, 7, 9, 1, 7, 3, 1, 9, 1, 7, 9, 3, 1, 9, 1, 3, 7, 1, 7, 9, 9, 9, 3, 9, 1, 9, 1, 3, 9, 7, 7, 3, 7, 1, 3, 9, 7, 7, 1, 3, 9, 3, 3, 9, 3, 9, 7, 7, 3, 9, 1, 1, 1, 9, 9, 7, 1, 3, 1, 1, 9, 7, 7, 9, 1, 3, 9, 1, 3, 7, 9, 9, 1, 1, 7, 9, 1, 7, 3, 9, 7, 7, 9, 3, 1, 3, 7, 3, 1, 7, 3, 7, 9, 3, 7, 1, 7, 9, 1, 7, 9, 1, 3, 7, 9, 7, 1, 1, 9, 7, 7, 9, 3, 9, 1, 3, 9, 9, 1, 9, 3, 7, 1, 9, 7, 7, 9, 7, 3, 9, 1, 3, 1, 7, 7, 9, 9, 7, 9, 1, 7, 3, 7, 7, 7, 3, 3, 7, 3, 9, 1, 7, 3, 7, 7, 3, 7, 1, 9, 3, 7, 1, 9, 9, 1, 1, 7, 3, 3, 7, 1, 9, 1, 7, 3, 7, 1, 7, 9, 1, 3, 7, 9, 3, 1, 1, 3, 9, 1, 3, 7, 9, 7, 9, 9, 9, 7, 1, 7, 7, 9, 3, 3, 7, 1, 9, 1, 3, 3, 7, 9, 3, 9, 7, 9, 3, 7, 9, 1, 3, 7, 9, 1, 3, 9, 7, 3, 3, 7, 1, 9, 1, 7, 1, 7, 7, 9, 9, 7, 3, 1, 7, 1, 3, 9, 1, 3, 9, 1, 7, 7, 3, 9, 7, 9, 1, 3, 9, 1, 7, 9, 9, 7, 3, 7, 3, 1, 7, 3, 9, 1, 1, 7, 1, 3, 3, 7, 1, 9, 3, 9, 7, 3, 7, 9, 9, 1, 7, 3, 1, 9, 1, 9, 1, 7, 1, 7, 1, 7, 9, 3, 7, 3, 9, 1, 7, 3, 9, 1, 1, 3, 1, 3, 1, 7, 1, 7, 1, 9, 9, 3, 3, 7, 1, 3, 7, 1, 9, 9, 1, 7, 3, 9, 3, 3, 7, 3, 1, 7, 3, 9, 7, 9, 1, 1, 3, 3, 9, 3, 3, 9, 3, 7, 3, 9, 7, 1, 7, 9, 1, 3, 3, 3, 3, 9, 1, 9, 7, 7, 1, 7, 3, 3, 3, 9, 1, 9, 1, 3, 3, 7, 7, 7, 7, 9, 1, 7, 1, 9, 1, 7, 3, 7, 9, 1, 9, 9, 1, 7, 9, 3, 1, 3, 1, 7, 3, 9, 7, 3, 9, 3, 3, 9, 9, 7, 9, 9, 7, 1, 3, 9, 1, 3, 9, 3, 3, 9, 7, 1, 3, 7, 3, 1, 1, 1, 7, 9, 9, 1, 7, 1, 9, 3, 3, 1, 1, 7, 7, 3, 9, 9, 9, 3, 7, 3, 7, 9, 1, 3, 9, 1, 3, 3, 1, 3, 9, 3, 7, 9, 1, 9, 7, 3, 9, 1, 3, 9, 3, 7, 3, 1, 1, 3, 3, 1, 7, 9, 1, 7, 7, 3, 9, 1, 1, 7, 7, 1, 3, 9, 1, 9, 1, 7, 1, 7, 1, 1, 7, 9, 9, 3, 9, 1, 7, 9, 3, 7, 9, 3, 9, 3, 3, 9, 1, 7, 1, 3, 1, 1, 9, 7, 1, 3, 1, 3, 9, 7, 3, 7, 7, 3, 7, 1, 3, 1, 1, 3, 9, 7, 1, 7, 7, 1, 1, 9, 9, 1, 3, 9, 9, 3, 9, 1, 3, 7, 9, 7, 3, 9, 7, 3, 9, 1, 3, 7, 7, 1, 7, 9, 3, 3, 7, 9, 1, 7, 7, 9, 3, 1, 9, 9, 9, 1, 3, 3, 1, 3, 9, 3, 7, 1, 7, 7, 1, 1, 7, 9, 1, 3, 7, 9, 1, 7, 3, 1, 9, 9, 3, 7, 3, 7, 7, 1, 7, 9, 3, 1, 1, 3, 9, 9, 3, 3, 7, 9, 3, 3, 9, 3, 7, 7, 1, 7, 3, 1, 7, 3, 7, 1, 7, 1, 9, 1, 3, 9, 9, 7, 7, 9, 1, 3, 7, 7, 9, 1, 3, 7, 1, 9, 9, 1, 1, 3, 9, 3, 9, 7, 7, 9, 7, 3, 3, 9, 1, 1, 7, 9, 3, 1, 3, 9, 1, 3, 9, 7, 3, 7, 1, 7, 3, 3, 1, 3, 7, 3, 9, 3, 1, 7, 9, 3, 1, 7, 1, 7, 3, 7, 1, 7, 9, 7, 7, 9, 3, 1, 3, 9, 1, 3, 9, 7, 3, 9, 9, 3, 7, 7, 9, 3, 7, 9, 9, 7, 1, 3, 1, 1, 3, 7, 9, 1, 9, 3, 1, 7, 3, 7, 1, 7, 9, 1, 7, 9, 9, 3, 9, 7, 1, 1, 9, 9, 7, 3, 1, 3, 9, 1, 7, 1, 7, 3, 9, 7, 3, 1, 3, 1, 7, 1, 7, 7, 3, 1, 9, 3, 9, 1, 7, 7, 1, 9, 1, 3, 3, 7, 9, 3, 1, 7, 3, 7, 9, 1, 1, 7, 3, 7, 9, 3, 9, 3, 3, 9, 3, 7, 1, 9, 3, 9, 3, 3, 9, 9, 9, 1, 7, 1, 3, 1, 9, 1, 9, 3, 7, 7, 9, 1, 3, 1, 7, 3, 9, 1, 7, 9, 1, 3, 1, 3, 1, 3, 9, 3, 9, 1, 1, 9, 7, 7, 9, 7, 9, 7, 7, 3, 3, 3, 9, 7, 7, 3, 7, 9, 7, 1, 3, 1, 1, 9, 3, 7, 1, 7, 7, 1, 9, 9, 3, 7, 9, 1, 9, 3, 1, 3, 9, 1, 1, 7, 9, 1, 7, 3, 9, 9, 3, 9, 1, 3, 1, 7, 9, 7, 7, 9, 3, 9, 7, 1, 9, 9, 3, 9, 7, 3, 1, 1, 3, 9, 7, 9, 3, 9, 1, 7, 3, 7, 9, 1, 3, 9, 3, 7, 1, 7, 1, 3, 3, 1, 3, 3, 9, 3, 1, 3, 9, 9, 7, 3, 9, 1, 7, 1, 3, 9, 9, 1, 3, 1, 7, 7, 7, 3, 9, 7, 7, 9, 3, 7, 9, 7, 3, 9, 7, 3, 1, 9, 3, 1, 7, 1, 3, 7, 7, 9, 1, 1, 3, 3, 1, 7, 1, 7, 1, 7, 9, 3, 9, 7, 1, 7, 9, 1, 3, 9, 1, 3, 1, 3, 9, 7, 1, 3, 7, 3, 1, 3, 9, 1, 1, 9, 1, 7, 1, 3, 7, 1, 3, 3, 3, 1, 1, 9, 3, 9, 1, 3, 9, 1, 1, 7, 3, 9, 1, 3, 7, 7, 9, 7, 1, 3, 1, 9, 3, 9, 7, 9, 9, 7, 9, 7, 1, 9, 9, 7, 9, 9, 3, 9, 9, 3, 1, 1, 7, 9, 3, 9, 1, 7, 3, 1, 1, 3, 7, 7, 9, 1, 3, 1, 3, 9, 7, 1, 3, 1, 3, 7, 7, 7, 9, 9, 1, 9, 1, 3, 1, 3, 7, 3, 9, 1, 3, 9, 7, 3, 9, 1, 7, 1, 3, 9, 9, 1, 7, 3, 9, 1, 1, 7, 3, 7, 7, 1, 3, 7, 9, 7, 1, 7, 1, 1, 3, 9, 1, 1, 1, 9, 1, 1, 1, 7, 3, 7, 9, 1, 3, 1, 7, 3, 9, 3, 9, 9, 7, 3, 7, 3, 1, 3, 7, 7, 7, 1, 3, 7, 9, 1, 7, 9, 3, 9, 3, 1, 7, 3, 1, 1, 3, 3, 7, 9, 1, 1, 3, 1, 7, 1, 3, 3, 1, 7, 9, 3, 3, 9, 9, 1, 9, 7, 1, 7, 3, 7, 3, 9, 3, 1, 3, 1, 1, 3, 3, 9, 1, 3, 7, 3, 7, 9, 3, 1, 1, 9, 3, 1, 7, 3, 7, 9, 1, 9, 7, 7, 9, 1, 9, 3, 1, 1, 7, 9, 1, 3, 9, 3, 1, 7, 3, 1, 1, 7, 3, 7, 9, 9, 1, 9, 3, 9, 1, 1, 3, 7, 9, 9, 9, 9, 1, 7, 7, 7, 9, 9, 3, 7, 9, 9, 1, 3, 3, 1, 3, 3, 7, 9, 3, 7, 1, 9, 7, 1, 3, 9, 3, 3, 1, 9, 9, 1, 1, 7, 9, 7, 3, 3, 3, 9, 9, 1, 3, 3, 1, 7, 9, 7, 9, 1, 3, 9, 3, 7, 1, 1, 7, 9, 3, 9, 1, 7, 7, 9, 1, 3, 1, 7, 1, 7, 1, 7, 3, 3, 3, 7, 7, 9, 1, 7, 3, 9, 7, 3, 7, 9, 9, 1, 1, 3, 9, 7, 1, 3, 3, 9, 1, 9, 3, 9, 7, 7, 1, 9, 1, 1, 9, 3, 3, 9, 7, 3, 7, 1, 3, 9, 9, 7, 9, 1, 7, 3, 7, 3, 1, 1, 7, 7, 9, 1, 7, 1, 9, 3, 9, 1, 9, 7, 3, 7, 7, 1, 7, 9, 9, 1, 3, 7, 9, 1, 3, 7, 9, 7, 1, 3, 9, 3, 3, 1, 7, 3, 1, 7, 3, 9, 1, 7, 3, 3, 9, 1, 9, 1, 9, 3, 1, 7, 9, 7, 1, 7, 9, 9, 7, 3, 1, 7, 9, 3, 3, 7, 1, 9, 7, 1, 3, 9, 1, 7, 3, 9, 1, 7, 7, 9, 1, 7, 1, 7, 9, 7, 7, 7, 3, 7, 9, 1, 3, 9, 9, 1, 1, 3, 3, 7, 3, 9, 9, 3, 7, 1, 9, 1, 7, 9, 1, 1, 3, 7, 9, 7, 7, 9, 1, 3, 3, 7, 1, 9, 9, 7, 7, 3, 9, 7, 9, 3, 1, 3, 7, 1, 7, 1, 3, 3, 1, 9, 3, 1, 7, 3, 9, 3, 1, 1, 1, 3, 9, 7, 7, 9, 9, 3, 7, 7, 1, 9, 1, 7, 9, 7, 3, 9, 7, 9, 7, 9, 1, 7, 1, 7, 9, 9, 1, 3, 9, 1, 7, 9, 1, 3, 9, 3, 9, 1, 7, 7, 3, 7, 9, 7, 9, 1, 3, 1, 7, 3, 7, 9, 9, 7, 7, 3, 7, 1, 3, 9, 1, 1, 7, 9, 7, 9, 3, 3, 7, 7, 3, 7, 9, 3, 1, 3, 1, 3, 9, 1, 9, 1, 3, 9, 3, 1, 3, 9, 1, 3, 1, 1, 3, 9, 3, 1, 1, 3, 9, 7, 9, 1, 7, 1, 9, 9, 9, 3, 1, 9, 9, 7, 7, 9, 7, 1, 1, 3, 7, 9, 1, 3, 1, 1, 3, 3, 7, 1, 9, 3, 3, 7, 1, 1, 9, 1, 3, 3, 9, 1, 7, 1, 7, 9, 7, 7, 1, 1, 3, 3, 3, 1, 1, 7, 1, 1, 1, 7, 7, 9, 1, 7, 9, 3, 7, 1, 3, 3, 9, 7, 9, 1, 9, 3, 1, 9, 3, 3, 7, 9, 1, 1, 1, 3, 7, 1, 3, 9, 3, 7, 9, 3, 9, 1, 3, 7, 1, 9, 1, 3, 7, 1, 3, 7, 9, 9, 3, 7, 9, 7, 3, 1, 9, 9, 1, 3, 7, 1, 3, 9, 3, 9, 7, 1, 7, 7, 3, 7, 3, 9, 1, 9, 1, 7, 9, 1, 1, 1, 7, 3, 7, 3, 1, 1, 7, 9, 3, 9, 9, 7, 9, 3, 3, 9, 9, 9, 1, 7, 7, 9, 1, 3, 7, 3, 3, 7, 3, 9, 1, 7, 3, 3, 7, 3, 7, 9, 1, 7, 3, 7, 1, 7, 1, 9, 1, 3, 7, 9, 3, 9, 3, 9, 1, 1, 9, 1, 3, 9, 3, 9, 1, 9, 1, 7, 3, 7, 9, 9, 9, 3, 9, 7, 3, 1, 7, 3, 3, 1, 1, 9, 7, 7, 1, 7, 9, 3, 3, 1, 3, 3, 9, 1, 7, 7, 7, 7, 3, 3, 1, 9, 9, 7, 7, 9, 1, 1, 7, 1, 7, 3, 7, 1, 9, 1, 7, 1, 3, 9, 7, 9, 1, 7, 9, 7, 9, 3, 7, 1, 9, 3, 7, 9, 7, 7, 3, 9, 1, 1, 9, 7, 1, 3, 1, 7, 9, 9, 1, 3, 9, 1, 3, 7, 9, 3, 1, 9, 7, 1, 3, 3, 1, 7, 7, 3, 7, 1, 3, 1, 7, 9, 9, 1, 7, 1, 7, 9, 1, 7, 3, 3, 1, 3, 1, 7, 9, 3, 9, 7, 1, 1, 1, 3, 1, 9, 7, 3, 9, 7, 7, 9, 9, 3, 9, 3, 3, 7, 3, 1, 7, 3, 3, 7, 9, 1, 3, 7, 3, 3, 1, 9, 9, 1, 3, 9, 3, 1, 7, 9, 9, 3, 9, 1, 7, 1, 3, 9, 3, 9, 9, 1, 9, 3, 1, 7, 1, 3, 9, 3, 1, 7, 7, 9, 1, 9, 7, 9, 1, 7, 9, 7, 1, 9, 7, 1, 3, 7, 3, 9, 7, 1, 7, 3, 3, 1, 3, 3, 9, 7, 1, 7, 7, 9, 7, 7, 1, 9, 9, 3, 9, 7, 1, 9, 3, 9, 1, 7, 9, 9, 3, 1, 3, 7, 1, 7, 3, 1, 7, 1, 7, 9, 3, 1, 3, 7, 9, 1, 9, 7, 7, 1, 3, 7, 1, 3, 7, 3, 7, 9, 1, 7, 1, 3, 1, 9, 3, 7, 3, 3, 1, 7, 3, 1, 7, 3, 3, 9, 7, 3, 7, 1, 7, 9, 3, 9, 1, 3, 7, 9, 3, 7, 1, 1, 7, 1, 7, 1, 7, 3, 7, 3, 9, 9, 3, 9, 1, 1, 3, 3, 7, 9, 7, 9, 1, 9, 3, 1, 7, 9, 7, 9, 9, 7, 7, 9, 3, 1, 7, 9, 1, 3, 1, 7, 7, 3, 9, 1, 3, 7, 9, 3, 7, 7, 9, 3, 7, 3, 1, 9, 1, 9, 3, 9, 3, 3, 9, 1, 1, 3, 9, 7, 3, 9, 7, 3, 1, 1, 7, 3, 1, 7, 9, 1, 9, 3, 9, 1, 7, 1, 1, 9, 9, 7, 1, 7, 1, 9, 3, 3, 9, 1, 9, 9, 3, 9, 1, 1, 7, 3, 9, 1, 7, 7, 7, 3, 9, 1, 1, 3, 3, 9, 1, 3, 3, 9, 7, 9, 7, 1, 7, 3, 7, 7, 9, 1, 7, 3, 9, 1, 3, 3, 7, 1, 9, 1, 9, 9, 1, 7, 7, 1, 3, 7, 1, 7, 9, 1, 1, 9, 1, 7, 3, 9, 1, 7, 3, 7, 3, 1, 3, 7, 3, 3, 7, 3, 7, 9, 7, 1, 1, 7, 9, 1, 1, 9, 1, 9, 1, 1, 3, 3, 3, 7, 1, 7, 9, 3, 9, 9, 7, 9, 3, 1, 3, 3, 7, 3, 1, 7, 1, 9, 9, 7, 7, 3, 1, 9, 1, 3, 7, 3, 9, 7, 7, 3, 7, 1, 9, 7, 1, 9, 3, 7, 9, 1, 9, 3, 1, 1, 9, 1, 7, 1, 1, 3, 7, 7, 3, 7, 3, 7, 7, 7, 3, 9, 9, 1, 7, 1, 3, 9, 7, 7, 9, 1, 1, 3, 9, 1, 3, 9, 3, 9, 1, 7, 3, 3, 9, 3, 7, 1, 7, 9, 3, 1, 9, 9, 1, 3, 9, 1, 3, 9, 9, 7, 9, 7, 7, 9, 1, 9, 3, 7, 3, 3, 7, 9, 3, 3, 7, 3, 3, 7, 1, 1, 7, 1, 7, 7, 7, 1, 7, 1, 1, 7, 1, 3, 3, 9, 3, 1, 7, 9, 3, 3, 7, 9, 7, 7, 9, 9, 3, 7, 1, 3, 7, 3, 9, 1, 7, 9, 1, 1, 7, 1, 7, 9, 1, 3, 7, 3, 7, 7, 9, 9, 1, 7, 1, 1, 9, 1, 1, 3, 1, 9, 3, 7, 3, 7, 3, 9, 3, 9, 1, 3, 1, 7, 3, 3, 1, 3, 7, 1, 9, 3, 9, 1, 1, 9, 7, 3, 3, 3, 9, 7, 3, 1, 1, 7, 3, 7, 9, 1, 3, 7, 1, 3, 7, 1, 9, 9, 7, 3, 9, 3, 7, 7, 9, 1, 1, 3, 7, 1, 7, 3, 9, 9, 3, 3, 1, 9, 9, 7, 9, 1, 7, 1, 9, 3, 7, 3, 9, 7, 1, 7, 9, 7, 9, 1, 1, 3, 3, 9, 3, 1, 3, 3, 1, 3, 9, 1, 1, 7, 1, 3, 9, 1, 7, 1, 1, 9, 9, 9, 3, 7, 9, 9, 7, 1, 3, 7, 3, 1, 9, 9, 1, 1, 3, 1, 7, 1, 7, 1, 1, 7, 1, 3, 1, 9, 3, 7, 9, 3, 7, 3, 9, 7, 7, 9, 3, 7, 1, 3, 1, 7, 9, 3, 9, 7, 9, 3, 1, 3, 3, 1, 7, 3, 1, 3, 9, 7, 3, 3, 9, 9, 3, 9, 9, 7, 7, 1, 9, 1, 7, 9, 1, 9, 3, 1, 3, 1, 9, 1, 9, 7, 3, 7, 3, 1, 3, 1, 9, 1, 7, 7, 3, 7, 9, 3, 9, 3, 9, 3, 1, 1, 7, 9, 1, 3, 9, 3, 1, 7, 3, 1, 3, 9, 9, 1, 9, 3, 1, 1, 9, 3, 9, 7, 7, 3, 1, 1, 9, 1, 7, 9, 3, 3, 7, 1, 7, 9, 1, 9, 1, 3, 1, 9, 3, 9, 7, 1, 3, 9, 3, 9, 1, 1, 3, 1, 7, 1, 7, 9, 7, 7, 3, 9, 1, 7, 9, 9, 1, 1, 1, 3, 9, 7, 1, 3, 1, 7, 3, 1, 3, 1, 3, 7, 9, 1, 1, 9, 3, 3, 3, 1, 9, 1, 3, 9, 3, 7, 9, 1, 9, 1, 3, 3, 3, 9, 1, 7, 9, 3, 1, 7, 7, 9, 9, 7, 1, 3, 9, 7, 1, 7, 3, 1, 7, 9, 9, 9, 1, 3, 1, 3, 9, 1, 9, 9, 7, 3, 7, 7, 7, 3, 9, 7, 7, 3, 9, 1, 7, 7, 7, 3, 3, 7, 1, 7, 7, 9, 1, 7, 9, 9, 1, 7, 7, 7, 3, 3, 7, 3, 1, 3, 7, 9, 9, 7, 1, 3, 1, 9, 7, 9, 1, 9, 7, 1, 7, 1, 7, 1, 3, 1, 7, 7, 9, 7, 3, 1, 3, 1, 9, 7, 3, 3, 7, 7, 9, 9, 7, 7, 9, 7, 9, 9, 1, 7, 1, 7, 1, 3, 7, 9, 1, 9, 9, 3, 1, 9, 3, 1, 3, 7, 3, 3, 9, 7, 1, 9, 7, 7, 3, 9, 1, 7, 3, 1, 9, 3, 9, 1, 3, 3, 9, 7, 1, 7, 1, 7, 9, 1, 7, 9, 3, 7, 9, 7, 3, 9, 7, 3, 9, 1, 7, 1, 9, 3, 1, 7, 1, 7, 3, 9, 3, 3, 1, 1, 3, 1, 7, 3, 3, 9, 9, 7, 3, 9, 3, 1, 7, 3, 7, 9, 1, 3, 3, 1, 1, 3, 7, 7, 1, 3, 9, 9, 9, 7, 9, 1, 1, 1, 9, 3, 9, 1, 1, 7, 1, 7, 1, 7, 9, 3, 9, 1, 3, 9, 9, 7, 9, 1, 3, 3, 7, 9, 1, 7, 9, 3, 7, 9, 9, 9, 3, 1, 7, 1, 1, 7, 3, 9, 1, 7, 9, 3, 1, 1, 7, 9, 3, 7, 1, 3, 7, 9, 1, 3, 1, 3, 9, 1, 3, 9, 3, 7, 7, 3, 7, 9, 9, 7, 3, 7, 9, 9, 7, 3, 7, 1, 9, 1, 7, 1, 3, 9, 7, 1, 3, 3, 1, 7, 3, 1, 9, 3, 9, 7, 3, 7, 3, 1, 9, 7, 3, 7, 1, 9, 1, 9, 1, 1, 3, 9, 7, 1, 7, 3, 1, 7, 9, 3, 7, 9, 9, 1, 1, 9, 3, 7, 7, 1, 9, 3, 7, 3, 7, 3, 3, 7, 9, 7, 7, 1, 7, 3, 3, 9, 7, 9, 1, 3, 9, 7, 1, 9, 3, 1, 7, 9, 1, 9, 9, 7, 9, 7, 3, 1, 7, 3, 1, 1, 7, 3, 7, 9, 3, 9, 1, 3, 1, 7, 1, 3, 9, 1, 9, 9, 1, 7, 1, 7, 1, 1, 3, 3, 9, 3, 9, 3, 3, 3, 3, 7, 9, 9, 1, 7, 1, 7, 1, 3, 7, 3, 3, 9, 1, 9, 7, 3, 9, 7, 7, 3, 7, 1, 3, 9, 7, 3, 9, 7, 9, 3, 1, 1, 3, 9, 1, 1, 3, 1, 9, 3, 1, 1, 9, 3, 7, 9, 1, 7, 9, 3, 7, 3, 9, 3, 7, 1, 7, 1, 3, 7, 7, 9, 3, 1, 9, 3, 1, 3, 1, 9, 7, 9, 3, 9, 1, 3, 7, 1, 9, 1, 7, 1, 9, 1, 1, 7, 7, 1, 7, 3, 1, 3, 3, 9, 7, 9, 1, 3, 7, 3, 7, 9, 1, 9, 7, 3, 3, 1, 7, 3, 1, 3, 1, 3, 3, 7, 1, 7, 7, 3, 3, 1, 1, 9, 1, 7, 9, 9, 7, 7, 3, 9, 7, 1, 9, 3, 9, 3, 1, 1, 3, 7, 3, 9, 7, 7, 1, 1, 9, 1, 1, 7, 7, 7, 1, 3, 7, 7, 7, 3, 7, 3, 1, 9, 3, 1, 7, 9, 3, 3, 9, 7, 1, 3, 9, 3, 7, 7, 9, 9, 3, 7, 9, 3, 1, 1, 7, 3, 3, 7, 7, 9, 1, 9, 3, 1, 1, 3, 1, 3, 9, 7, 3, 9, 1, 3, 9, 7, 9, 3, 1, 1, 3, 7, 3, 3, 1, 9, 1, 7, 9, 7, 1, 9, 3, 3, 9, 7, 3, 7, 9, 1, 9, 1, 9, 3, 3, 1, 7, 1, 9, 3, 9, 1, 9, 7, 3, 3, 7, 7, 1, 3, 1, 9, 1, 9, 1, 1, 9, 3, 1, 7, 9, 1, 1, 9, 9, 7, 1, 7, 3, 1, 3, 3, 7, 7, 1, 9, 3, 9, 9, 7, 3, 7, 9, 7, 9, 7, 7, 3, 9, 1, 1, 3, 9, 1, 7, 7, 3, 1, 3, 3, 1, 1, 1, 3, 9, 1, 7, 3, 3, 9, 3, 7, 3, 1, 7, 9, 1, 7, 1, 3, 9, 7, 1, 7, 9, 7, 1, 7, 7, 7, 9, 3, 9, 1, 7, 9, 9, 1, 7, 9, 1, 3, 7, 3, 9, 3, 7, 9, 3, 9, 1, 1, 7, 3, 9, 1, 7, 9, 3, 7, 3, 9, 9, 7, 1, 3, 1, 7, 9, 7, 9, 1, 3, 9, 3, 1, 7, 3, 1, 7, 7, 1, 9, 1, 1, 9, 9, 3, 1, 7, 3, 9, 1, 9, 1, 7, 7, 3, 7, 9, 9, 1, 1, 9, 9, 3, 7, 3, 1, 3, 3, 9, 3, 1, 7, 9, 3, 9, 7, 1, 3, 9, 1, 3, 7, 9, 1, 7, 7, 9, 7, 7, 3, 1, 7, 3, 7, 1, 9, 1, 1, 1, 1, 3, 7, 3, 9, 9, 9, 3, 7, 9, 3, 7, 3, 1, 3, 3, 7, 9, 1, 1, 3, 7, 9, 9, 9, 7, 7, 1, 9, 3, 1, 7, 9, 1, 1, 9, 3, 7, 7, 3, 1, 1, 7, 9, 3, 3, 3, 7, 3, 9, 3, 9, 3, 3, 7, 9, 3, 7, 3, 7, 1, 1, 7, 9, 9, 7, 7, 9, 7, 9, 9, 3, 1, 1, 7, 9, 7, 7, 1, 7, 9, 1, 1, 1, 7, 3, 9, 9, 1, 9, 1, 7, 1, 7, 1, 3, 9, 7, 1, 3, 3, 7, 9, 7, 7, 7, 9, 3, 3, 7, 1, 7, 9, 7, 3, 3, 1, 9, 1, 7, 3, 1, 9, 1, 1, 3, 9, 1, 3, 9, 9, 1, 1, 9, 3, 9, 1, 3, 9, 9, 1, 7, 3, 7, 7, 3, 3, 1, 1, 7, 1, 9, 7, 9, 7, 1, 3, 3, 1, 7, 3, 1, 3, 7, 7, 9, 3, 9, 7, 7, 3, 9, 9, 1, 1, 3, 9, 3, 7, 9, 3, 3, 7, 9, 9, 9, 1, 7, 9, 1, 1, 3, 7, 9, 3, 1, 3, 1, 3, 7, 3, 3, 9, 3, 9, 9, 7, 1, 7, 1, 9, 7, 3, 7, 1, 3, 9, 1, 9, 7, 1, 3, 9, 1, 3, 1, 3, 1, 7, 9, 1, 7, 3, 1, 1, 3, 9, 9, 1, 3, 7, 1, 7, 7, 3, 9, 7, 9, 3, 7, 7, 9, 1, 3, 7, 1, 1, 7, 7, 1, 3, 9, 9, 7, 1, 9, 3, 1, 9, 1, 3, 1, 3, 9, 7, 9, 3, 9, 7, 3, 3, 7, 7, 1, 1, 7, 9, 9, 9, 1, 7, 3, 3, 3, 1, 3, 3, 9, 9, 3, 7, 7, 3, 9, 7, 9, 1, 7, 1, 9, 3, 7, 3, 9, 9, 3, 7, 9, 1, 1, 7, 7, 1, 3, 3, 1, 7, 9, 3, 9, 3, 7, 7, 7, 3, 7, 9, 1, 9, 1, 1, 1, 7, 1, 9, 1, 3, 9, 9, 9, 1, 1, 3, 3, 1, 3, 9, 7, 7, 1, 7, 9, 7, 9, 1, 3, 3, 9, 1, 3, 9, 1, 3, 7, 1, 7, 9, 7, 9, 3, 9, 3, 7, 1, 3, 7, 9, 3, 1, 1, 3, 9, 9, 7, 1, 7, 7, 3, 9, 1, 7, 9, 1, 3, 1, 1, 9, 3, 9, 7, 7, 1, 9, 7, 9, 9, 3, 7, 9, 7, 1, 9, 3, 3, 3, 9, 1, 7, 9, 7, 9, 7, 3, 7, 3, 9, 9, 3, 3, 9, 9, 1, 7, 7, 9, 9, 9, 7, 3, 7, 3, 7, 3, 7, 9, 1, 7, 9, 7, 3, 1, 1, 3, 3, 7, 9, 3, 3, 9, 1, 1, 9, 9, 1, 3, 9, 3, 1, 9, 9, 7, 9, 1, 7, 7, 9, 9, 3, 9, 1, 7, 7, 1, 9, 7, 7, 9, 3, 1, 7, 1, 7, 3, 7, 3, 3, 9, 1, 7, 7, 9, 1, 3, 7, 7, 9, 1, 9, 3, 9, 3, 7, 1, 3, 1, 3, 7, 7, 1, 3, 3, 3, 7, 3, 7, 1, 7, 3, 3, 7, 9, 9, 9, 1, 3, 3, 7, 1, 9, 3, 1, 7, 9, 1, 7, 1, 3, 9, 3, 1, 3, 7, 9, 1, 7, 3, 3, 3, 9, 7, 1, 3, 9, 1, 3, 3, 9, 1, 7, 1, 9, 1, 7, 7, 7, 1, 1, 9, 1, 7, 1, 7, 7, 9, 7, 1, 7, 9, 3, 9, 7, 3, 3, 9, 7, 1, 3, 7, 1, 3, 1, 1, 9, 9, 9, 7, 3, 7, 3, 7, 3, 7, 9, 1, 1, 1, 7, 7, 3, 3, 9, 1, 3, 1, 1, 3, 7, 3, 9, 7, 9, 1, 9, 3, 9, 1, 7, 1, 9, 1, 7, 1, 3, 9, 3, 1, 9, 3, 7, 1, 3, 1, 7, 3, 9, 7, 9, 3, 7, 9, 9, 7, 3, 7, 3, 9, 1, 3, 7, 1, 3, 7, 1, 3, 7, 9, 7, 1, 1, 9, 1, 9, 3, 9, 7, 9, 3, 7, 7, 9, 3, 7, 7, 1, 3, 9, 3, 1, 7, 1, 7, 1, 3, 7, 1, 7, 3, 3, 1, 7, 3, 9, 7, 3, 9, 3, 1, 9, 1, 1, 9, 1, 9, 3, 1, 7, 1, 1, 7, 1, 3, 7, 1, 9, 9, 1, 7, 3, 7, 1, 1, 3, 9, 9, 1, 7, 7, 9, 1, 7, 9, 7, 9, 1, 3, 3, 9, 7, 3, 7, 7, 3, 9, 7, 3, 9, 3, 7, 1, 1, 3, 1, 1, 7, 9, 1, 1, 7, 7, 3, 3, 3, 1, 3, 3, 3, 7, 1, 9, 7, 3, 9, 1, 7, 7, 9, 1, 3, 1, 7, 3, 3, 9, 1, 9, 3, 3, 7, 9, 3, 7, 1, 3, 7, 9, 3, 1, 1, 3, 3, 1, 7, 9, 9, 3, 7, 3, 3, 9, 3, 9, 3, 1, 7, 1, 7, 3, 3, 1, 7, 7, 3, 9, 1, 9, 1, 7, 3, 9, 1, 7, 9, 1, 9, 3, 3, 7, 3, 3, 1, 1, 3, 7, 9, 1, 9, 9, 9, 1, 7, 1, 3, 1, 3, 7, 1, 3, 7, 1, 7, 3, 9, 1, 1, 9, 1, 7, 1, 1, 1, 3, 3, 9, 7, 7, 9, 7, 9, 3, 1, 7, 9, 9, 7, 1, 7, 1, 3, 7, 1, 7, 3, 7, 9, 1, 7, 9, 3, 7, 1, 3, 7, 1, 3, 9, 3, 9, 3, 7, 9, 7, 9, 7, 3, 7, 9, 1, 1, 3, 3, 3, 3, 9, 7, 1, 3, 9, 1, 1, 7, 1, 7, 9, 9, 7, 9, 3, 1, 1, 3, 7, 9, 3, 7, 9, 1, 9, 1, 7, 1, 3, 9, 7, 9, 1, 7, 3, 9, 3, 7, 9, 3, 3, 9, 3, 9, 1, 1, 1, 7, 1, 1, 3, 9, 9, 9, 1, 1, 9, 3, 1, 1, 7, 9, 9, 1, 3, 1, 7, 3, 1, 7, 9, 1, 7, 7, 9, 9, 9, 7, 3, 3, 1, 9, 3, 9, 7, 1, 1, 9, 3, 1, 1, 3, 1, 3, 7, 1, 7, 3, 3, 3, 1, 1, 9, 7, 9, 3, 9, 3, 1, 1, 3, 7, 7, 7, 3, 1, 7, 3, 9, 3, 9, 7, 9, 1, 3, 7, 3, 9, 3, 7, 1, 7, 7, 1, 9, 3, 9, 7, 9, 3, 9, 1, 7, 7, 3, 9, 7, 1, 3, 1, 3, 1, 9, 3, 1, 7, 1, 3, 7, 9, 3, 7, 9, 1, 3, 7, 7, 9, 3, 3, 1, 9, 7, 1, 7, 7, 1, 3, 7, 9, 1, 7, 3, 7, 7, 1, 3, 9, 7, 7, 1, 1, 7, 7, 9, 3, 1, 1, 7, 9, 1, 1, 9, 9, 3, 9, 7, 3, 9, 3, 3, 3, 7, 3, 7, 9, 9, 1, 3, 7, 9, 3, 7, 1, 3, 3, 7, 1, 1, 9, 9, 9, 9, 7, 1, 9, 7, 9, 3, 1, 3, 7, 1, 7, 3, 7, 1, 9, 9, 1, 3, 1, 7, 9, 9, 3, 3, 9, 1, 9, 1, 9, 1, 3, 3, 1, 3, 9, 9, 7, 1, 7, 7, 1, 3, 9, 3, 9, 3, 1, 7, 3, 1, 7, 3, 1, 7, 3, 9, 9, 7, 9, 1, 3, 1, 3, 7, 1, 1, 1, 9, 9, 3, 7, 9, 3, 9, 3, 3, 7, 3, 3, 9, 1, 7, 9, 9, 1, 7, 1, 3, 9, 3, 7, 9, 9, 7, 1, 3, 7, 9, 3, 3, 1, 1, 1, 3, 7, 9, 9, 7, 1, 9, 9, 7, 7, 1, 9, 1, 3, 1, 3, 9, 3, 7, 1, 9, 7, 3, 7, 1, 7, 3, 7, 3, 7, 9, 7, 3, 1, 1, 3, 1, 9, 7, 9, 1, 7, 9, 9, 7, 9, 9, 3, 1, 9, 9, 7, 1, 3, 7, 9, 1, 9, 3, 1, 7, 9, 1, 7, 9, 3, 9, 7, 3, 1, 3, 9, 7, 9, 3, 7, 3, 7, 9, 9, 9, 1, 3, 7, 9, 3, 7, 3, 1, 1, 3, 9, 1, 3, 1, 1, 9, 1, 9, 3, 7, 9, 9, 1, 7, 7, 1, 3, 3, 9, 9, 1, 9, 1, 9, 9, 3, 1, 9, 1, 7, 3, 7, 1, 7, 1, 3, 7, 3, 1, 7, 7, 9, 3, 9, 7, 1, 1, 3, 9, 1, 1, 7, 9, 1, 3, 9, 7, 3, 9, 7, 1, 3, 9, 7, 1, 3, 9, 1, 3, 3, 9, 1, 3, 7, 9, 1, 7, 1, 7, 3, 9, 1, 3, 9, 3, 1, 9, 3, 7, 7, 9, 1, 9, 9, 1, 3, 7, 3, 7, 3, 9, 1, 9, 9, 1, 1, 3, 7, 1, 7, 3, 1, 3, 1, 7, 3, 9, 1, 3, 9, 9, 7, 9, 7, 1, 7, 3, 7, 3, 1, 3, 7, 3, 9, 1, 9, 3, 9, 3, 7, 9, 3, 1, 3, 9, 1, 9, 9, 1, 3, 9, 9, 1, 3, 9, 1, 1, 7, 9, 7, 3, 1, 3, 9, 1, 3, 7, 1, 9, 3, 9, 7, 1, 7, 9, 1, 1, 1, 1, 3, 3, 9, 7, 1, 7, 7, 9, 3, 7, 9, 1, 7, 9, 3, 3, 9, 1, 7, 9, 1, 7, 1, 7, 9, 7, 3, 1, 7, 1, 3, 9, 7, 7, 9, 7, 3, 1, 1, 7, 1, 3, 7, 1, 3, 1, 9, 1, 3, 3, 1, 7, 9, 7, 3, 7, 3, 9, 7, 1, 3, 9, 9, 7, 1, 7, 3, 7, 9, 9, 3, 9, 1, 3, 1, 9, 3, 9, 7, 1, 7, 7, 9, 1, 3, 7, 9, 9, 1, 3, 1, 1, 7, 9, 7, 9, 7, 3, 9, 9, 3, 7, 1, 9, 7, 7, 3, 1, 3, 9, 7, 1, 3, 1, 3, 9, 7, 1, 9, 7, 3, 7, 9, 9, 9, 1, 3, 3, 7, 3, 9, 1, 7, 9, 3, 3, 1, 7, 7, 9, 1, 1, 3, 9, 9, 7, 9, 7, 1, 7, 9, 7, 1, 7, 9, 9, 7, 9, 1, 9, 7, 7, 9, 7, 1, 7, 3, 1, 7, 1, 9, 9, 7, 3, 7, 1, 3, 1, 1, 3, 3, 9, 1, 7, 1, 9, 9, 7, 9, 9, 3, 1, 3, 3, 9, 7, 1, 7, 1, 3, 1, 7, 9, 9, 1, 3, 7, 1, 7, 9, 1, 7, 9, 3, 1, 3, 9, 9, 3, 7, 3, 9, 1, 7, 9, 9, 9, 9, 1, 1, 3, 7, 1, 9, 1, 3, 9, 3, 7, 9, 3, 7, 3, 1, 7, 1, 9, 7, 9, 9, 7, 3, 7, 1, 7, 3, 7, 3, 1, 7, 9, 3, 7, 9, 9, 1, 9, 1, 7, 9, 1, 7, 1, 7, 3, 7, 3, 9, 3, 7, 3, 9, 9, 9, 7, 7, 1, 3, 9, 1, 1, 7, 9, 3, 9, 7, 7, 9, 7, 3, 9, 9, 7, 1, 9, 3, 1, 3, 9, 7, 9, 1, 3, 1, 3, 9, 7, 3, 3, 9, 3, 3, 1, 9, 1, 3, 9, 7, 1, 1, 1, 9, 7, 1, 9, 1, 3, 7, 9, 1, 7, 3, 7, 1, 1, 9, 3, 9, 1, 9, 9, 7, 3, 3, 7, 9, 1, 9, 1, 3, 9, 9, 1, 9, 7, 1, 7, 3, 9, 1, 3, 7, 1, 7, 3, 9, 3, 7, 1, 7, 1, 7, 1, 9, 7, 9, 1, 7, 9, 1, 1, 3, 9, 7, 7, 3, 1, 9, 3, 1, 7, 3, 7, 1, 1, 9, 3, 7, 9, 7, 9, 1, 9, 9, 7, 9, 1, 9, 9, 7, 3, 1, 3, 3, 9, 1, 3, 1, 9, 3, 1, 1, 9, 3, 1, 7, 1, 7, 3, 1, 1, 3, 9, 1, 3, 3, 3, 1, 1, 3, 9, 9, 3, 7, 1, 7, 1, 9, 7, 1, 7, 9, 9, 1, 7, 3, 9, 7, 1, 1, 3, 3, 1, 3, 3, 1, 1, 9, 7, 1, 3, 7, 1, 7, 3, 3, 7, 1, 9, 3, 7, 9, 1, 1, 1, 7, 7, 3, 9, 1, 1, 9, 1, 1, 9, 3, 3, 7, 7, 9, 9, 7, 7, 7, 1, 7, 7, 9, 9, 1, 1, 1, 3, 9, 7, 9, 3, 3, 3, 1, 9, 1, 3, 9, 3, 9, 9, 1, 9, 3, 1, 1, 7, 3, 7, 3, 1, 3, 9, 1, 9, 1, 1, 3, 9, 9, 1, 3, 7, 1, 3, 7, 9, 3, 3, 7, 9, 9, 1, 1, 1, 1, 7, 3, 3, 3, 7, 7, 9, 3, 9, 7, 9, 7, 9, 1, 3, 9, 7, 3, 9, 3, 1, 9, 9, 7, 9, 1, 1, 3, 9, 3, 9, 7, 1, 7, 3, 1, 3, 3, 9, 3, 7, 7, 1, 7, 3, 1, 7, 9, 1, 3, 7, 3, 7, 9, 3, 1, 1, 9, 9, 7, 1, 9, 7, 9, 9, 1, 3, 9, 1, 3, 1, 7, 3, 7, 3, 7, 9, 3, 3, 1, 7, 3, 7, 1, 7, 1, 9, 7, 1, 1, 9, 7, 1, 3, 7, 3, 3, 3, 9, 7, 9, 7, 3, 7, 9, 9, 1, 3, 1, 9, 1, 7, 9, 9, 3, 9, 1, 7, 3, 1, 3, 7, 9, 1, 1, 3, 9, 7, 1, 7, 3, 7, 3, 7, 9, 1, 7, 9, 3, 9, 9, 3, 7, 7, 1, 9, 3, 9, 1, 1, 3, 9, 1, 7, 3, 9, 9, 3, 3, 7, 1, 3, 3, 3, 1, 9, 3, 7, 1, 9, 1, 7, 3, 9, 1, 7, 3, 3, 7, 1, 3, 1, 7, 9, 3, 9, 7, 9, 9, 3, 7, 1, 7, 3, 1, 9, 3, 3, 7, 9, 7, 1, 7, 9, 1, 3, 3, 9, 7, 3, 9, 3, 9, 7, 7, 1, 3, 3, 7, 9, 7, 1, 7, 7, 1, 7, 1, 1, 1, 7, 7, 9, 3, 7, 9, 9, 1, 1, 9, 3, 9, 7, 1, 1, 9, 7, 3, 7, 7, 7, 7, 9, 7, 7, 9, 3, 3, 7, 1, 1, 9, 3, 3, 1, 1, 7, 3, 7, 1, 9, 9, 3, 9, 1, 7, 9, 9, 7, 3, 1, 7, 1, 7, 3, 7, 9, 1, 7, 9, 9, 3, 3, 9, 3, 7, 9, 7, 3, 1, 1, 9, 7, 7, 1, 7, 9, 1, 1, 7, 3, 9, 1, 3, 1, 1, 3, 1, 7, 9, 3, 9, 3, 1, 3, 7, 9, 1, 9, 3, 7, 1, 7, 9, 7, 7, 9, 7, 9, 3, 1, 3, 7, 7, 7, 9, 3, 1, 9, 3, 1, 3, 7, 3, 1, 3, 9, 7, 7, 9, 3, 7, 7, 1, 7, 9, 1, 9, 1, 3, 9, 3, 1, 1, 3, 3, 1, 7, 1, 7, 1, 1, 7, 9, 3, 1, 7, 1, 3, 1, 3, 9, 1, 7, 3, 7, 7, 9, 7, 9, 9, 3, 7, 7, 3, 3, 9, 7, 7, 1, 9, 1, 7, 9, 1, 3, 7, 9, 7, 1, 3, 3, 9, 9, 3, 1, 9, 7, 3, 3, 7, 1, 3, 3, 1, 1, 1, 3, 9, 3, 9, 3, 9, 1, 3, 3, 1, 3, 7, 1, 3, 7, 3, 3, 9, 1, 1, 9, 7, 9, 9, 1, 7, 7, 3, 3, 9, 1, 1, 3, 9, 1, 7, 9, 9, 9, 3, 9, 1, 7, 7, 1, 3, 3, 7, 1, 7, 9, 3, 7, 3, 1, 7, 7, 9, 1, 7, 7, 1, 3, 9, 9, 7, 3, 9, 3, 7, 9, 1, 7, 1, 7, 3, 1, 9, 1, 7, 3, 9, 3, 9, 1, 3, 7, 3, 7, 1, 3, 9, 7, 1, 3, 3, 7, 3, 9, 3, 1, 7, 1, 7, 3, 7, 9, 7, 7, 3, 9, 1, 7, 1, 9, 7, 1, 9, 1, 3, 7, 7, 9, 1, 7, 1, 1, 3, 9, 7, 7, 3, 1, 7, 9, 3, 9, 3, 1, 9, 9, 1, 3, 3, 9, 1, 7, 3, 3, 3, 9, 7, 3, 9, 1, 1, 1, 7, 9, 9, 3, 9, 3, 1, 1, 7, 3, 7, 9, 7, 1, 3, 9, 9, 1, 3, 7, 3, 9, 1, 7, 1, 9, 3, 9, 7, 3, 1, 9, 1, 7, 7, 9, 1, 9, 3, 3, 3, 9, 7, 3, 3, 1, 7, 7, 3, 9, 1, 1, 7, 9, 1, 1, 7, 3, 9, 3, 9, 9, 9, 1, 7, 1, 7, 3, 1, 9, 3, 7, 9, 1, 7, 9, 1, 3, 1, 1, 9, 3, 3, 1, 1, 9, 3, 7, 3, 7, 1, 9, 1, 7, 7, 9, 1, 7, 3, 3, 9, 9, 7, 3, 1, 7, 9, 7, 9, 7, 1, 9, 9, 7, 9, 7, 3, 9, 9, 1, 3, 7, 1, 3, 1, 3, 9, 3, 7, 9, 9, 1, 3, 3, 1, 1, 3, 9, 3, 7, 3, 3, 7, 1, 9, 1, 7, 1, 1, 3, 1, 3, 9, 1, 7, 9, 1, 3, 9, 1, 3, 7, 7, 3, 1, 7, 1, 1, 9, 9, 3, 1, 7, 3, 1, 7, 9, 7, 1, 7, 3, 9, 3, 9, 7, 3, 7, 1, 3, 9, 3, 1, 3, 9, 9, 7, 1, 3, 9, 9, 1, 3, 7, 9, 1, 9, 7, 1, 3, 1, 3, 7, 3, 1, 9, 1, 3, 9, 7, 9, 9, 7, 1, 3, 1, 7, 7, 9, 1, 7, 7, 9, 1, 3, 3, 9, 1, 9, 1, 3, 9, 7, 9, 9, 7, 1, 1, 3, 9, 1, 1, 3, 9, 7, 9, 7, 9, 3, 9, 1, 3, 7, 1, 7, 7, 3, 9, 1, 3, 9, 7, 1, 3, 7, 1, 7, 9, 1, 1, 3, 1, 7, 3, 9, 1, 3, 9, 7, 7, 9, 1, 7, 7, 3, 3, 9, 7, 9, 3, 7, 1, 7, 7, 3, 9, 3, 1, 9, 7, 3, 7, 3, 7, 9, 7, 3, 9, 1, 7, 7, 3, 3, 3, 7, 1, 3, 7, 1, 3, 9, 9, 7, 9, 7, 3, 9, 3, 1, 1, 3, 7, 7, 1, 1, 3, 1, 3, 7, 1, 7, 9, 9, 1, 1, 7, 9, 1, 3, 7, 9, 1, 1, 7, 1, 3, 9, 1, 9, 9, 3, 1, 3, 3, 1, 1, 7, 9, 1, 3, 1, 7, 3, 9, 7, 3, 9, 1, 1, 3, 7, 3, 9, 7, 9, 9, 7, 3, 1, 1, 7, 9, 1, 3, 9, 7, 9, 1, 1, 3, 3, 1, 9, 3, 7, 9, 3, 3, 7, 7, 3, 1, 3, 1, 1, 7, 3, 9, 3, 7, 1, 7, 3, 7, 3, 9, 1, 1, 9, 3, 7, 7, 3, 7, 1, 3, 7, 3, 9, 3, 7, 7, 9, 1, 7, 9, 7, 3, 9, 3, 3, 9, 1, 1, 9, 7, 3, 3, 1, 7, 9, 1, 7, 7, 1, 3, 7, 1, 7, 7, 9, 1, 7, 7, 7, 1, 3, 9, 9, 1, 3, 7, 7, 3, 1, 3, 1, 7, 9, 1, 9, 1, 3, 7, 7, 1, 9, 7, 1, 9, 7, 1, 1, 7, 7, 3, 9, 3, 9, 3, 1, 7, 3, 9, 9, 1, 3, 9, 3, 3, 9, 3, 9, 3, 7, 7, 3, 9, 9, 7, 7, 7, 1, 3, 7, 1, 9, 3, 9, 3, 9, 9, 1, 1, 1, 9, 1, 1, 1, 9, 7, 9, 1, 7, 3, 7, 3, 7, 9, 1, 1, 7, 9, 1, 3, 1, 3, 7, 9, 7, 1, 1, 1, 7, 7, 9, 3, 9, 1, 7, 9, 1, 3, 7, 9, 9, 7, 7, 7, 9, 1, 7, 3, 9, 1, 7, 9, 3, 7, 1, 7, 9, 1, 7, 9, 1, 7, 3, 9, 3, 1, 7, 3, 9, 7, 3, 3, 7, 9, 9, 1, 3, 3, 9, 3, 7, 3, 7, 3, 1, 9, 1, 9, 3, 9, 1, 7, 3, 3, 3, 9, 3, 1, 9, 7, 9, 3, 9, 1, 7, 1, 7, 3, 9, 1, 9, 9, 3, 9, 1, 9, 1, 7, 3, 1, 3, 7, 3, 9, 3, 7, 1, 9, 1, 7, 9, 1, 7, 1, 3, 9, 9, 3, 7, 9, 1, 7, 1, 7, 1, 9, 3, 1, 3, 7, 7, 1, 3, 1, 7, 7, 9, 7, 1, 9, 9, 1, 1, 7, 3, 9, 3, 9, 1, 9, 1, 7, 3, 9, 1, 3, 9, 1, 1, 7, 9, 1, 7, 1, 7, 1, 9, 7, 7, 3, 3, 9, 3, 1, 7, 9, 1, 1, 9, 9, 7, 1, 1, 3, 1, 3, 1, 9, 1, 7, 9, 3, 9, 9, 7, 3, 9, 7, 9, 3, 9, 3, 3, 1, 3, 9, 1, 3, 9, 3, 3, 7, 1, 9, 7, 7, 9, 1, 1, 1, 3, 1, 7, 1, 7, 1, 3, 9, 9, 1, 7, 9, 3, 7, 1, 3, 7, 1, 7, 7, 3, 9, 1, 3, 3, 7, 3, 9, 9, 1, 3, 9, 9, 1, 7, 9, 1, 7, 1, 3, 3, 7, 9, 1, 7, 3, 1, 7, 7, 1, 3, 7, 9, 1, 7, 3, 9, 3, 7, 9, 7, 7, 9, 3, 9, 1, 1, 7, 9, 1, 3, 9, 1, 9, 3, 7, 7, 3, 9, 1, 7, 9, 1, 3, 1, 7, 3, 3, 9, 9, 1, 3, 3, 7, 9, 3, 9, 9, 1, 1, 1, 7, 1, 3, 7, 9, 1, 3, 9, 3, 9, 7, 1, 3, 1, 7, 9, 9, 7, 1, 7, 1, 9, 3, 9, 3, 7, 3, 7, 3, 7, 9, 3, 9, 9, 9, 1, 7, 9, 3, 7, 1, 3, 9, 3, 7, 3, 7, 9, 7, 9, 1, 3, 7, 9, 9, 7, 7, 9, 7, 1, 3, 1, 3, 9, 9, 3, 3, 7, 1, 3, 9, 1, 3, 3, 1, 9, 9, 7, 7, 9, 7, 3, 9, 1, 7, 3, 9, 3, 9, 3, 9, 1, 7, 1, 7, 9, 1, 9, 1, 3, 1, 7, 1, 9, 1, 1, 3, 3, 7, 3, 7, 7, 1, 3, 9, 9, 1, 7, 3, 7, 9, 3, 1, 1, 3, 9, 7, 3, 7, 1, 7, 3, 9, 7, 3, 9, 3, 7, 1, 7, 9, 7, 1, 3, 7, 3, 1, 9, 9, 7, 1, 3, 3, 3, 1, 3, 7, 3, 1, 7, 3, 7, 9, 1, 1, 3, 7, 9, 1, 9, 9, 3, 7, 1, 7, 9, 1, 3, 9, 1, 1, 7, 3, 7, 1, 7, 1, 3, 9, 3, 7, 3, 9, 1, 7, 3, 1, 3, 1, 1, 1, 7, 7, 7, 9, 1, 7, 1, 1, 9, 3, 9, 1, 9, 1, 1, 7, 9, 1, 7, 7, 3, 9, 3, 1, 7, 3, 1, 3, 3, 1, 9, 7, 9, 3, 7, 9, 9, 1, 1, 7, 7, 9, 9, 1, 7, 1, 3, 9, 1, 7, 1, 3, 3, 7, 9, 3, 7, 3, 1, 7, 7, 9, 7, 7, 3, 7, 1, 3, 9, 7, 7, 7, 3, 7, 9, 1, 9, 9, 1, 3, 9, 7, 3, 3, 1, 1, 3, 3, 1, 3, 9, 1, 3, 3, 9, 9, 1, 1, 3, 7, 3, 3, 7, 7, 3, 3, 1, 7, 9, 1, 3, 9, 1, 7, 1, 7, 9, 9, 1, 7, 9, 9, 7, 9, 3, 9, 3, 9, 1, 1, 7, 7, 1, 3, 3, 1, 9, 3, 9, 1, 7, 1, 7, 7, 9, 1, 7, 9, 9, 9, 7, 1, 3, 7, 9, 3, 9, 7, 9, 9, 3, 7, 1, 3, 9, 1, 3, 7, 7, 3, 3, 9, 7, 7, 9, 1, 1, 7, 1, 7, 3, 7, 7, 7, 7, 9, 7, 1, 1, 3, 7, 1, 7, 3, 1, 9, 7, 3, 7, 3, 7, 3, 9, 1, 7, 1, 3, 9, 1, 1, 7, 3, 1, 7, 1, 7, 3, 9, 9, 7, 9, 1, 7, 1, 3, 1, 7, 7, 9, 3, 1, 3, 9, 1, 7, 9, 7, 7, 9, 9, 9, 1, 9, 7, 9, 9, 1, 3, 1, 1, 3, 3, 7, 9, 3, 1, 7, 3, 9, 3, 9, 3, 7, 3, 9, 1, 3, 9, 1, 7, 9, 3, 7, 1, 1, 9, 3, 7, 1, 7, 7, 9, 7, 9, 1, 9, 9, 7, 1, 3, 1, 3, 9, 1, 7, 1, 3, 3, 1, 3, 1, 3, 9, 1, 1, 7, 9, 3, 9, 7, 1, 7, 1, 3, 7, 3, 9, 9, 1, 9, 1, 1, 7, 1, 3, 7, 1, 3, 3, 1, 3, 9, 9, 9, 7, 3, 3, 7, 9, 9, 9, 1, 3, 3, 3, 1, 7, 9, 7, 3, 1, 3, 7, 3, 9, 3, 1, 9, 1, 3, 3, 3, 9, 9, 9, 1, 7, 9, 3, 9, 3, 9, 7, 9, 9, 1, 3, 3, 7, 7, 9, 1, 3, 7, 9, 7, 9, 9, 1, 1, 3, 1, 1, 1, 1, 1, 7, 9, 3, 3, 7, 1, 9, 3, 9, 7, 1, 1, 7, 3, 1, 7, 3, 9, 3, 7, 9, 1, 7, 3, 9, 1, 7, 9, 3, 1, 7, 7, 9, 7, 3, 1, 1, 9, 9, 9, 1, 3, 7, 3, 7, 1, 7, 3, 9, 9, 1, 7, 3, 3, 9, 7, 3, 9, 1, 3, 7, 1, 7, 1, 9, 3, 7, 3, 3, 3, 9, 1, 1, 7, 9, 9, 3, 7, 1, 9, 9, 7, 7, 9, 3, 9, 1, 7, 3, 1, 3, 9, 7, 1, 9, 9, 1, 7, 1, 7, 7, 1, 3, 9, 3, 9, 1, 3, 1, 7, 1, 9, 3, 7, 3, 7, 3, 3, 1, 7, 1, 3, 7, 7, 9, 3, 1, 7, 9, 3, 1, 7, 3, 7, 7, 9, 9, 3, 9, 3, 3, 7, 9, 1, 9, 7, 3, 1, 3, 9, 7, 3, 9, 3, 1, 1, 3, 3, 3, 7, 3, 9, 1, 7, 9, 3, 9, 3, 1, 7, 1, 7, 3, 7, 1, 3, 7, 3, 3, 7, 9, 9, 1, 1, 9, 7, 9, 3, 9, 7, 1, 7, 9, 1, 7, 3, 7, 9, 9, 1, 1, 7, 7, 7, 9, 9, 3, 7, 7, 3, 1, 7, 3, 1, 7, 9, 1, 9, 1, 1, 9, 3, 1, 3, 9, 1, 7, 3, 1, 9, 1, 3, 9, 1, 3, 9, 1, 3, 7, 9, 7, 3, 1, 7, 9, 1, 7, 3, 3, 3, 7, 3, 7, 7, 9, 7, 9, 1, 1, 3, 9, 1, 3, 9, 3, 9, 7, 1, 7, 9, 1, 3, 1, 3, 3, 9, 1, 7, 3, 1, 1, 3, 3, 7, 3, 1, 9, 9, 7, 7, 3, 7, 1, 1, 7, 1, 9, 7, 9, 7, 3, 7, 3, 7, 7, 7, 9, 3, 1, 9, 9, 3, 9, 3, 1, 3, 7, 1, 3, 9, 1, 3, 1, 3, 7, 7, 3, 1, 1, 1, 3, 9, 7, 3, 1, 7, 9, 3, 9, 1, 3, 1, 7, 9, 1, 1, 7, 9, 3, 1, 7, 7, 7, 7, 9, 1, 9, 7, 1, 1, 3, 3, 9, 9, 9, 3, 7, 7, 3, 7, 1, 1, 7, 3, 9, 3, 9, 1, 1, 3, 7, 9, 1, 1, 7, 3, 1, 3, 1, 3, 7, 1, 7, 1, 7, 9, 7, 3, 9, 1, 3, 9, 1, 9, 3, 7, 1, 7, 9, 9, 7, 9, 9, 1, 3, 7, 1, 1, 7, 3, 9, 7, 3, 1, 3, 9, 1, 7, 7, 7, 9, 3, 3, 9, 7, 9, 7, 3, 7, 1, 3, 9, 1, 7, 3, 7, 1, 7, 7, 9, 7, 1, 9, 3, 9, 1, 9, 1, 9, 3, 3, 1, 1, 9, 3, 9, 3, 1, 7, 9, 7, 1, 9, 9, 1, 7, 9, 1, 9, 9, 1, 1, 1, 9, 7, 3, 7, 3, 7, 1, 1, 9, 3, 1, 9, 1, 7, 1, 9, 1, 3, 3, 7, 3, 7, 7, 7, 7, 1, 9, 9, 3, 7, 9, 1, 7, 9, 9, 3, 3, 3, 7, 1, 9, 9, 7, 9, 3, 3, 9, 3, 9, 3, 9, 1, 3, 1, 1, 1, 7, 9, 3, 9, 1, 9, 1, 1, 3, 9, 1, 7, 1, 7, 9, 3, 3, 9, 3, 1, 1, 7, 3, 9, 7, 3, 9, 3, 3, 9, 9, 7, 1, 7, 9, 1, 3, 9, 3, 3, 1, 7, 1, 3, 7, 9, 3, 1, 3, 1, 7, 9, 1, 7, 1, 1, 9, 7, 7, 9, 9, 3, 9, 7, 7, 1, 1, 9, 1, 3, 3, 7, 1, 7, 3, 1, 7, 1, 1, 1, 3, 7, 3, 3, 3, 9, 3, 7, 1, 3, 7, 7, 3, 9, 1, 1, 9, 3, 7, 3, 9, 3, 7, 1, 7, 1, 7, 1, 3, 9, 9, 3, 9, 9, 3, 7, 3, 7, 1, 3, 7, 3, 3, 9, 3, 9, 9, 1, 1, 7, 1, 7, 1, 1, 3, 7, 9, 7, 9, 3, 9, 7, 1, 9, 1, 3, 7, 9, 9, 1, 7, 9, 3, 3, 3, 3, 9, 9, 1, 9, 3, 1, 7, 7, 3, 1, 1, 9, 9, 7, 1, 7, 3, 7, 1, 1, 7, 9, 9, 3, 7, 9, 1, 3, 3, 1, 7, 3, 9, 1, 7, 1, 9, 1, 9, 7, 3, 9, 7, 1, 7, 9, 1, 3, 9, 1, 7, 7, 9, 3, 7, 3, 7, 3, 1, 3, 9, 3, 1, 7, 7, 9, 9, 1, 1, 7, 9, 1, 7, 1, 3, 7, 9, 3, 1, 7, 9, 7, 3, 9, 3, 9, 7, 9, 1, 7, 1, 9, 3, 9, 7, 7, 3, 1, 1, 3, 7, 1, 9, 7, 1, 9, 7, 1, 1, 9, 7, 7, 7, 9, 3, 9, 1, 3, 3, 9, 1, 7, 3, 9, 1, 9, 1, 7, 9, 3, 7, 9, 9, 1, 1, 9, 1, 7, 1, 7, 9, 1, 7, 9, 1, 7, 7, 1, 3, 9, 1, 3, 3, 9, 7, 7, 1, 1, 7, 9, 9, 7, 9, 7, 1, 3, 7, 9, 1, 7, 9, 1, 3, 7, 9, 3, 1, 3, 7, 3, 1, 3, 3, 1, 3, 9, 1, 1, 7, 7, 3, 9, 1, 7, 7, 9, 1, 1, 1, 1, 3, 7, 7, 9, 7, 7, 9, 3, 7, 1, 7, 9, 3, 9, 1, 3, 3, 1, 3, 7, 3, 7, 7, 9, 9, 1, 3, 7, 9, 1, 3, 7, 1, 7, 1, 9, 3, 7, 7, 3, 1, 3, 3, 3, 7, 9, 7, 3, 7, 3, 7, 3, 1, 9, 7, 7, 9, 3, 1, 3, 7, 1, 9, 7, 9, 1, 1, 3, 3, 7, 3, 3, 1, 3, 9, 1, 3, 3, 1, 9, 1, 7, 7, 9, 3, 9, 9, 7, 1, 3, 9, 9, 1, 3, 9, 1, 3, 7, 3, 7, 1, 9, 7, 9, 7, 1, 9, 7, 9, 1, 1, 3, 9, 9, 1, 9, 3, 7, 1, 7, 9, 3, 7, 3, 7, 1, 3, 7, 9, 3, 1, 3, 7, 3, 7, 9, 1, 9, 1, 3, 9, 1, 7, 1, 3, 7, 9, 7, 3, 1, 7, 3, 7, 9, 1, 1, 3, 1, 7, 1, 9, 9, 7, 9, 7, 9, 3, 9, 7, 3, 9, 1, 9, 7, 1, 3, 1, 7, 3, 9, 7, 3, 7, 9, 1, 7, 7, 1, 3, 1, 7, 9, 9, 1, 3, 7, 3, 3, 9, 3, 7, 7, 9, 1, 9, 3, 9, 1, 1, 9, 9, 1, 7, 7, 3, 3, 9, 1, 3, 9, 7, 7, 7, 9, 1, 3, 9, 3, 3, 7, 7, 1, 7, 1, 9, 1, 7, 9, 3, 9, 1, 9, 1, 3, 9, 7, 3, 7, 1, 3, 3, 1, 9, 3, 9, 9, 9, 9, 7, 7, 1, 3, 1, 3, 9, 1, 3, 7, 9, 1, 3, 7, 9, 9, 3, 7, 9, 7, 9, 7, 1, 3, 7, 1, 7, 9, 9, 3, 7, 1, 1, 3, 7, 9, 3, 7, 9, 1, 9, 7, 1, 1, 9, 3, 7, 9, 9, 9, 7, 7, 3, 9, 1, 7, 7, 3, 9, 1, 7, 7, 3, 7, 7, 3, 9, 3, 7, 9, 3, 1, 9, 1, 3, 3, 1, 3, 7, 7, 3, 1, 7, 9, 7, 7, 9, 3, 1, 7, 9, 1, 9, 3, 1, 7, 3, 1, 9, 7, 7, 7, 3, 7, 7, 7, 9, 9, 7, 7, 7, 3, 7, 3, 1, 1, 7, 9, 3, 9, 3, 9, 1, 9, 7, 1, 3, 9, 1, 1, 3, 7, 1, 9, 7, 9, 1, 7, 1, 3, 9, 7, 9, 1, 3, 9, 3, 7, 7, 9, 9, 1, 1, 3, 9, 3, 9, 1, 3, 1, 7, 1, 3, 9, 1, 3, 7, 1, 7, 3, 9, 3, 3, 9, 1, 3, 9, 1, 7, 7, 9, 3, 9, 1, 1, 3, 9, 1, 3, 7, 9, 3, 1, 7, 7, 3, 7, 3, 7, 1, 3, 9, 9, 1, 1, 7, 3, 7, 9, 3, 3, 9, 1, 3, 7, 9, 1, 7, 9, 1, 3, 9, 7, 1, 7, 1, 3, 7, 9, 3, 1, 1, 3, 3, 9, 7, 1, 9, 1, 7, 7, 9, 3, 9, 7, 1, 9, 9, 3, 1, 9, 7, 9, 9, 1, 7, 3, 3, 3, 7, 7, 9, 3, 1, 9, 3, 7, 7, 9, 1, 3, 7, 9, 3, 7, 7, 1, 9, 7, 9, 9, 3, 9, 3, 3, 1, 9, 1, 3, 9, 1, 7, 7, 7, 3, 1, 7, 1, 7, 3, 9, 1, 3, 9, 3, 9, 1, 1, 1, 3, 1, 3, 3, 1, 9, 7, 3, 7, 9, 1, 7, 7, 9, 1, 3, 9, 7, 3, 9, 1, 9, 3, 7, 1, 9, 1, 7, 3, 9, 1, 9, 3, 1, 7, 3, 1, 7, 3, 3, 7, 3, 7, 3, 9, 1, 1, 9, 3, 9, 3, 9, 1, 3, 9, 3, 7, 9, 7, 1, 3, 1, 1, 7, 3, 7, 3, 7, 1, 3, 9, 7, 1, 9, 1, 7, 3, 9, 7, 3, 7, 3, 1, 1, 9, 3, 3, 7, 3, 1, 9, 1, 9, 1, 9, 3, 9, 3, 9, 9, 3, 1, 9, 1, 7, 9, 1, 9, 1, 1, 3, 7, 3, 1, 3, 1, 3, 3, 1, 7, 7, 7, 1, 7, 3, 7, 1, 7, 7, 3, 7, 3, 9, 9, 3, 7, 9, 3, 3, 1, 1, 3, 3, 9, 3, 9, 7, 1, 9, 1, 7, 9, 1, 3, 9, 1, 9, 7, 3, 9, 1, 7, 9, 9, 3, 9, 1, 9, 1, 1, 3, 3, 3, 7, 1, 3, 1, 9, 7, 7, 1, 3, 1, 3, 7, 7, 3, 7, 3, 9, 1, 7, 3, 7, 1, 7, 9, 3, 7, 1, 3, 3, 9, 7, 1, 9, 1, 3, 1, 7, 3, 7, 3, 9, 7, 1, 3, 1, 1, 3, 1, 9, 3, 7, 9, 1, 7, 7, 9, 3, 9, 7, 9, 7, 3, 1, 7, 1, 3, 9, 3, 1, 7, 1, 7, 1, 3, 9, 9, 7, 1, 7, 3, 9, 7, 1, 3, 9, 1, 7, 9, 7, 1, 7, 1, 1, 3, 7, 3, 9, 7, 3, 7, 3, 7, 3, 9, 7, 7, 9, 1, 1, 7, 9, 3, 7, 3, 9, 3, 9, 3, 9, 9, 3, 1, 9, 3, 7, 1, 7, 3, 7, 1, 3, 9, 9, 7, 7, 9, 3, 9, 1, 3, 9, 9, 3, 1, 1, 3, 1, 1, 3, 3, 7, 3, 7, 7, 3, 7, 3, 1, 7, 1, 9, 7, 1, 7, 9, 7, 3, 9, 7, 3, 3, 1, 9, 1, 3, 1, 3, 3, 3, 9, 3, 7, 3, 9, 9, 3, 3, 1, 7, 9, 1, 7, 3, 7, 3, 9, 3, 7, 1, 7, 1, 7, 1, 9, 1, 1, 9, 1, 3, 3, 1, 7, 7, 3, 9, 1, 1, 3, 9, 1, 3, 7, 3, 1, 7, 7, 3, 1, 7, 1, 1, 9, 7, 3, 9, 7, 1, 9, 7, 3, 1, 9, 3, 9, 1, 3, 9, 3, 3, 7, 3, 9, 1, 9, 1, 7, 7, 3, 7, 3, 7, 1, 3, 9, 3, 9, 1, 3, 7, 1, 9, 7, 1, 3, 9, 1, 3, 9, 1, 7, 7, 1, 1, 3, 7, 9, 1, 3, 9, 3, 9, 7, 1, 9, 3, 9, 1, 7, 1, 1, 3, 9, 1, 1, 3, 9, 3, 7, 7, 9, 9, 1, 1, 3, 9, 3, 9, 1, 3, 1, 3, 3, 7, 9, 1, 9, 9, 7, 7, 9, 1, 3, 9, 7, 7, 9, 7, 1, 3, 7, 3, 7, 1, 7, 3, 3, 1, 9, 9, 3, 7, 3, 9, 9, 3, 9, 3, 1, 3, 3, 1, 1, 3, 1, 3, 9, 3, 7, 7, 7, 1, 9, 1, 1, 7, 7, 9, 7, 3, 9, 1, 7, 9, 3, 9, 1, 9, 3, 9, 7, 3, 9, 9, 3, 7, 9, 9, 3, 7, 1, 1, 3, 7, 7, 3, 9, 3, 1, 9, 1, 3, 3, 1, 7, 1, 3, 9, 1, 7, 1, 3, 7, 1, 9, 3, 1, 1, 9, 3, 1, 7, 1, 1, 7, 7, 9, 1, 7, 7, 9, 9, 1, 1, 7, 7, 9, 9, 1, 7, 9, 1, 1, 7, 3, 9, 3, 3, 1, 3, 9, 1, 3, 9, 3, 7, 1, 9, 3, 3, 3, 1, 9, 9, 1, 3, 7, 9, 9, 7, 3, 3, 3, 9, 3, 9, 1, 1, 7, 1, 9, 1, 7, 9, 9, 1, 3, 9, 7, 1, 3, 9, 7, 9, 7, 7, 3, 9, 3, 9, 7, 9, 7, 1, 1, 7, 1, 3, 3, 1, 9, 9, 1, 9, 9, 7, 9, 3, 7, 7, 3, 1, 9, 7, 3, 1, 7, 9, 9, 7, 9, 1, 1, 1, 7, 9, 9, 1, 3, 3, 9, 7, 3, 3, 7, 3, 9, 1, 7, 3, 1, 3, 3, 7, 7, 9, 7, 3, 1, 3, 7, 9, 3, 1, 7, 9, 1, 9, 3, 1, 3, 1, 3, 3, 9, 1, 3, 1, 1, 7, 7, 9, 7, 9, 9, 3, 9, 1, 3, 7, 9, 1, 1, 3, 9, 9, 7, 7, 9, 1, 9, 7, 3, 9, 3, 7, 3, 1, 9, 9, 1, 7, 1, 3, 9, 7, 1, 7, 1, 9, 1, 7, 3, 3, 7, 9, 1, 1, 7, 1, 3, 1, 9, 1, 7, 7, 1, 3, 7, 3, 9, 1, 3, 3, 7, 7, 7, 9, 3, 7, 9, 1, 7, 1, 3, 9, 3, 9, 9, 3, 9, 9, 3, 1, 7, 3, 1, 1, 7, 3, 7, 3, 9, 3, 9, 1, 1, 1, 9, 9, 1, 3, 9, 3, 7, 1, 3, 7, 7, 1, 7, 9, 3, 9, 1, 7, 9, 9, 7, 3, 7, 1, 3, 9, 1, 3, 7, 7, 7, 9, 1, 3, 7, 1, 1, 7, 1, 3, 9, 3, 9, 3, 1, 7, 9, 9, 7, 1, 9, 1, 7, 9, 1, 1, 3, 9, 1, 3, 1, 7, 9, 9, 1, 7, 3, 9, 1, 1, 7, 1, 7, 1, 9, 3, 7, 3, 9, 9, 7, 9, 3, 1, 7, 1, 3, 9, 1, 3, 9, 7, 1, 7, 9, 3, 7, 1, 7, 9, 3, 3, 9, 1, 1, 3, 9, 7, 1, 9, 1, 7, 9, 9, 1, 3, 7, 9, 3, 3, 1, 9, 3, 9, 1, 3, 3, 7, 7, 1, 3, 3, 9, 3, 1, 3, 7, 7, 9, 3, 9, 3, 1, 7, 9, 1, 7, 3, 1, 1, 9, 1, 9, 1, 9, 9, 7, 7, 3, 9, 1, 7, 3, 7, 3, 1, 9, 1, 3, 1, 7, 3, 7, 9, 7, 3, 7, 3, 9, 1, 3, 7, 1, 9, 9, 1, 7, 9, 1, 7, 9, 7, 7, 9, 1, 3, 9, 9, 7, 9, 9, 1, 7, 3, 3, 1, 9, 3, 9, 1, 3, 9, 3, 1, 3, 1, 7, 1, 7, 1, 9, 1, 7, 7, 9, 1, 7, 7, 9, 3, 1, 3, 1, 3, 1, 7, 1, 7, 9, 7, 1, 3, 1, 9, 9, 9, 1, 3, 9, 1, 1, 7, 9, 7, 9, 3, 7, 1, 3, 9, 1, 7, 3, 7, 9, 1, 7, 9, 9, 3, 1, 7, 1, 9, 3, 9, 1, 1, 7, 9, 3, 1, 7, 1, 9, 7, 1, 7, 9, 9, 1, 7, 1, 7, 7, 1, 3, 9, 1, 3, 7, 3, 3, 1, 1, 3, 3, 1, 7, 9, 3, 1, 1, 9, 3, 7, 3, 9, 7, 7, 9, 7, 1, 1, 3, 1, 3, 9, 3, 1, 1, 1, 7, 1, 7, 3, 9, 7, 9, 3, 7, 9, 1, 7, 7, 9, 7, 9, 3, 3, 7, 3, 3, 9, 3, 7, 1, 1, 3, 1, 7, 1, 1, 7, 3, 1, 1, 1, 3, 3, 9, 7, 1, 1, 7, 9, 7, 9, 9, 1, 7, 3, 1, 9, 3, 9, 7, 1, 3, 7, 3, 7, 3, 7, 3, 1, 3, 9, 1, 7, 9, 9, 7, 1, 3, 1, 9, 3, 9, 9, 3, 7, 7, 3, 7, 3, 9, 9, 1, 3, 3, 1, 7, 1, 7, 7, 9, 1, 1, 9, 9, 3, 7, 3, 9, 3, 7, 1, 3, 7, 1, 7, 1, 3, 7, 9, 1, 7, 3, 7, 9, 1, 1, 9, 7, 1, 7, 1, 7, 9, 3, 1, 1, 7, 9, 9, 3, 9, 3, 9, 1, 7, 3, 9, 3, 9, 3, 7, 9, 7, 3, 9, 3, 9, 1, 1, 7, 7, 1, 3, 7, 3, 9, 1, 3, 7, 1, 1, 7, 9, 7, 1, 3, 7, 7, 9, 1, 1, 3, 7, 3, 7, 1, 7, 9, 3, 9, 7, 3, 9, 7, 7, 1, 3, 9, 3, 9, 3, 7, 3, 7, 9, 3, 7, 1, 1, 3, 1, 9, 3, 3, 1, 9, 7, 7, 1, 9, 1, 7, 9, 7, 3, 9, 3, 7, 3, 7, 1, 7, 3, 3, 9, 1, 9, 9, 9, 7, 1, 1, 7, 1, 3, 1, 3, 1, 7, 9, 9, 3, 9, 1, 7, 3, 3, 3, 3, 9, 1, 7, 9, 3, 9, 7, 9, 1, 7, 9, 1, 7, 3, 7, 1, 7, 1, 3, 9, 7, 9, 1, 3, 9, 7, 1, 3, 9, 1, 3, 3, 3, 9, 7, 3, 1, 9, 3, 1, 7, 3, 1, 1, 7, 9, 9, 3, 7, 9, 3, 7, 9, 3, 7, 9, 1, 3, 1, 1, 7, 3, 1, 9, 9, 1, 9, 1, 1, 9, 3, 9, 1, 3, 9, 7, 3, 7, 1, 7, 7, 7, 1, 7, 1, 7, 3, 7, 3, 1, 3, 9, 1, 3, 9, 7, 1, 9, 1, 3, 1, 1, 1, 7, 1, 3, 9, 3, 7, 7, 9, 1, 1, 3, 1, 3, 7, 3, 9, 1, 3, 9, 7, 9, 7, 7, 3, 1, 9, 9, 7, 9, 3, 1, 3, 1, 9, 7, 1, 7, 3, 3, 9, 7, 7, 9, 3, 1, 9, 3, 1, 9, 1, 9, 1, 7, 9, 3, 9, 9, 9, 3, 9, 9, 7, 3, 3, 3, 9, 1, 3, 1, 7, 9, 3, 3, 1, 9, 3, 7, 1, 3, 1, 3, 9, 7, 7, 3, 1, 3, 9, 1, 9, 1, 3, 9, 1, 3, 3, 7, 7, 9, 1, 3, 9, 7, 1, 7, 7, 3, 7, 9, 9, 3, 1, 1, 3, 1, 7, 1, 3, 7, 3, 1, 1, 9, 3, 7, 3, 9, 7, 3, 7, 3, 1, 1, 3, 9, 3, 7, 1, 9, 1, 7, 1, 9, 9, 1, 3, 7, 9, 3, 3, 1, 9, 7, 7, 9, 1, 3, 9, 3, 1, 9, 1, 3, 1, 1, 3, 9, 1, 3, 9, 1, 7, 3, 7, 1, 3, 9, 7, 9, 7, 3, 1, 3, 9, 7, 3, 1, 1, 7, 3, 9, 3, 7, 9, 9, 1, 7, 7, 3, 9, 3, 7, 3, 1, 7, 3, 9, 7, 9, 7, 9, 7, 9, 1, 3, 3, 1, 7, 7, 9, 9, 3, 9, 7, 1, 9, 1, 3, 1, 7, 9, 3, 9, 9, 7, 1, 9, 9, 7, 9, 1, 7, 7, 9, 1, 9, 3, 9, 1, 1, 3, 7, 7, 9, 1, 1, 7, 1, 7, 1, 3, 9, 1, 3, 7, 1, 3, 7, 3, 9, 1, 1, 3, 1, 1, 3, 9, 1, 3, 9, 7, 9, 1, 1, 9, 3, 3, 7, 3, 7, 7, 9, 9, 3, 9, 3, 9, 7, 3, 9, 3, 9, 7, 7, 9, 1, 3, 9, 1, 7, 1, 1, 9, 7, 3, 1, 7, 7, 3, 3, 1, 3, 9, 3, 9, 9, 3, 9, 7, 9, 1, 7, 7, 1, 3, 9, 1, 9, 3, 3, 7, 3, 9, 1, 3, 3, 7, 3, 1, 9, 3, 3, 9, 1, 9, 1, 7, 7, 3, 1, 9, 3, 1, 1, 1, 9, 1, 7, 3, 9, 9, 1, 3, 7, 3, 7, 7, 9, 3, 7, 9, 1, 9, 3, 1, 3, 1, 7, 1, 3, 9, 7, 1, 3, 9, 3, 1, 1, 3, 1, 3, 7, 3, 1, 3, 9, 1, 9, 9, 7, 3, 7, 9, 1, 9, 1, 7, 7, 1, 3, 9, 1, 3, 1, 7, 9, 3, 7, 9, 3, 7, 1, 3, 1, 3, 7, 3, 1, 7, 7, 3, 3, 7, 9, 3, 3, 9, 1, 3, 1, 1, 3, 7, 1, 9, 9, 3, 7, 9, 9, 1, 3, 9, 1, 7, 3, 9, 7, 7, 3, 1, 1, 7, 3, 7, 9, 3, 9, 1, 3, 3, 9, 1, 1, 7, 7, 3, 9, 7, 1, 7, 9, 3, 7, 3, 7, 7, 9, 9, 9, 1, 7, 9, 7, 3, 7, 1, 9, 1, 3, 1, 3, 1, 1, 3, 1, 7, 1, 7, 7, 9, 7, 3, 9, 7, 7, 1, 9, 9, 7, 9, 3, 7, 3, 9, 3, 9, 3, 7, 7, 7, 3, 7, 9, 1, 7, 3, 7, 3, 7, 1, 9, 3, 7, 1, 7, 3, 9, 1, 3, 9, 7, 9, 7, 1, 1, 7, 3, 9, 7, 9, 9, 1, 7, 3, 1, 3, 7, 9, 3, 9, 7, 1, 3, 9, 3, 7, 1, 9, 9, 7, 9, 1, 3, 3, 3, 7, 3, 1, 7, 9, 9, 3, 7, 9, 1, 1, 3, 7, 7, 7, 3, 1, 7, 7, 9, 1, 3, 1, 9, 1, 9, 1, 7, 1, 1, 3, 7, 9, 3, 7, 1, 1, 7, 3, 1, 7, 7, 9, 3, 1, 7, 3, 7, 9, 3, 7, 1, 1, 1, 3, 7, 7, 1, 7, 7, 3, 1, 7, 9, 3, 3, 3, 9, 7, 1, 1, 9, 9, 3, 3, 1, 7, 1, 3, 9, 9, 3, 1, 7, 1, 3, 1, 3, 9, 3, 1, 9, 7, 3, 7, 3, 9, 7, 9, 3, 9, 3, 1, 7, 9, 3, 7, 9, 1, 9, 7, 1, 3, 7, 9, 3, 7, 1, 3, 3, 9, 1, 9, 3, 9, 1, 7, 9, 3, 1, 9, 9, 1, 7, 3, 1, 1, 9, 3, 7, 7, 1, 7, 9, 7, 1, 7, 3, 1, 7, 9, 9, 7, 3, 3, 9, 7, 1, 1, 9, 3, 1, 3, 9, 1, 9, 9, 9, 1, 7, 3, 3, 9, 1, 3, 9, 9, 1, 3, 7, 1, 7, 3, 1, 1, 3, 9, 3, 1, 3, 7, 9, 1, 1, 3, 7, 9, 1, 9, 9, 1, 3, 1, 7, 1, 3, 1, 9, 3, 7, 1, 7, 7, 7, 9, 3, 7, 3, 1, 9, 3, 1, 9, 9, 7, 9, 7, 3, 9, 3, 1, 1, 3, 7, 9, 7, 9, 3, 1, 3, 1, 7, 1, 7, 9, 3, 9, 1, 7, 9, 1, 9, 3, 9, 1, 3, 3, 7, 9, 1, 9, 3, 1, 3, 3, 1, 1, 7, 9, 1, 7, 1, 3, 7, 9, 3, 9, 1, 3, 3, 1, 7, 7, 3, 9, 7, 1, 9, 1, 7, 1, 3, 9, 3, 3, 7, 7, 3, 1, 1, 3, 7, 9, 1, 3, 9, 7, 7, 3, 9, 3, 7, 7, 9, 7, 1, 1, 9, 9, 3, 1, 3, 3, 9, 1, 7, 9, 1, 1, 7, 3, 1, 7, 1, 3, 9, 9, 7, 3, 9, 7, 3, 9, 9, 7, 7, 1, 9, 7, 3, 1, 1, 9, 9, 7, 3, 1, 7, 3, 9, 7, 3, 1, 7, 3, 9, 9, 7, 1, 3, 9, 3, 7, 3, 7, 3, 7, 9, 9, 1, 3, 9, 1, 7, 3, 1, 7, 3, 7, 9, 3, 9, 1, 3, 7, 9, 1, 7, 1, 3, 3, 1, 7, 7, 9, 1, 7, 9, 9, 1, 1, 3, 1, 3, 1, 1, 7, 7, 1, 9, 1, 3, 9, 3, 9, 1, 9, 7, 3, 1, 7, 1, 3, 7, 3, 7, 7, 3, 9, 3, 7, 1, 3, 7, 9, 9, 1, 9, 7, 9, 7, 3, 9, 1, 9, 3, 1, 7, 1, 3, 9, 1, 3, 1, 1, 9, 9, 1, 7, 7, 3, 3, 7, 9, 7, 3, 7, 9, 9, 9, 9, 1, 1, 9, 1, 3, 9, 9, 7, 7, 3, 3, 3, 1, 7, 7, 7, 9, 9, 9, 7, 7, 3, 1, 3, 7, 1, 3, 3, 7, 7, 9, 1, 3, 1, 3, 9, 7, 9, 1, 3, 1, 1, 9, 1, 3, 3, 1, 7, 1, 7, 3, 3, 7, 9, 1, 7, 1, 9, 3, 9, 7, 1, 7, 9, 9, 7, 3, 1, 7, 9, 7, 7, 9, 9, 1, 7, 3, 1, 1, 3, 1, 3, 9, 3, 1, 3, 9, 3, 1, 1, 9, 3, 9, 3, 1, 9, 3, 1, 1, 1, 7, 1, 9, 1, 3, 9, 3, 7, 3, 9, 7, 7, 9, 1, 1, 9, 1, 7, 1, 7, 1, 9, 3, 7, 9, 1, 9, 3, 3, 7, 9, 9, 3, 7, 7, 1, 7, 9, 7, 1, 1, 3, 7, 9, 7, 9, 7, 9, 1, 3, 3, 1, 1, 7, 3, 9, 3, 7, 3, 3, 3, 7, 7, 9, 3, 1, 1, 7, 1, 9, 1, 7, 7, 9, 3, 7, 1, 7, 9, 3, 7, 1, 9, 9, 1, 9, 7, 3, 7, 3, 9, 3, 3, 1, 7, 7, 9, 3, 1, 7, 9, 1, 9, 1, 7, 3, 3, 3, 9, 7, 1, 3, 1, 1, 7, 9, 9, 7, 9, 7, 3, 7, 1, 7, 3, 3, 3, 7, 7, 3, 3, 7, 1, 9, 1, 3, 9, 3, 1, 9, 3, 7, 7, 1, 1, 9, 7, 9, 3, 7, 9, 3, 9, 3, 9, 7, 3, 9, 9, 7, 9, 9, 1, 7, 3, 1, 7, 3, 9, 7, 7, 1, 7, 9, 1, 3, 3, 9, 3, 9, 3, 7, 3, 1, 9, 1, 7, 1, 3, 7, 9, 1, 1, 3, 9, 3, 9, 7, 1, 7, 9, 9, 3, 9, 7, 1, 3, 9, 7, 3, 3, 7, 1, 1, 7, 3, 7, 9, 1, 7, 3, 3, 9, 7, 9, 1, 7, 9, 9, 1, 7, 3, 9, 7, 1, 3, 7, 7, 7, 9, 1, 7, 1, 9, 1, 3, 9, 3, 1, 3, 7, 1, 3, 3, 1, 3, 7, 7, 3, 3, 7, 9, 1, 7, 1, 3, 3, 1, 7, 9, 3, 9, 1, 7, 3, 7, 7, 3, 9, 3, 9, 7, 1, 3, 1, 7, 7, 9, 3, 7, 9, 7, 1, 1, 3, 1, 7, 9, 1, 9, 7, 3, 1, 7, 7, 9, 1, 3, 1, 3, 9, 7, 7, 1, 7, 1, 3, 9, 1, 7, 9, 7, 3, 7, 9, 3, 7, 7, 3, 9, 1, 7, 9, 9, 1, 7, 7, 3, 9, 7, 9, 3, 9, 1, 7, 1, 9, 3, 9, 1, 7, 3, 9, 9, 7, 1, 1, 7, 9, 3, 1, 9, 1, 7, 3, 1, 7, 1, 3, 9, 7, 3, 7, 9, 1, 9, 1, 7, 9, 7, 3, 9, 9, 1, 7, 9, 3, 1, 3, 3, 1, 7, 7, 9, 3, 1, 7, 1, 7, 1, 3, 9, 9, 3, 9, 3, 7, 7, 1, 3, 9, 1, 3, 1, 1, 3, 3, 1, 9, 7, 9, 9, 7, 3, 7, 9, 9, 1, 9, 9, 3, 1, 3, 7, 7, 3, 1, 3, 7, 1, 3, 7, 3, 1, 3, 9, 7, 1, 9, 3, 1, 1, 7, 3, 7, 1, 7, 1, 3, 1, 7, 7, 1, 9, 1, 9, 7, 1, 9, 3, 7, 3, 9, 1, 3, 7, 9, 1, 3, 9, 7, 9, 3, 1, 7, 1, 9, 7, 7, 3, 3, 9, 1, 9, 3, 9, 7, 3, 9, 3, 1, 3, 1, 3, 7, 9, 1, 7, 9, 1, 3, 7, 9, 3, 9, 1, 9, 3, 1, 1, 9, 7, 3, 7, 3, 7, 9, 7, 3, 1, 3, 9, 1, 3, 7, 9, 1, 7, 9, 3, 1, 7, 9, 3, 1, 9, 1, 3, 1, 1, 7, 1, 3, 3, 9, 9, 3, 9, 9, 1, 3, 7, 3, 9, 1, 1, 3, 7, 7, 1, 7, 9, 9, 1, 7, 9, 9, 7, 3, 9, 7, 1, 3, 7, 3, 9, 9, 7, 1, 7, 3, 7, 9, 3, 7, 3, 1, 1, 7, 9, 1, 1, 3, 9, 1, 7, 1, 9, 7, 9, 9, 1, 7, 1, 1, 9, 1, 7, 9, 9, 3, 9, 1, 3, 7, 7, 3, 9, 1, 1, 3, 9, 1, 1, 7, 9, 3, 1, 1, 9, 9, 1, 7, 9, 9, 3, 3, 1, 7, 1, 1, 9, 3, 9, 1, 3, 3, 7, 3, 9, 9, 9, 7, 1, 1, 1, 9, 7, 3, 9, 9, 1, 1, 1, 7, 3, 1, 7, 1, 3, 7, 3, 3, 9, 9, 3, 3, 7, 1, 1, 3, 9, 3, 9, 7, 3, 7, 7, 1, 7, 9, 3, 7, 3, 9, 1, 9, 1, 3, 1, 1, 3, 9, 3, 7, 7, 9, 7, 9, 3, 7, 9, 1, 1, 9, 1, 7, 9, 1, 9, 7, 3, 1, 7, 7, 9, 9, 9, 3, 9, 1, 3, 7, 9, 3, 7, 9, 7, 1, 9, 7, 1, 1, 7, 3, 1, 7, 3, 3, 7, 9, 1, 3, 9, 7, 3, 9, 1, 3, 9, 3, 7, 1, 7, 1, 7, 9, 9, 3, 1, 3, 9, 7, 7, 3, 3, 7, 9, 9, 7, 9, 1, 3, 1, 9, 3, 9, 7, 1, 7, 3, 9, 1, 7, 3, 7, 9, 1, 3, 7, 7, 9, 1, 7, 7, 3, 9, 1, 9, 7, 9, 7, 1, 3, 7, 1, 9, 7, 9, 7, 1, 3, 1, 3, 7, 9, 1, 9, 1, 3, 7, 3, 7, 3, 1, 3, 1, 1, 1, 9, 9, 7, 7, 9, 3, 9, 1, 3, 1, 9, 1, 9, 3, 9, 7, 7, 9, 3, 7, 3, 3, 3, 9, 3, 9, 7, 9, 3, 1, 7, 9, 3, 7, 7, 9, 1, 7, 1, 3, 7, 7, 7, 9, 3, 1, 3, 7, 3, 1, 9, 9, 1, 3, 7, 9, 7, 3, 3, 9, 9, 3, 7, 9, 9, 7, 3, 3, 3, 7, 7, 9, 3, 9, 1, 7, 3, 3, 7, 3, 3, 9, 1, 3, 9, 1, 7, 1, 3, 7, 9, 9, 1, 1, 7, 9, 1, 1, 3, 9, 9, 3, 3, 1, 7, 3, 9, 1, 1, 3, 1, 3, 7, 1, 9, 7, 9, 3, 9, 1, 7, 3, 7, 3, 7, 1, 1, 7, 9, 7, 3, 7, 3, 3, 1, 3, 1, 7, 9, 3, 7, 1, 3, 9, 9, 1, 1, 9, 9, 1, 9, 1, 1, 1, 7, 9, 3, 3, 1, 7, 1, 3, 7, 7, 3, 9, 3, 9, 1, 7, 9, 1, 1, 7, 1, 9, 1, 9, 3, 3, 9, 3, 9, 3, 9, 1, 3, 7, 1, 3, 7, 7, 7, 9, 9, 1, 7, 3, 9, 1, 3, 1, 7, 1, 9, 3, 9, 7, 9, 7, 1, 1, 3, 9, 9, 3, 9, 7, 7, 7, 9, 3, 3, 3, 7, 9, 1, 7, 1, 3, 7, 1, 3, 9, 7, 3, 9, 9, 9, 1, 9, 7, 7, 1, 3, 9, 1, 3, 7, 7, 9, 7, 3, 7, 3, 1, 3, 3, 7, 3, 9, 1, 7, 7, 9, 3, 9, 1, 3, 7, 7, 9, 7, 1, 9, 1, 7, 1, 9, 7, 7, 1, 9, 7, 3, 9, 7, 1, 9, 9, 1, 7, 9, 7, 9, 1, 1, 9, 1, 7, 3, 7, 3, 7, 1, 7, 3, 1, 3, 9, 3, 1, 7, 7, 9, 9, 1, 7, 7, 3, 3, 1, 9, 1, 7, 9, 1, 3, 7, 7, 3, 9, 7, 3, 9, 3, 7, 3, 3, 1, 7, 7, 3, 9, 1, 7, 9, 7, 9, 3, 1, 9, 9, 1, 7, 9, 9, 3, 9, 1, 7, 9, 3, 7, 1, 1, 7, 3, 7, 9, 1, 9, 1, 7, 3, 3, 9, 3, 7, 3, 9, 3, 9, 7, 9, 9, 1, 9, 3, 7, 1, 3, 7, 1, 1, 3, 9, 7, 9, 7, 3, 1, 3, 7, 9, 3, 7, 1, 9, 3, 9, 1, 3, 9, 1, 3, 7, 1, 3, 9, 7, 1, 3, 3, 3, 1, 7, 3, 1, 7, 7, 3, 3, 9, 9, 9, 1, 9, 7, 1, 3, 3, 7, 7, 9, 1, 7, 3, 3, 1, 1, 3, 9, 1, 3, 3, 3, 9, 3, 7, 1, 3, 9, 1, 9, 1, 1, 3, 1, 9, 3, 7, 1, 3, 9, 1, 9, 7, 1, 7, 7, 3, 9, 9, 3, 1, 7, 7, 7, 1, 3, 9, 3, 3, 7, 1, 3, 1, 7, 3, 7, 7, 9, 3, 7, 3, 7, 3, 7, 3, 9, 1, 9, 1, 1, 3, 9, 7, 9, 9, 1, 7, 9, 1, 7, 9, 1, 9, 9, 1, 7, 3, 9, 1, 3, 7, 3, 7, 1, 7, 7, 9, 1, 3, 3, 3, 1, 3, 3, 1, 1, 3, 9, 7, 3, 7, 1, 9, 3, 7, 9, 3, 1, 1, 7, 9, 1, 7, 3, 7, 9, 7, 9, 7, 3, 3, 7, 9, 1, 9, 1, 3, 3, 7, 3, 7, 9, 1, 3, 7, 3, 9, 3, 1, 9, 1, 1, 7, 3, 1, 3, 1, 3, 7, 1, 7, 7, 3, 9, 7, 9, 7, 1, 7, 3, 1, 3, 9, 1, 3, 7, 7, 1, 9, 7, 9, 1, 1, 9, 9, 7, 3, 1, 7, 9, 9, 9, 1, 1, 1, 3, 7, 1, 3, 3, 9, 7, 9, 1, 9, 1, 7, 1, 7, 1, 3, 7, 3, 1, 3, 9, 1, 1, 3, 9, 7, 9, 1, 7, 9, 1, 1, 3, 3, 7, 3, 9, 1, 1, 9, 7, 7, 9, 7, 3, 9, 1, 1, 9, 7, 3, 9, 7, 9, 7, 3, 9, 1, 1, 7, 9, 1, 7, 1, 7, 3, 9, 7, 1, 7, 9, 9, 1, 3, 1, 1, 9, 3, 7, 3, 7, 3, 3, 9, 1, 1, 1, 7, 9, 3, 7, 7, 3, 3, 9, 7, 3, 9, 1, 1, 3, 9, 1, 3, 9, 3, 9, 7, 9, 1, 1, 7, 1, 7, 3, 3, 7, 3, 1, 9, 1, 3, 7, 3, 3, 9, 1, 9, 1, 3, 7, 7, 9, 7, 7, 3, 9, 1, 7, 9, 7, 1, 3, 9, 1, 7, 1, 7, 3, 9, 3, 9, 1, 7, 9, 3, 7, 3, 9, 7, 3, 9, 3, 7, 7, 7, 9, 1, 9, 9, 3, 9, 3, 9, 7, 1, 7, 3, 1, 3, 1, 1, 3, 9, 9, 3, 1, 7, 1, 3, 9, 1, 1, 3, 7, 7, 3, 9, 1, 9, 3, 9, 7, 1, 9, 1, 3, 9, 3, 7, 7, 1, 7, 3, 1, 3, 7, 3, 1, 7, 3, 3, 7, 7, 1, 9, 7, 1, 7, 3, 1, 9, 3, 3, 1, 7, 1, 1, 7, 3, 7, 3, 9, 7, 9, 1, 9, 9, 1, 7, 3, 7, 3, 7, 1, 3, 9, 9, 1, 3, 7, 9, 3, 9, 7, 9, 7, 1, 7, 7, 3, 7, 1, 1, 3, 9, 9, 7, 3, 9, 3, 7, 3, 7, 1, 1, 9, 9, 9, 1, 3, 7, 7, 3, 9, 3, 7, 9, 3, 1, 3, 9, 1, 1, 3, 7, 1, 7, 9, 1, 3, 9, 7, 1, 3, 7, 9, 3, 1, 3, 1, 9, 7, 3, 1, 1, 3, 9, 7, 1, 9, 1, 7, 3, 9, 9, 1, 3, 9, 1, 1, 3, 9, 1, 7, 1, 3, 1, 3, 7, 3, 7, 1, 7, 7, 3, 1, 7, 3, 9, 3, 9, 9, 1, 9, 3, 7, 9, 1, 7, 7, 3, 1, 1, 1, 7, 3, 7, 9, 7, 1, 9, 7, 3, 7, 3, 9, 7, 3, 9, 9, 1, 3, 9, 9, 3, 7, 1, 3, 3, 9, 9, 7, 7, 3, 1, 1, 7, 7, 9, 3, 1, 3, 9, 3, 7, 3, 9, 3, 7, 1, 7, 7, 3, 7, 9, 9, 1, 7, 9, 9, 1, 9, 7, 3, 1, 3, 9, 3, 7, 3, 1, 1, 1, 7, 9, 3, 1, 9, 9, 9, 1, 7, 7, 3, 1, 7, 9, 1, 3, 9, 7, 3, 3, 7, 3, 1, 3, 3, 9, 7, 1, 9, 9, 1, 9, 1, 1, 7, 9, 7, 3, 3, 3, 3, 7, 3, 7, 3, 9, 1, 7, 9, 1, 7, 1, 3, 1, 7, 1, 7, 9, 3, 7, 1, 7, 9, 3, 9, 1, 3, 9, 9, 3, 1, 7, 9, 7, 3, 9, 1, 1, 3, 3, 9, 1, 7, 7, 1, 9, 7, 7, 9, 9, 1, 3, 1, 1, 3, 7, 9, 1, 9, 3, 1, 1, 7, 9, 9, 3, 1, 1, 7, 1, 3, 9, 3, 3, 3, 7, 1, 9, 7, 9, 1, 3, 7, 3, 1, 3, 3, 7, 1, 7, 3, 1, 1, 7, 9, 9, 3, 9, 1, 7, 1, 3, 1, 1, 7, 3, 1, 3, 7, 9, 9, 9, 1, 3, 7, 7, 3, 7, 3, 9, 9, 7, 1, 7, 9, 7, 3, 7, 3, 3, 9, 9, 7, 1, 7, 7, 9, 9, 3, 7, 9, 1, 3, 1, 7, 9, 3, 9, 3, 9, 7, 9, 1, 3, 9, 9, 3, 3, 7, 3, 3, 1, 7, 9, 9, 1, 3, 7, 1, 7, 1, 3, 1, 3, 3, 9, 1, 7, 9, 1, 7, 9, 1, 7, 1, 3, 7, 1, 1, 3, 7, 9, 9, 9, 3, 3, 9, 1, 9, 1, 1, 3, 9, 3, 9, 3, 1, 9, 9, 3, 9, 1, 7, 9, 1, 7, 1, 7, 3, 1, 7, 3, 1, 7, 9, 3, 9, 7, 9, 7, 1, 3, 7, 9, 1, 9, 3, 9, 7, 9, 7, 9, 3, 7, 1, 9, 3, 7, 9, 1, 7, 3, 1, 7, 7, 9, 7, 1, 3, 9, 1, 3, 3, 9, 3, 9, 7, 7, 1, 7, 1, 7, 9, 7, 1, 9, 1, 9, 3, 9, 1, 3, 1, 3, 3, 7, 1, 7, 9, 3, 3, 3, 9, 3, 1, 3, 7, 7, 3, 9, 1, 9, 7, 3, 7, 3, 3, 9, 1, 1, 9, 1, 1, 3, 1, 9, 1, 3, 9, 1, 9, 3, 7, 9, 3, 7, 1, 3, 1, 1, 3, 1, 3, 7, 1, 3, 3, 1, 7, 9, 1, 7, 9, 7, 9, 3, 9, 1, 7, 1, 7, 3, 9, 1, 9, 3, 7, 7, 3, 7, 9, 3, 1, 7, 1, 9, 7, 1, 7, 7, 3, 9, 1, 3, 9, 9, 3, 3, 1, 9, 7, 7, 3, 3, 7, 7, 1, 3, 7, 9, 7, 1, 7, 1, 3, 9, 3, 3, 1, 7, 1, 1, 1, 3, 7, 9, 1, 3, 9, 9, 7, 9, 7, 1, 3, 1, 7, 9, 7, 7, 9, 9, 1, 1, 3, 3, 1, 3, 9, 1, 7, 7, 7, 1, 3, 7, 9, 7, 9, 1, 9, 9, 1, 3, 3, 1, 3, 7, 9, 7, 9, 9, 1, 7, 9, 1, 3, 9, 1, 7, 9, 3, 7, 9, 3, 7, 9, 3, 1, 7, 3, 7, 7, 3, 9, 9, 1, 7, 9, 1, 3, 1, 7, 9, 7, 3, 1, 7, 1, 7, 1, 3, 3, 9, 3, 9, 1, 3, 3, 9, 1, 1, 1, 3, 1, 3, 9, 3, 7, 9, 1, 7, 9, 3, 7, 7, 3, 9, 1, 7, 3, 1, 1, 7, 7, 3, 3, 7, 7, 9, 3, 9, 1, 7, 1, 3, 7, 1, 9, 1, 7, 7, 3, 9, 9, 1, 3, 3, 7, 9, 3, 7, 9, 9, 9, 7, 1, 3, 1, 7, 1, 3, 9, 1, 3, 7, 1, 3, 9, 9, 9, 3, 1, 9, 3, 7, 7, 9, 3, 9, 7, 3, 9, 1, 3, 3, 3, 3, 9, 1, 3, 7, 7, 1, 9, 7, 9, 9, 3, 1, 1, 9, 1, 7, 1, 3, 9, 9, 7, 7, 9, 3, 1, 3, 7, 3, 7, 1, 9, 3, 9, 3, 7, 1, 3, 7, 9, 9, 1, 9, 3, 3, 9, 1, 1, 7, 9, 3, 1, 7, 3, 1, 3, 7, 9, 9, 3, 7, 1, 3, 7, 1, 3, 9, 1, 9, 7, 1, 9, 3, 9, 3, 7, 3, 9, 1, 3, 7, 9, 9, 7, 7, 1, 7, 9, 1, 3, 3, 7, 3, 3, 9, 9, 9, 9, 1, 3, 9, 7, 7, 7, 9, 1, 7, 9, 3, 9, 3, 7, 1, 1, 9, 3, 7, 9, 3, 9, 9, 1, 3, 7, 3, 3, 9, 9, 7, 9, 1, 7, 9, 7, 7, 3, 7, 9, 1, 7, 1, 1, 3, 3, 9, 1, 7, 9, 1, 7, 1, 1, 1, 7, 9, 7, 3, 9, 9, 7, 1, 3, 7, 7, 3, 1, 3, 1, 3, 3, 7, 3, 1, 7, 9, 3, 9, 1, 3, 9, 7, 7, 3, 7, 9, 3, 1, 3, 1, 3, 1, 3, 1, 3, 9, 1, 1, 3, 9, 1, 3, 7, 9, 7, 3, 9, 9, 7, 9, 1, 3, 9, 7, 1, 1, 1, 7, 3, 1, 3, 9, 7, 3, 1, 3, 9, 1, 3, 9, 1, 9, 9, 3, 3, 1, 3, 7, 9, 1, 9, 7, 3, 9, 1, 9, 3, 3, 9, 1, 3, 3, 1, 3, 1, 1, 9, 7, 9, 3, 7, 1, 3, 9, 1, 7, 9, 3, 9, 3, 7, 1, 7, 9, 7, 9, 1, 7, 1, 1, 3, 7, 1, 3, 9, 1, 3, 9, 7, 7, 9, 7, 9, 7, 1, 3, 1, 1, 9, 3, 9, 7, 1, 3, 7, 1, 1, 3, 7, 3, 1, 7, 7, 1, 3, 9, 3, 1, 7, 9, 9, 1, 3, 9, 3, 1, 1, 7, 9, 3, 1, 7, 9, 3, 7, 7, 7, 9, 3, 1, 7, 9, 1, 1, 7, 9, 7, 3, 1, 7, 9, 3, 9, 3, 9, 7, 9, 7, 1, 3, 9, 1, 7, 7, 7, 1, 3, 9, 1, 7, 1, 1, 9, 7, 7, 7, 7, 1, 9, 3, 1, 1, 7, 3, 9, 3, 1, 9, 3, 3, 9, 7, 3, 3, 9, 1, 9, 1, 9, 3, 9, 7, 7, 1, 3, 7, 3, 9, 1, 7, 1, 3, 3, 9, 7, 1, 1, 7, 3, 7, 7, 9, 9, 7, 9, 1, 7, 1, 3, 1, 1, 7, 3, 1, 1, 1, 3, 1, 7, 9, 9, 1, 3, 1, 3, 1, 3, 7, 3, 1, 7, 9, 7, 7, 7, 9, 1, 3, 7, 9, 3, 3, 9, 3, 9, 1, 1, 1, 9, 7, 3, 7, 1, 9, 9, 7, 1, 1, 7, 3, 9, 1, 3, 3, 7, 7, 1, 1, 3, 1, 3, 9, 3, 1, 3, 9, 7, 7, 7, 3, 1, 9, 9, 9, 1, 1, 1, 3, 7, 7, 7, 3, 1, 3, 9, 1, 3, 7, 3, 9, 7, 3, 3, 1, 7, 9, 9, 9, 1, 9, 9, 1, 9, 1, 1, 3, 7, 1, 3, 7, 1, 3, 9, 1, 3, 9, 1, 7, 3, 7, 9, 3, 1, 7, 7, 9, 9, 1, 7, 3, 1, 7, 3, 9, 3, 1, 9, 3, 7, 3, 9, 9, 7, 1, 9, 3, 9, 9, 3, 9, 1, 9, 9, 7, 1, 7, 3, 1, 7, 1, 7, 9, 7, 9, 9, 9, 3, 9, 3, 9, 9, 1, 1, 7, 9, 1, 7, 9, 3, 3, 9, 1, 7, 1, 1, 9, 3, 9, 7, 9, 1, 7, 3, 7, 1, 9, 9, 7, 3, 7, 9, 1, 3, 9, 1, 9, 1, 3, 7, 3, 7, 7, 3, 7, 1, 1, 3, 7, 9, 9, 7, 1, 9, 3, 9, 3, 7, 9, 3, 1, 1, 3, 3, 1, 7, 7, 3, 9, 1, 3, 3, 1, 3, 3, 7, 9, 3, 9, 7, 9, 9, 1, 7, 7, 9, 9, 9, 9, 7, 9, 1, 7, 3, 9, 7, 3, 9, 1, 3, 7, 3, 7, 7, 3, 7, 9, 1, 7, 1, 9, 9, 7, 9, 3, 1, 3, 1, 1, 3, 1, 3, 1, 7, 1, 9, 1, 1, 3, 3, 1, 9, 3, 3, 3, 3, 9, 3, 7, 3, 1, 7, 9, 9, 9, 1, 7, 9, 7, 3, 9, 3, 9, 3, 1, 1, 3, 7, 3, 7, 1, 1, 9, 3, 9, 7, 7, 3, 9, 3, 9, 3, 9, 1, 7, 1, 7, 1, 3, 7, 7, 3, 9, 3, 7, 1, 1, 3, 7, 9, 7, 9, 7, 1, 3, 7, 3, 1, 9, 3, 9, 9, 3, 1, 1, 3, 7, 9, 9, 1, 7, 9, 9, 7, 3, 7, 1, 3, 1, 3, 7, 1, 9, 3, 3, 9, 7, 7, 9, 1, 7, 3, 1, 3, 7, 1, 9, 3, 9, 3, 7, 3, 1, 3, 9, 9, 1, 1, 3, 9, 1, 1, 7, 1, 3, 1, 9, 3, 7, 9, 9, 7, 3, 9, 1, 7, 1, 7, 1, 7, 3, 9, 3, 7, 9, 3, 9, 7, 7, 9, 9, 1, 3, 9, 3, 1, 1, 3, 9, 1, 9, 1, 3, 7, 9, 1, 7, 1, 1, 3, 9, 1, 3, 3, 9, 9, 7, 3, 1, 7, 3, 9, 9, 7, 9, 9, 1, 3, 1, 7, 3, 3, 7, 7, 9, 3, 1, 7, 3, 7, 7, 9, 9, 3, 7, 7, 1, 9, 1, 7, 3, 3, 9, 3, 3, 9, 9, 9, 1, 7, 3, 1, 3, 9, 7, 3, 9, 7, 3, 7, 9, 1, 3, 9, 1, 7, 3, 7, 1, 7, 3, 1, 7, 3, 9, 7, 7, 3, 1, 1, 9, 3, 9, 1, 7, 3, 7, 9, 1, 3, 3, 1, 9, 3, 1, 7, 9, 1, 3, 9, 1, 9, 7, 7, 7, 1, 3, 3, 9, 9, 9, 1, 7, 1, 3, 1, 3, 7, 3, 7, 3, 9, 7, 9, 9, 3, 1, 9, 9, 1, 7, 1, 9, 1, 9, 7, 9, 9, 7, 7, 9, 1, 3, 1, 3, 3, 9, 7, 9, 3, 9, 3, 9, 1, 1, 7, 1, 9, 3, 1, 3, 9, 1, 3, 1, 3, 7, 1, 7, 3, 9, 7, 3, 7, 9, 7, 7, 9, 1, 3, 9, 1, 3, 7, 9, 3, 1, 7, 3, 7, 9, 1, 1, 1, 1, 3, 1, 7, 7, 9, 7, 3, 7, 3, 9, 3, 7, 3, 3, 9, 3, 1, 9, 1, 9, 3, 9, 7, 3, 7, 1, 3, 9, 1, 7, 1, 7, 3, 1, 1, 7, 1, 3, 7, 9, 3, 1, 1, 3, 7, 3, 7, 9, 3, 9, 7, 3, 1, 7, 9, 1, 3, 7, 9, 7, 3, 9, 1, 3, 7, 1, 3, 9, 1, 7, 1, 3, 7, 9, 3, 3, 7, 9, 9, 3, 1, 3, 7, 3, 9, 9, 3, 1, 7, 7, 9, 1, 1, 9, 1, 3, 7, 3, 1, 7, 9, 1, 7, 1, 3, 3, 9, 1, 3, 7, 3, 9, 1, 9, 3, 9, 7, 7, 1, 3, 1, 7, 9, 1, 7, 3, 1, 7, 3, 9, 7, 9, 3, 9, 7, 7, 1, 7, 7, 9, 3, 9, 1, 7, 9, 1, 3, 3, 9, 7, 1, 9, 9, 3, 9, 9, 1, 3, 7, 3, 7, 9, 9, 7, 7, 7, 3, 7, 1, 1, 7, 9, 1, 7, 1, 3, 9, 1, 3, 9, 7, 3, 9, 9, 3, 7, 7, 7, 9, 3, 7, 1, 1, 7, 3, 9, 3, 1, 7, 9, 3, 7, 3, 7, 9, 1, 9, 1, 3, 9, 3, 7, 7, 9, 1, 3, 9, 1, 1, 3, 1, 3, 1, 3, 9, 3, 7, 3, 7, 7, 9, 3, 9, 7, 9, 1, 3, 7, 1, 3, 7, 7, 3, 7, 7, 7, 3, 3, 7, 1, 3, 1, 3, 9, 9, 1, 7, 3, 3, 9, 7, 9, 1, 3, 7, 3, 1, 7, 9, 1, 3, 9, 3, 9, 3, 7, 3, 9, 1, 3, 1, 3, 9, 7, 7, 3, 1, 3, 9, 1, 7, 3, 7, 1, 3, 7, 7, 1, 1, 7, 9, 3, 3, 9, 9, 9, 9, 3, 7, 1, 3, 7, 9, 9, 1, 3, 3, 7, 1, 7, 9, 3, 9, 1, 3, 7, 9, 1, 9, 7, 7, 9, 7, 7, 3, 1, 7, 9, 9, 1, 1, 9, 3, 9, 1, 1, 7, 3, 3, 9, 1, 7, 9, 3, 9, 3, 7, 7, 9, 1, 9, 1, 7, 3, 7, 1, 9, 3, 9, 3, 1, 7, 9, 9, 1, 3, 7, 9, 1, 1, 7, 1, 9, 3, 9, 3, 1, 7, 9, 7, 3, 1, 7, 1, 7, 7, 1, 3, 9, 1, 3, 9, 9, 3, 1, 9, 1, 7, 3, 9, 3, 9, 7, 7, 9, 9, 7, 9, 3, 9, 3, 3, 7, 3, 9, 1, 7, 9, 3, 7, 9, 3, 9, 9, 1, 3, 9, 1, 7, 7, 9, 3, 3, 1, 1, 1, 7, 9, 1, 7, 9, 1, 3, 9, 7, 7, 7, 9, 9, 1, 7, 3, 1, 9, 1, 1, 3, 7, 9, 7, 9, 3, 3, 1, 7, 3, 9, 1, 9, 3, 9, 7, 1, 1, 9, 7, 3, 7, 1, 3, 9, 9, 1, 1, 7, 9, 7, 7, 1, 7, 7, 1, 9, 3, 9, 7, 7, 9, 3, 1, 9, 1, 7, 7, 1, 1, 9, 9, 3, 7, 3, 9, 7, 7, 1, 9, 3, 1, 3, 9, 1, 1, 9, 3, 3, 9, 1, 1, 3, 9, 7, 9, 3, 7, 9, 1, 7, 1, 1, 3, 9, 7, 7, 9, 1, 7, 7, 3, 1, 7, 9, 3, 9, 1, 7, 9, 1, 7, 1, 7, 9, 3, 9, 7, 3, 1, 9, 3, 7, 9, 9, 3, 3, 1, 7, 7, 9, 9, 3, 3, 9, 1, 1, 9, 1, 7, 7, 9, 9, 7, 3, 7, 1, 7, 9, 1, 7, 9, 9, 9, 1, 7, 9, 7, 7, 3, 1, 3, 7, 9, 3, 9, 3, 1, 3, 3, 1, 7, 1, 7, 1, 7, 3, 1, 3, 3, 9, 3, 7, 3, 1, 7, 9, 1, 7, 3, 1, 9, 1, 3, 3, 1, 3, 7, 1, 3, 9, 1, 1, 9, 7, 7, 9, 1, 7, 9, 1, 7, 9, 3, 9, 3, 1, 9, 1, 7, 9, 1, 1, 3, 7, 1, 7, 3, 7, 9, 1, 1, 7, 3, 1, 7, 9, 1, 9, 3, 7, 3, 3, 1, 3, 9, 7, 1, 1, 7, 1, 7, 9, 1, 9, 1, 7, 9, 9, 3, 3, 9, 7, 7, 3, 1, 9, 3, 7, 1, 3, 9, 1, 3, 7, 3, 1, 7, 1, 9, 9, 7, 9, 1, 9, 3, 7, 7, 1, 9, 7, 3, 7, 9, 1, 3, 9, 3, 7, 3, 3, 9, 3, 7, 3, 7, 9, 1, 9, 9, 1, 7, 7, 3, 7, 3, 9, 1, 9, 9, 7, 1, 3, 1, 1, 3, 1, 7, 1, 3, 1, 7, 9, 9, 1, 1, 1, 9, 7, 1, 3, 1, 9, 9, 7, 9, 9, 9, 1, 3, 9, 1, 3, 3, 3, 3, 7, 1, 3, 7, 9, 9, 3, 9, 1, 7, 3, 1, 3, 9, 3, 9, 3, 1, 7, 9, 7, 7, 9, 1, 3, 7, 9, 7, 1, 3, 1, 3, 7, 1, 7, 7, 9, 3, 7, 1, 3, 3, 3, 9, 9, 7, 9, 1, 1, 7, 3, 7, 3, 9, 1, 7, 9, 3, 9, 9, 3, 9, 1, 7, 1, 3, 3, 9, 1, 9, 9, 1, 7, 3, 7, 7, 7, 7, 3, 9, 7, 3, 1, 7, 9, 1, 7, 1, 9, 1, 1, 3, 9, 9, 1, 1, 9, 3, 1, 7, 1, 1, 3, 3, 7, 3, 1, 7, 3, 1, 7, 7, 1, 1, 7, 3, 1, 7, 1, 3, 1, 3, 9, 1, 7, 1, 3, 9, 7, 9, 3, 9, 3, 9, 7, 1, 3, 9, 1, 7, 9, 9, 1, 3, 3, 9, 3, 7, 7, 3, 7, 3, 9, 7, 1, 7, 7, 9, 7, 9, 7, 9, 3, 9, 9, 3, 1, 9, 3, 9, 9, 3, 1, 1, 9, 1, 7, 1, 3, 9, 9, 1, 7, 1, 1, 9, 3, 1, 7, 9, 9, 7, 7, 9, 7, 1, 9, 1, 7, 3, 9, 1, 7, 3, 9, 7, 3, 7, 9, 1, 7, 1, 7, 3, 9, 7, 1, 7, 3, 9, 9, 9, 7, 1, 9, 7, 1, 3, 7, 3, 7, 7, 3, 7, 3, 7, 3, 9, 1, 9, 3, 9, 1, 1, 7, 9, 3, 1, 7, 3, 7, 9, 3, 7, 9, 3, 1, 7, 9, 7, 9, 1, 7, 3, 9, 7, 7, 9, 3, 9, 1, 9, 1, 7, 1, 7, 3, 7, 1, 3, 7, 9, 3, 7, 9, 1, 9, 1, 7, 1, 1, 3, 9, 3, 7, 9, 3, 9, 9, 7, 9, 1, 3, 1, 3, 3, 7, 7, 9, 3, 7, 9, 1, 1, 7, 9, 1, 1, 7, 3, 3, 1, 7, 3, 7, 9, 3, 3, 7, 9, 9, 3, 9, 1, 7, 9, 9, 1, 7, 1, 3, 7, 9, 3, 3, 7, 3, 1, 1, 3, 3, 1, 9, 1, 1, 3, 7, 9, 3, 7, 1, 7, 7, 1, 9, 7, 3, 9, 3, 7, 7, 1, 9, 1, 3, 3, 9, 1, 1, 9, 1, 9, 3, 9, 1, 7, 7, 7, 1, 7, 9, 1, 3, 1, 9, 9, 3, 7, 9, 3, 1, 3, 9, 9, 1, 1, 1, 1, 7, 9, 3, 1, 7, 9, 7, 3, 9, 1, 7, 3, 9, 1, 3, 9, 3, 7, 1, 7, 9, 1, 1, 9, 1, 1, 9, 3, 7, 3, 1, 3, 3, 1, 7, 9, 1, 7, 3, 3, 7, 7, 9, 1, 3, 9, 3, 7, 3, 7, 9, 1, 1, 7, 9, 1, 9, 7, 3, 3, 9, 1, 9, 3, 7, 7, 7, 7, 3, 9, 7, 1, 3, 1, 1, 3, 9, 1, 7, 9, 9, 1, 3, 7, 9, 1, 3, 7, 9, 1, 1, 9, 1, 1, 7, 9, 3, 1, 7, 9, 3, 3, 7, 3, 9, 1, 3, 9, 9, 1, 3, 7, 3, 1, 7, 3, 3, 9, 3, 1, 1, 9, 1, 1, 1, 1, 3, 1, 1, 7, 9, 9, 7, 3, 1, 9, 3, 7, 7, 9, 1, 3, 9, 1, 7, 3, 3, 3, 7, 9, 1, 1, 3, 7, 3, 7, 7, 3, 9, 3, 7, 9, 3, 7, 1, 3, 1, 7, 9, 3, 1, 7, 9, 9, 3, 7, 7, 9, 7, 3, 9, 3, 7, 1, 7, 7, 1, 3, 7, 9, 1, 3, 7, 9, 7, 3, 1, 9, 7, 9, 9, 3, 1, 3, 1, 7, 3, 1, 3, 1, 3, 9, 9, 7, 3, 7, 9, 3, 7, 3, 9, 7, 9, 1, 9, 3, 9, 3, 7, 7, 3, 3, 7, 1, 3, 1, 3, 9, 1, 7, 1, 9, 1, 7, 7, 3, 3, 9, 1, 1, 3, 9, 1, 3, 7, 1, 1, 7, 3, 9, 7, 9, 9, 1, 3, 1, 7, 9, 7, 1, 7, 1, 9, 9, 9, 3, 7, 9, 9, 1, 3, 7, 7, 3, 9, 1, 7, 9, 9, 3, 7, 3, 7, 3, 9, 3, 7, 9, 1, 1, 7, 3, 3, 9, 1, 3, 9, 7, 9, 3, 7, 3, 9, 1, 7, 9, 1, 3, 3, 7, 1, 7, 9, 7, 1, 3, 9, 1, 3, 1, 3, 7, 9, 1, 7, 3, 1, 7, 3, 9, 9, 1, 7, 1, 1, 7, 7, 3, 7, 9, 1, 3, 7, 9, 7, 1, 3, 3, 1, 1, 9, 3, 7, 9, 3, 3, 7, 1, 3, 1, 7, 1, 1, 9, 3, 7, 9, 7, 9, 7, 3, 9, 3, 7, 3, 7, 3, 7, 3, 9, 3, 1, 7, 1, 7, 1, 3, 9, 1, 1, 7, 7, 3, 1, 3, 7, 3, 7, 9, 1, 3, 1, 1, 7, 7, 9, 1, 3, 7, 3, 1, 7, 7, 7, 7, 9, 7, 9, 3, 1, 7, 7, 9, 1, 3, 7, 9, 3, 7, 7, 9, 9, 1, 3, 9, 3, 3, 9, 9, 3, 7, 9, 1, 7, 7, 1, 1, 3, 7, 9, 3, 3, 3, 7, 3, 3, 1, 7, 3, 3, 1, 7, 1, 3, 3, 1, 1, 9, 1, 7, 3, 1, 7, 9, 9, 7, 1, 7, 9, 1, 3, 7, 1, 7, 1, 7, 3, 9, 1, 7, 3, 7, 1, 3, 7, 3, 7, 1, 1, 1, 3, 3, 9, 1, 9, 3, 1, 1, 7, 3, 7, 7, 3, 9, 3, 9, 1, 9, 1, 7, 3, 9, 7, 7, 1, 7, 7, 9, 3, 7, 7, 1, 3, 9, 1, 1, 1, 1, 3, 7, 7, 9, 3, 9, 9, 3, 1, 9, 1, 7, 7, 9, 7, 9, 7, 3, 7, 9, 1, 3, 7, 9, 7, 1, 3, 9, 7, 3, 9, 7, 1, 3, 9, 3, 7, 9, 3, 3, 1, 1, 9, 1, 1, 3, 7, 9, 7, 3, 3, 7, 9, 3, 7, 9, 3, 9, 9, 7, 1, 9, 1, 7, 7, 1, 9, 3, 1, 7, 9, 7, 9, 1, 3, 9, 7, 3, 9, 9, 9, 7, 1, 3, 9, 7, 3, 3, 9, 1, 1, 3, 7, 9, 3, 7, 9, 3, 1, 7, 1, 7, 7, 3, 7, 3, 7, 1, 3, 9, 1, 3, 3, 9, 3, 7, 9, 1, 9, 3, 9, 3, 9, 1, 7, 3, 3, 9, 3, 9, 1, 3, 3, 7, 9, 1, 1, 9, 9, 1, 3, 3, 1, 9, 7, 1, 9, 1, 3, 7, 7, 9, 1, 7, 3, 7, 3, 7, 1, 3, 7, 3, 9, 7, 9, 9, 7, 3, 1, 9, 1, 9, 3, 1, 7, 3, 1, 7, 9, 9, 1, 7, 7, 9, 9, 9, 9, 9, 1, 3, 7, 9, 3, 1, 9, 9, 3, 9, 9, 1, 3, 3, 7, 1, 3, 7, 7, 7, 9, 1, 9, 9, 1, 7, 3, 7, 9, 1, 1, 1, 3, 7, 7, 9, 1, 1, 3, 3, 9, 3, 7, 9, 3, 7, 1, 9, 3, 1, 7, 3, 7, 9, 1, 1, 7, 9, 1, 3, 3, 9, 3, 7, 7, 7, 9, 1, 3, 1, 7, 3, 9, 7, 9, 1, 7, 7, 1, 7, 1, 9, 3, 3, 9, 9, 9, 7, 9, 7, 1, 9, 9, 7, 1, 3, 3, 3, 9, 1, 7, 3, 9, 7, 1, 3, 9, 3, 3, 1, 7, 3, 1, 7, 7, 9, 1, 1, 3, 7, 9, 3, 9, 9, 7, 1, 9, 7, 1, 1, 1, 3, 9, 1, 7, 1, 3, 1, 7, 3, 7, 3, 1, 7, 9, 9, 1, 1, 7, 7, 1, 7, 9, 9, 7, 1, 3, 3, 9, 1, 9, 7, 3, 9, 1, 3, 7, 7, 1, 7, 1, 9, 9, 3, 7, 7, 9, 9, 7, 9, 3, 9, 1, 9, 9, 9, 1, 7, 9, 1, 3, 3, 3, 9, 3, 9, 1, 7, 9, 9, 1, 7, 9, 3, 7, 3, 3, 9, 1, 1, 7, 3, 7, 3, 9, 9, 1, 9, 3, 9, 3, 1, 1, 9, 3, 7, 9, 7, 1, 7, 3, 1, 1, 7, 3, 7, 7, 3, 9, 3, 1, 1, 7, 9, 3, 3, 9, 7, 3, 7, 3, 3, 1, 7, 7, 3, 9, 3, 1, 9, 1, 3, 7, 7, 3, 3, 7, 9, 1, 9, 7, 9, 7, 7, 1, 7, 1, 3, 9, 7, 1, 3, 7, 1, 9, 1, 3, 9, 1, 9, 1, 9, 1, 3, 3, 9, 1, 1, 3, 7, 9, 1, 9, 1, 3, 3, 9, 1, 7, 3, 3, 3, 7, 3, 1, 1, 7, 9, 3, 9, 9, 9, 1, 1, 3, 9, 1, 7, 9, 3, 1, 3, 9, 1, 7, 3, 7, 9, 1, 7, 3, 3, 1, 7, 3, 1, 9, 1, 3, 3, 7, 9, 7, 7, 7, 7, 7, 9, 3, 7, 7, 3, 1, 3, 3, 3, 3, 1, 7, 9, 9, 9, 1, 7, 9, 9, 3, 3, 9, 1, 7, 1, 9, 7, 1, 7, 7, 3, 3, 7, 7, 9, 1, 1, 9, 3, 1, 1, 3, 1, 7, 9, 1, 9, 3, 7, 9, 3, 7, 1, 3, 3, 1, 3, 9, 3, 3, 1, 9, 9, 3, 7, 3, 9, 3, 7, 3, 7, 3, 7, 3, 9, 9, 3, 9, 9, 1, 1, 1, 1, 3, 7, 3, 3, 9, 1, 1, 7, 9, 9, 3, 9, 3, 9, 9, 7, 9, 7, 1, 9, 1, 9, 9, 7, 1, 3, 7, 9, 1, 7, 7, 3, 9, 1, 1, 3, 3, 9, 3, 1, 7, 1, 7, 9, 7, 1, 1, 7, 7, 1, 3, 9, 3, 7, 1, 3, 1, 1, 1, 3, 7, 9, 1, 7, 3, 9, 1, 9, 7, 3, 9, 3, 7, 9, 7, 9, 7, 3, 9, 1, 7, 1, 7, 9, 1, 7, 3, 7, 3, 9, 7, 1, 7, 3, 7, 3, 7, 9, 1, 9, 9, 1, 3, 3, 1, 7, 9, 1, 3, 9, 3, 7, 1, 9, 7, 7, 3, 1, 7, 1, 7, 9, 9, 7, 3, 7, 3, 9, 7, 3, 7, 3, 7, 9, 9, 1, 3, 3, 7, 1, 3, 7, 9, 3, 1, 7, 9, 1, 7, 1, 3, 9, 1, 9, 1, 7, 9, 1, 3, 1, 3, 3, 7, 7, 9, 1, 3, 7, 3, 3, 9, 1, 7, 7, 9, 3, 1, 7, 7, 1, 3, 9, 3, 3, 7, 9, 7, 3, 9, 3, 7, 7, 9, 9, 1, 3, 9, 3, 9, 7, 3, 9, 7, 1, 3, 1, 1, 7, 9, 9, 9, 7, 3, 1, 1, 3, 3, 3, 9, 3, 7, 3, 9, 1, 3, 7, 9, 9, 1, 7, 3, 9, 7, 1, 7, 1, 1, 3, 1, 7, 3, 9, 3, 9, 3, 9, 7, 9, 3, 7, 7, 7, 9, 1, 1, 3, 1, 3, 9, 7, 7, 9, 1, 9, 1, 3, 7, 1, 7, 1, 9, 1, 9, 9, 1, 3, 3, 3, 1, 7, 3, 1, 7, 9, 3, 1, 9, 1, 7, 9, 1, 3, 7, 9, 3, 9, 7, 1, 1, 7, 9, 7, 3, 9, 7, 7, 1, 1, 9, 3, 7, 3, 9, 3, 1, 3, 7, 3, 1, 3, 9, 9, 1, 7, 9, 1, 1, 1, 3, 9, 7, 1, 3, 3, 7, 7, 9, 9, 1, 7, 9, 1, 3, 9, 7, 1, 7, 9, 3, 3, 1, 1, 9, 1, 7, 9, 9, 7, 9, 9, 3, 9, 3, 7, 1, 1, 3, 1, 7, 9, 3, 1, 3, 7, 9, 1, 9, 3, 7, 7, 9, 9, 1, 9, 3, 1, 7, 9, 9, 9, 1, 3, 9, 3, 1, 9, 3, 1, 7, 9, 1, 7, 1, 7, 3, 1, 1, 7, 1, 7, 9, 3, 9, 3, 9, 1, 7, 3, 3, 1, 7, 1, 7, 3, 7, 1, 3, 7, 9, 3, 1, 7, 1, 1, 9, 1, 3, 1, 3, 7, 7, 9, 1, 3, 7, 9, 1, 7, 1, 9, 1, 9, 7, 3, 7, 3, 9, 1, 3, 9, 3, 1, 7, 1, 7, 9, 7, 9, 1, 9, 1, 7, 3, 7, 3, 9, 1, 3, 9, 3, 9, 7, 1, 7, 9, 7, 7, 1, 7, 9, 1, 1, 1, 7, 9, 1, 1, 9, 7, 9, 3, 9, 3, 7, 1, 9, 1, 1, 7, 7, 9, 7, 9, 7, 1, 3, 9, 7, 9, 3, 9, 7, 3, 9, 3, 7, 1, 1, 9, 9, 3, 7, 9, 1, 9, 1, 9, 3, 1, 7, 3, 1, 1, 3, 9, 3, 1, 7, 7, 3, 3, 1, 7, 7, 9, 9, 3, 7, 1, 7, 3, 9, 7, 9, 3, 9, 9, 1, 1, 3, 1, 3, 9, 7, 1, 7, 1, 1, 9, 3, 3, 1, 7, 1, 7, 1, 7, 9, 1, 3, 1, 7, 3, 9, 7, 7, 7, 1, 7, 9, 7, 3, 9, 7, 7, 1, 3, 7, 9, 3, 3, 9, 1, 1, 9, 1, 3, 7, 3, 9, 7, 1, 1, 3, 3, 1, 7, 9, 3, 9, 3, 9, 1, 7, 7, 1, 3, 9, 7, 7, 9, 7, 1, 3, 1, 9, 3, 1, 9, 1, 1, 9, 3, 7, 1, 9, 3, 1, 1, 7, 9, 7, 1, 3, 3, 9, 7, 1, 3, 9, 9, 7, 3, 7, 1, 1, 7, 9, 1, 7, 1, 7, 7, 9, 3, 7, 3, 9, 1, 7, 3, 9, 7, 1, 1, 7, 9, 3, 1, 3, 9, 3, 1, 1, 3, 7, 3, 7, 9, 1, 7, 9, 3, 7, 3, 1, 3, 7, 3, 3, 7, 3, 7, 9, 3, 7, 3, 1, 1, 1, 9, 7, 3, 1, 1, 3, 1, 1, 3, 7, 9, 7, 9, 1, 3, 9, 3, 7, 1, 3, 1, 7, 1, 9, 7, 3, 7, 1, 3, 3, 9, 1, 7, 9, 7, 1, 9, 1, 9, 1, 3, 9, 3, 7, 9, 1, 1, 3, 9, 7, 3, 1, 1, 9, 3, 9, 7, 3, 7, 9, 7, 7, 9, 1, 3, 7, 9, 7, 1, 9, 1, 3, 9, 3, 7, 3, 1, 7, 3, 3, 9, 1, 7, 3, 1, 7, 9, 1, 9, 9, 7, 9, 9, 1, 3, 1, 7, 3, 1, 1, 3, 3, 9, 1, 9, 7, 1, 7, 9, 3, 9, 7, 9, 1, 9, 3, 7, 1, 7, 9, 3, 7, 9, 7, 3, 1, 3, 7, 1, 1, 3, 3, 1, 3, 7, 3, 9, 7, 3, 1, 1, 7, 1, 1, 9, 3, 9, 1, 3, 1, 7, 3, 3, 9, 1, 1, 7, 1, 7, 3, 9, 7, 9, 9, 3, 1, 9, 7, 1, 7, 1, 1, 7, 9, 1, 9, 3, 7, 1, 7, 3, 9, 1, 7, 7, 3, 7, 3, 7, 7, 7, 7, 9, 9, 3, 1, 9, 3, 7, 3, 1, 7, 3, 9, 3, 7, 3, 9, 9, 1, 7, 3, 1, 1, 7, 3, 7, 3, 1, 7, 3, 1, 1, 3, 9, 3, 7, 1, 7, 9, 7, 3, 9, 9, 1, 9, 3, 9, 7, 1, 7, 7, 9, 3, 9, 1, 7, 1, 1, 3, 7, 1, 7, 7, 1, 9, 3, 1, 3, 1, 9, 9, 3, 9, 1, 7, 3, 9, 1, 9, 7, 9, 3, 7, 9, 7, 9, 1, 1, 9, 9, 1, 3, 1, 7, 1, 7, 3, 7, 3, 7, 9, 1, 9, 9, 1, 3, 3, 7, 1, 3, 3, 3, 1, 9, 1, 9, 3, 1, 3, 7, 9, 3, 9, 9, 7, 1, 3, 9, 7, 7, 9, 3, 9, 1, 3, 7, 9, 3, 9, 3, 9, 7, 1, 3, 3, 1, 9, 1, 7, 9, 3, 3, 1, 3, 1, 7, 9, 9, 1, 7, 3, 7, 9, 3, 9, 9, 7, 9, 1, 9, 7, 3, 1, 7, 9, 3, 9, 9, 1, 7, 9, 1, 7, 9, 1, 3, 7, 3, 7, 3, 7, 7, 7, 7, 9, 3, 9, 9, 1, 1, 7, 3, 3, 9, 3, 9, 3, 1, 3, 1, 3, 3, 7, 7, 1, 7, 1, 1, 3, 3, 7, 7, 3, 9, 3, 1, 3, 9, 9, 1, 7, 1, 3, 7, 9, 3, 9, 7, 1, 7, 9, 1, 3, 7, 9, 1, 1, 7, 1, 9, 9, 7, 7, 3, 3, 1, 9, 3, 7, 3, 7, 3, 7, 1, 3, 1, 1, 9, 3, 9, 1, 7, 9, 1, 1, 9, 9, 3, 7, 9, 1, 9, 3, 3, 3, 1, 9, 1, 3, 9, 1, 3, 9, 3, 3, 1, 9, 7, 1, 7, 1, 3, 3, 9, 1, 3, 9, 7, 3, 1, 7, 1, 3, 7, 3, 9, 1, 7, 7, 7, 1, 7, 9, 7, 7, 1, 1, 1, 7, 1, 9, 9, 7, 7, 9, 7, 7, 9, 1, 3, 9, 9, 3, 3, 9, 1, 9, 7, 7, 9, 3, 9, 3, 9, 1, 7, 7, 9, 3, 9, 1, 3, 9, 7, 1, 3, 7, 9, 7, 1, 9, 9, 1, 7, 3, 1, 3, 7, 3, 9, 1, 7, 3, 1, 9, 3, 3, 9, 9, 7, 9, 1, 1, 3, 7, 9, 3, 9, 7, 1, 9, 3, 7, 9, 1, 7, 1, 7, 3, 9, 7, 1, 7, 3, 1, 3, 3, 7, 1, 9, 9, 7, 1, 3, 3, 7, 1, 7, 3, 3, 7, 3, 1, 3, 3, 9, 7, 1, 1, 9, 7, 3, 9, 3, 7, 9, 3, 9, 7, 9, 1, 9, 9, 1, 1, 7, 3, 3, 1, 9, 7, 9, 3, 3, 7, 1, 1, 3, 9, 7, 3, 7, 1, 1, 1, 7, 1, 7, 9, 3, 7, 9, 1, 3, 7, 9, 1, 7, 3, 9, 7, 3, 1, 3, 7, 1, 7, 9, 1, 7, 1, 7, 9, 7, 7, 1, 1, 9, 3, 3, 9, 3, 1, 3, 9, 7, 9, 3, 9, 3, 7, 7, 9, 7, 9, 1, 7, 1, 3, 7, 9, 1, 7, 1, 7, 9, 3, 1, 7, 7, 9, 1, 3, 7, 1, 3, 9, 9, 1, 3, 9, 1, 3, 1, 9, 1, 9, 9, 1, 7, 9, 7, 3, 7, 9, 9, 1, 7, 7, 3, 9, 1, 1, 3, 7, 9, 9, 1, 1, 3, 9, 1, 3, 9, 3, 7, 3, 7, 7, 1, 3, 7, 3, 7, 9, 1, 3, 7, 7, 9, 1, 7, 3, 7, 9, 3, 1, 7, 9, 9, 3, 1, 7, 1, 9, 9, 7, 1, 3, 3, 1, 1, 7, 3, 9, 1, 3, 3, 1, 3, 9, 9, 1, 7, 9, 9, 1, 3, 1, 7, 1, 9, 1, 7, 1, 9, 7, 9, 1, 1, 9, 3, 9, 7, 3, 3, 9, 1, 3, 1, 3, 7, 9, 9, 7, 1, 3, 1, 9, 7, 1, 7, 9, 3, 9, 3, 7, 9, 9, 1, 3, 9, 7, 3, 7, 1, 7, 9, 9, 7, 1, 3, 9, 9, 1, 3, 7, 3, 1, 1, 3, 7, 9, 1, 7, 3, 1, 3, 9, 1, 7, 9, 3, 9, 3, 1, 1, 9, 9, 1, 7, 9, 9, 7, 9, 1, 3, 7, 7, 9, 7, 3, 9, 3, 1, 3, 7, 9, 3, 9, 7, 3, 9, 3, 7, 1, 3, 3, 9, 1, 3, 3, 3, 7, 7, 1, 3, 7, 3, 1, 3, 3, 3, 9, 3, 1, 1, 7, 3, 9, 9, 1, 9, 9, 9, 3, 7, 3, 7, 1, 3, 9, 3, 9, 7, 1, 9, 3, 3, 7, 1, 3, 7, 9, 1, 7, 3, 1, 7, 9, 1, 7, 9, 9, 7, 7, 3, 7, 9, 7, 1, 3, 7, 7, 7, 3, 7, 9, 1, 9, 3, 1, 1, 3, 9, 7, 1, 9, 1, 9, 7, 9, 9, 3, 9, 3, 9, 1, 1, 1, 3, 3, 7, 9, 1, 1, 1, 1, 9, 1, 3, 3, 3, 9, 1, 3, 1, 1, 3, 7, 9, 7, 1, 3, 7, 1, 3, 7, 7, 1, 7, 9, 1, 7, 9, 3, 9, 1, 7, 1, 3, 9, 7, 3, 7, 1, 7, 9, 7, 1, 3, 9, 1, 1, 7, 9, 9, 7, 9, 1, 7, 3, 3, 1, 9, 3, 7, 1, 9, 9, 9, 3, 7, 1, 9, 9, 3, 1, 1, 3, 9, 9, 1, 3, 9, 1, 3, 3, 3, 7, 7, 7, 1, 9, 3, 7, 1, 3, 9, 3, 7, 9, 1, 9, 9, 1, 7, 3, 1, 7, 7, 9, 3, 9, 7, 1, 7, 1, 1, 3, 3, 1, 1, 7, 9, 3, 9, 3, 9, 9, 7, 9, 3, 9, 9, 3, 9, 9, 7, 9, 1, 7, 3, 1, 7, 3, 7, 3, 1, 1, 7, 1, 3, 7, 9, 1, 1, 9, 9, 1, 7, 9, 1, 1, 3, 9, 3, 7, 1, 3, 9, 1, 7, 1, 7, 7, 1, 7, 9, 9, 1, 7, 3, 7, 9, 9, 1, 7, 3, 3, 7, 1, 9, 7, 3, 7, 9, 3, 9, 7, 1, 3, 3, 1, 7, 3, 7, 1, 9, 1, 1, 7, 9, 9, 1, 7, 9, 9, 9, 7, 7, 3, 9, 1, 7, 3, 1, 7, 9, 1, 9, 7, 3, 1, 3, 3, 9, 3, 9, 9, 9, 7, 7, 1, 7, 9, 3, 7, 1, 7, 1, 3, 9, 7, 3, 7, 3, 9, 7, 9, 9, 3, 3, 1, 7, 9, 9, 3, 7, 1, 1, 3, 9, 3, 7, 7, 7, 3, 9, 1, 1, 3, 7, 1, 3, 7, 9, 9, 9, 3, 1, 7, 3, 3, 1, 1, 9, 1, 9, 1, 9, 3, 9, 7, 1, 9, 7, 9, 3, 3, 9, 3, 7, 9, 3, 1, 7, 1, 3, 7, 1, 7, 1, 9, 3, 7, 7, 1, 1, 3, 9, 3, 7, 1, 1, 1, 7, 9, 3, 3, 7, 9, 1, 1, 7, 1, 7, 3, 3, 1, 7, 1, 3, 9, 1, 7, 9, 1, 1, 9, 9, 9, 1, 3, 9, 3, 9, 7, 3, 7, 7, 1, 7, 3, 1, 7, 9, 1, 3, 9, 3, 7, 9, 1, 1, 3, 9, 3, 1, 7, 3, 1, 9, 7, 9, 9, 3, 3, 3, 9, 1, 7, 7, 7, 3, 9, 1, 3, 3, 7, 3, 3, 7, 7, 9, 1, 7, 9, 3, 1, 7, 3, 7, 3, 9, 1, 3, 1, 3, 7, 3, 9, 3, 7, 7, 3, 9, 9, 3, 9, 3, 1, 3, 9, 1, 7, 1, 9, 7, 3, 9, 1, 7, 3, 1, 7, 1, 3, 1, 7, 3, 7, 9, 9, 1, 1, 7, 9, 3, 1, 7, 9, 1, 7, 1, 7, 9, 9, 7, 9, 3, 9, 9, 3, 7, 3, 9, 9, 3, 9, 7, 9, 3, 9, 7, 9, 7, 9, 1, 7, 3, 1, 1, 7, 7, 9, 1, 1, 3, 1, 1, 9, 1, 7, 7, 9, 1, 3, 9, 7, 3, 1, 9, 1, 3, 3, 9, 7, 1, 9, 9, 3, 9, 3, 9, 1, 7, 7, 3, 1, 3, 9, 1, 9, 1, 3, 1, 3, 7, 1, 3, 3, 7, 9, 7, 3, 3, 9, 1, 1, 7, 9, 1, 1, 9, 9, 1, 7, 1, 9, 3, 7, 1, 3, 7, 1, 7, 7, 9, 3, 9, 1, 3, 7, 7, 7, 9, 7, 1, 9, 3, 7, 9, 3, 1, 3, 1, 1, 3, 3, 9, 7, 7, 1, 9, 7, 1, 3, 3, 1, 9, 3, 9, 1, 7, 1, 7, 3, 9, 9, 7, 3, 1, 1, 9, 1, 1, 3, 9, 9, 1, 3, 1, 7, 1, 7, 9, 3, 3, 9, 3, 1, 1, 7, 7, 3, 7, 9, 1, 9, 3, 7, 1, 9, 3, 9, 1, 9, 3, 7, 9, 7, 9, 1, 7, 3, 1, 7, 1, 9, 9, 3, 1, 9, 7, 1, 1, 7, 9, 1, 3, 9, 9, 9, 7, 7, 9, 9, 3, 3, 7, 1, 9, 1, 1, 7, 3, 9, 3, 3, 3, 9, 7, 1, 9, 1, 9, 3, 7, 1, 7, 3, 7, 1, 3, 1, 7, 9, 9, 1, 3, 1, 3, 9, 9, 7, 1, 7, 3, 1, 7, 9, 1, 7, 3, 1, 1, 9, 1, 7, 7, 1, 7, 1, 3, 9, 7, 7, 7, 3, 7, 1, 3, 9, 9, 1, 1, 3, 3, 7, 1, 7, 3, 1, 7, 9, 1, 1, 3, 1, 3, 9, 3, 1, 3, 7, 7, 9, 7, 7, 1, 3, 7, 7, 7, 7, 9, 3, 1, 3, 7, 7, 1, 7, 7, 3, 9, 3, 3, 7, 7, 1, 7, 1, 3, 3, 7, 9, 9, 1, 9, 3, 1, 7, 1, 9, 3, 9, 9, 9, 1, 3, 7, 1, 3, 1, 7, 9, 3, 1, 7, 1, 3, 9, 1, 3, 9, 3, 1, 3, 3, 7, 1, 3, 9, 7, 1, 1, 7, 1, 7, 9, 3, 9, 9, 1, 1, 9, 9, 7, 1, 3, 7, 3, 9, 9, 3, 9, 3, 9, 1, 3, 1, 7, 1, 3, 9, 9, 1, 9, 3, 7, 9, 1, 7, 7, 1, 3, 7, 3, 7, 9, 1, 3, 7, 9, 3, 9, 9, 7, 9, 7, 9, 9, 3, 1, 3, 9, 3, 1, 3, 9, 7, 3, 3, 1, 3, 7, 1, 7, 9, 1, 7, 1, 7, 3, 7, 3, 9, 9, 1, 1, 9, 9, 3, 1, 7, 1, 3, 1, 3, 7, 3, 9, 7, 3, 9, 7, 9, 3, 1, 7, 7, 9, 9, 3, 1, 7, 1, 9, 1, 3, 9, 3, 7, 9, 9, 7, 1, 3, 7, 3, 9, 9, 1, 7, 9, 3, 9, 3, 7, 9, 3, 1, 3, 7, 9, 1, 7, 1, 7, 3, 7, 7, 9, 1, 1, 7, 1, 1, 3, 3, 9, 3, 7, 9, 1, 9, 7, 9, 7, 7, 1, 3, 3, 1, 7, 1, 7, 9, 9, 7, 3, 3, 9, 1, 7, 1, 3, 9, 1, 7, 9, 9, 1, 7, 9, 3, 1, 1, 9, 1, 7, 9, 1, 7, 9, 1, 3, 7, 7, 1, 7, 9, 1, 9, 1, 3, 7, 9, 1, 3, 1, 7, 1, 1, 7, 1, 3, 7, 9, 9, 7, 9, 1, 1, 7, 3, 7, 1, 3, 9, 7, 3, 9, 7, 3, 3, 1, 7, 3, 7, 9, 9, 7, 1, 3, 3, 1, 7, 9, 3, 3, 9, 1, 3, 9, 3, 1, 3, 9, 1, 7, 9, 3, 7, 1, 9, 7, 9, 3, 9, 9, 1, 7, 1, 3, 3, 7, 9, 9, 7, 7, 9, 7, 9, 1, 3, 7, 1, 7, 3, 7, 1, 3, 1, 7, 1, 7, 9, 7, 3, 1, 3, 9, 1, 9, 1, 7, 7, 7, 7, 7, 3, 9, 7, 9, 3, 9, 3, 9, 1, 3, 7, 9, 1, 9, 1, 3, 3, 1, 7, 3, 1, 1, 7, 1, 3, 7, 9, 9, 3, 9, 9, 1, 1, 1, 7, 3, 9, 3, 7, 3, 1, 1, 7, 7, 1, 1, 7, 7, 7, 3, 1, 1, 7, 9, 3, 9, 3, 3, 7, 1, 7, 3, 1, 3, 1, 7, 3, 9, 1, 3, 9, 1, 7, 7, 9, 7, 3, 9, 7, 9, 1, 1, 3, 3, 7, 1, 3, 3, 7, 9, 9, 1, 3, 3, 9, 7, 3, 7, 7, 7, 3, 1, 9, 3, 9, 1, 7, 7, 3, 1, 7, 1, 9, 9, 7, 9, 3, 1, 9, 7, 7, 9, 3, 9, 7, 9, 7, 3, 3, 1, 9, 3, 3, 7, 7, 7, 9, 9, 1, 7, 9, 7, 7, 3, 7, 3, 3, 7, 1, 1, 7, 7, 9, 3, 1, 3, 9, 9, 9, 1, 7, 9, 9, 3, 9, 1, 3, 7, 9, 1, 9, 1, 9, 1, 7, 3, 3, 1, 3, 9, 3, 9, 3, 1, 9, 7, 9, 1, 7, 9, 1, 7, 1, 9, 7, 9, 1, 7, 9, 1, 3, 7, 7, 9, 3, 9, 1, 3, 1, 3, 9, 7, 1, 7, 1, 9, 3, 1, 1, 7, 9, 9, 9, 7, 7, 3, 3, 9, 7, 3, 9, 1, 3, 9, 9, 9, 7, 9, 3, 9, 3, 7, 1, 3, 9, 1, 7, 9, 9, 1, 1, 7, 7, 9, 9, 7, 1, 1, 3, 9, 3, 7, 7, 1, 9, 7, 9, 3, 7, 1, 3, 9, 3, 9, 3, 7, 3, 7, 9, 3, 3, 9, 3, 3, 9, 1, 3, 3, 1, 9, 9, 1, 7, 3, 9, 1, 7, 1, 3, 9, 7, 1, 7, 3, 3, 9, 1, 3, 7, 1, 7, 3, 9, 1, 7, 9, 3, 7, 3, 7, 9, 3, 1, 1, 1, 3, 3, 1, 7, 9, 1, 1, 9, 1, 1, 3, 9, 3, 3, 7, 9, 9, 7, 1, 7, 1, 1, 3, 9, 3, 9, 7, 3, 3, 1, 3, 7, 3, 7, 1, 3, 1, 9, 7, 1, 3, 1, 1, 9, 1, 3, 3, 7, 1, 7, 9, 3, 1, 7, 1, 7, 9, 7, 3, 9, 7, 9, 3, 9, 9, 7, 3, 1, 7, 3, 1, 9, 1, 7, 3, 3, 7, 1, 3, 7, 3, 7, 7, 1, 3, 9, 7, 9, 7, 1, 7, 3, 9, 3, 7, 7, 9, 3, 9, 7, 9, 3, 7, 3, 1, 3, 3, 7, 1, 3, 7, 1, 1, 3, 1, 3, 1, 1, 7, 1, 7, 7, 1, 9, 9, 7, 7, 9, 3, 1, 7, 7, 3, 7, 3, 9, 3, 1, 7, 1, 9, 7, 9, 1, 7, 9, 9, 9, 1, 3, 1, 3, 1, 7, 1, 9, 3, 7, 3, 1, 1, 7, 1, 9, 3, 7, 7, 1, 7, 9, 1, 9, 7, 1, 1, 7, 9, 3, 9, 3, 1, 1, 1, 9, 1, 7, 9, 1, 1, 1, 7, 7, 9, 3, 1, 9, 1, 3, 9, 3, 3, 1, 1, 9, 9, 7, 3, 7, 7, 1, 1, 7, 9, 3, 9, 1, 3, 3, 7, 1, 9, 1, 7, 9, 3, 1, 7, 7, 9, 3, 9, 3, 9, 7, 9, 3, 3, 7, 3, 9, 9, 1, 1, 3, 3, 1, 7, 7, 7, 7, 9, 7, 3, 9, 9, 7, 1, 3, 9, 1, 3, 1, 3, 3, 9, 7, 1, 9, 1, 3, 9, 9, 1, 7, 7, 3, 7, 9, 1, 9, 1, 7, 9, 9, 9, 3, 7, 1, 7, 1, 3, 9, 9, 1, 1, 9, 7, 1, 3, 1, 3, 9, 3, 9, 1, 1, 7, 9, 7, 9, 3, 7, 3, 9, 3, 1, 9, 9, 3, 1, 3, 9, 9, 1, 3, 3, 3, 9, 1, 1, 7, 1, 1, 1, 7, 3, 7, 9, 1, 3, 7, 9, 9, 9, 3, 7, 9, 3, 9, 7, 1, 3, 1, 7, 1, 7, 3, 7, 9, 1, 1, 9, 3, 9, 1, 7, 9, 7, 1, 9, 3, 1, 9, 9, 7, 1, 7, 9, 1, 1, 1, 9, 9, 9, 3, 1, 7, 7, 9, 9, 7, 3, 7, 3, 1, 7, 9, 9, 1, 7, 3, 3, 1, 1, 3, 9, 7, 3, 1, 7, 9, 3, 7, 1, 1, 1, 1, 7, 1, 3, 9, 7, 1, 7, 9, 3, 3, 1, 1, 9, 9, 1, 1, 3, 3, 7, 7, 9, 3, 7, 3, 9, 3, 9, 7, 1, 1, 9, 9, 7, 3, 7, 7, 9, 7, 7, 9, 9, 3, 7, 3, 7, 3, 7, 3, 9, 3, 7, 1, 3, 9, 1, 1, 7, 7, 3, 3, 3, 7, 9, 3, 9, 1, 1, 7, 9, 9, 9, 1, 7, 3, 9, 1, 7, 1, 7, 1, 3, 9, 3, 7, 9, 3, 9, 9, 7, 9, 1, 9, 1, 7, 1, 3, 1, 7, 9, 9, 3, 9, 1, 9, 9, 1, 7, 1, 3, 9, 3, 1, 7, 3, 9, 1, 1, 3, 7, 3, 9, 7, 3, 9, 9, 7, 1, 7, 3, 1, 7, 1, 9, 7, 7, 1, 1, 3, 7, 1, 3, 3, 1, 9, 9, 7, 1, 1, 7, 9, 9, 3, 9, 1, 7, 1, 7, 3, 1, 3, 9, 9, 1, 7, 1, 3, 9, 1, 9, 1, 7, 9, 7, 7, 9, 3, 7, 1, 7, 9, 9, 1, 7, 9, 9, 1, 7, 1, 1, 1, 7, 9, 3, 7, 3, 9, 1, 3, 7, 9, 3, 7, 9, 7, 9, 1, 7, 9, 7, 1, 1, 7, 7, 7, 1, 3, 9, 1, 7, 3, 1, 3, 9, 3, 1, 7, 1, 9, 3, 7, 7, 9, 1, 9, 3, 9, 1, 7, 1, 1, 9, 9, 3, 7, 3, 9, 1, 9, 7, 7, 9, 9, 9, 3, 1, 7, 7, 9, 3, 7, 9, 9, 9, 1, 9, 3, 7, 3, 1, 1, 3, 7, 3, 3, 9, 9, 1, 3, 9, 3, 3, 7, 3, 7, 1, 1, 7, 3, 7, 3, 3, 7, 9, 7, 1, 7, 3, 9, 3, 9, 9, 1, 9, 1, 7, 3, 7, 3, 3, 9, 1, 3, 7, 3, 1, 3, 7, 9, 3, 7, 9, 7, 1, 9, 1, 9, 3, 9, 3, 9, 3, 9, 9, 7, 3, 1, 1, 7, 3, 1, 7, 1, 1, 1, 7, 9, 1, 7, 1, 3, 7, 1, 3, 9, 1, 7, 7, 9, 9, 3, 1, 7, 3, 7, 1, 7, 1, 3, 9, 3, 3, 9, 3, 1, 1, 3, 7, 3, 3, 1, 7, 1, 3, 3, 7, 9, 3, 7, 9, 7, 9, 1, 7, 1, 7, 9, 3, 7, 1, 7, 3, 9, 3, 9, 7, 1, 9, 1, 3, 7, 3, 1, 1, 3, 9, 9, 1, 1, 3, 3, 7, 3, 7, 1, 9, 9, 9, 1, 7, 3, 3, 7, 9, 7, 7, 1, 3, 1, 7, 1, 7, 1, 9, 3, 7, 7, 1, 1, 3, 9, 1, 3, 3, 9, 3, 9, 1, 7, 9, 1, 9, 3, 3, 9, 7, 3, 1, 7, 7, 3, 9, 3, 7, 9, 3, 9, 3, 1, 7, 9, 7, 1, 7, 1, 7, 1, 1, 3, 1, 7, 9, 9, 9, 3, 3, 7, 3, 9, 3, 1, 7, 7, 3, 9, 3, 9, 3, 1, 1, 7, 9, 9, 1, 7, 1, 1, 7, 1, 1, 9, 7, 9, 9, 3, 7, 1, 7, 1, 3, 7, 3, 3, 1, 3, 7, 3, 1, 7, 1, 7, 7, 7, 9, 1, 7, 9, 3, 9, 7, 9, 1, 9, 1, 1, 3, 9, 7, 1, 7, 9, 3, 7, 9, 1, 9, 1, 3, 7, 7, 1, 3, 3, 9, 3, 9, 1, 9, 3, 7, 1, 1, 3, 7, 1, 7, 7, 3, 9, 3, 3, 1, 3, 7, 1, 9, 1, 9, 1, 1, 1, 7, 9, 1, 7, 3, 7, 7, 9, 3, 7, 9, 3, 3, 9, 1, 3, 3, 7, 9, 7, 7, 9, 7, 9, 9, 9, 1, 7, 7, 9, 1, 9, 9, 1, 7, 9, 7, 3, 9, 1, 3, 7, 9, 3, 7, 3, 3, 9, 9, 7, 7, 9, 7, 1, 9, 9, 1, 3, 9, 1, 1, 7, 9, 3, 9, 1, 1, 9, 1, 9, 1, 1, 1, 3, 1, 9, 7, 3, 1, 3, 1, 7, 3, 9, 7, 1, 7, 7, 7, 1, 3, 7, 1, 7, 9, 3, 9, 3, 9, 3, 1, 9, 7, 9, 1, 3, 1, 3, 3, 9, 7, 1, 7, 9, 3, 9, 1, 7, 3, 1, 3, 9, 1, 9, 7, 3, 1, 7, 3, 9, 9, 1, 7, 7, 9, 9, 7, 3, 3, 1, 9, 3, 1, 7, 1, 1, 3, 3, 3, 7, 3, 9, 7, 7, 7, 1, 3, 9, 1, 7, 3, 3, 7, 3, 1, 3, 3, 9, 1, 7, 1, 3, 7, 9, 1, 9, 3, 1, 7, 3, 9, 1, 3, 9, 7, 7, 1, 9, 1, 7, 1, 9, 7, 9, 3, 1, 1, 7, 9, 3, 1, 9, 9, 1, 7, 9, 1, 1, 3, 7, 3, 3, 9, 1, 9, 9, 1, 1, 3, 3, 3, 9, 9, 7, 9, 1, 3, 3, 7, 3, 7, 3, 9, 7, 1, 1, 3, 9, 7, 3, 7, 9, 9, 9, 7, 1, 1, 7, 1, 1, 3, 1, 7, 3, 9, 3, 9, 3, 3, 1, 9, 9, 1, 7, 9, 3, 9, 1, 7, 3, 9, 9, 1, 7, 9, 3, 1, 7, 7, 1, 7, 9, 1, 7, 9, 9, 1, 3, 3, 7, 7, 7, 3, 1, 7, 3, 9, 1, 7, 1, 1, 7, 9, 3, 7, 1, 7, 9, 3, 9, 9, 7, 1, 3, 7, 7, 9, 3, 7, 3, 9, 3, 9, 1, 3, 7, 1, 3, 3, 3, 9, 7, 3, 9, 7, 7, 1, 3, 7, 9, 1, 1, 7, 9, 7, 9, 9, 7, 3, 7, 7, 9, 3, 9, 1, 7, 7, 1, 1, 3, 9, 1, 3, 9, 3, 1, 3, 9, 3, 7, 1, 3, 9, 9, 1, 7, 1, 7, 9, 3, 1, 3, 1, 3, 9, 9, 7, 9, 7, 3, 9, 1, 3, 9, 9, 3, 9, 9, 1, 7, 9, 9, 7, 3, 1, 1, 7, 9, 3, 3, 1, 7, 3, 9, 3, 7, 3, 1, 7, 1, 9, 3, 7, 7, 9, 3, 3, 7, 7, 3, 1, 7, 9, 7, 3, 7, 1, 7, 3, 3, 1, 1, 3, 1, 9, 9, 3, 9, 9, 3, 7, 1, 3, 7, 3, 7, 3, 1, 9, 7, 1, 7, 3, 7, 7, 3, 9, 1, 3, 1, 3, 7, 9, 1, 7, 9, 3, 1, 9, 1, 7, 1, 3, 3, 9, 7, 1, 7, 9, 9, 1, 9, 3, 9, 1, 1, 9, 3, 7, 9, 1, 7, 9, 7, 1, 7, 3, 1, 3, 3, 7, 3, 7, 3, 9, 1, 7, 3, 9, 1, 7, 3, 7, 3, 7, 9, 7, 1, 3, 7, 1, 9, 7, 9, 3, 7, 1, 3, 9, 3, 9, 1, 3, 7, 9, 1, 3, 7, 1, 7, 3, 1, 1, 7, 9, 3, 1, 1, 9, 9, 1, 7, 9, 1, 3, 9, 9, 1, 3, 9, 1, 9, 3, 7, 3, 1, 9, 3, 7, 3, 9, 1, 1, 3, 7, 7, 3, 9, 1, 3, 7, 7, 7, 9, 3, 9, 3, 3, 9, 1, 1, 7, 7, 9, 3, 3, 1, 3, 3, 9, 7, 9, 3, 9, 7, 3, 3, 7, 3, 9, 9, 9, 1, 7, 3, 7, 7, 7, 3, 9, 1, 1, 3, 7, 1, 1, 7, 1, 7, 1, 3, 9, 3, 7, 1, 7, 9, 1, 1, 9, 7, 1, 3, 7, 1, 3, 9, 7, 9, 1, 7, 7, 1, 9, 3, 7, 9, 9, 1, 3, 3, 9, 1, 3, 3, 9, 9, 1, 9, 7, 9, 9, 7, 3, 1, 3, 7, 3, 1, 1, 9, 1, 9, 3, 1, 7, 7, 3, 7, 1, 1, 9, 3, 7, 1, 3, 1, 9, 9, 9, 7, 9, 1, 7, 1, 3, 3, 9, 1, 3, 7, 1, 1, 1, 7, 3, 9, 9, 1, 3, 9, 9, 3, 3, 1, 3, 3, 9, 7, 1, 7, 1, 9, 3, 9, 3, 9, 1, 3, 7, 1, 3, 3, 3, 3, 7, 9, 1, 3, 7, 9, 9, 1, 3, 7, 3, 7, 3, 9, 1, 7, 9, 3, 1, 9, 1, 7, 7, 9, 1, 7, 9, 3, 1, 9, 9, 7, 1, 1, 3, 3, 3, 3, 1, 7, 9, 3, 9, 7, 9, 7, 7, 9, 3, 1, 7, 9, 7, 7, 3, 9, 7, 9, 9, 7, 3, 9, 3, 7, 3, 9, 7, 9, 9, 3, 9, 1, 1, 7, 9, 3, 7, 1, 9, 1, 7, 3, 1, 7, 9, 9, 7, 9, 7, 9, 9, 3, 3, 9, 7, 7, 9, 7, 3, 3, 7, 1, 1, 7, 3, 9, 1, 3, 7, 9, 1, 3, 9, 9, 7, 9, 9, 1, 3, 9, 1, 1, 9, 7, 9, 7, 7, 9, 3, 7, 7, 3, 9, 3, 9, 7, 1, 1, 1, 1, 3, 1, 3, 1, 1, 9, 1, 7, 3, 7, 1, 7, 9, 1, 7, 9, 7, 1, 3, 7, 3, 9, 1, 9, 3, 7, 9, 1, 1, 7, 3, 1, 1, 9, 9, 7, 7, 7, 9, 7, 9, 9, 1, 7, 3, 9, 1, 7, 3, 9, 3, 1, 7, 1, 7, 9, 1, 9, 7, 1, 3, 7, 1, 9, 9, 7, 1, 7, 7, 7, 1, 7, 1, 9, 3, 3, 9, 7, 9, 1, 7, 3, 3, 1, 7, 3, 7, 3, 1, 7, 7, 1, 3, 1, 3, 3, 1, 3, 7, 7, 9, 1, 7, 1, 7, 9, 7, 1, 3, 7, 3, 9, 3, 1, 3, 9, 9, 3, 7, 7, 7, 3, 1, 9, 1, 7, 3, 3, 9, 1, 7, 3, 9, 7, 1, 9, 1, 7, 3, 9, 7, 1, 9, 3, 7, 1, 9, 9, 1, 3, 1, 7, 7, 9, 7, 9, 1, 1, 3, 9, 1, 7, 3, 7, 1, 9, 3, 7, 9, 1, 1, 9, 1, 9, 3, 9, 3, 7, 9, 3, 1, 3, 7, 9, 1, 9, 3, 3, 9, 7, 3, 9, 9, 9, 1, 3, 3, 9, 7, 1, 3, 7, 7, 3, 9, 1, 3, 7, 9, 9, 3, 7, 9, 7, 1, 7, 9, 3, 1, 9, 3, 1, 7, 9, 1, 9, 7, 9, 3, 7, 9, 1, 1, 7, 3, 3, 9, 9, 7, 3, 7, 9, 9, 3, 9, 9, 7, 3, 1, 3, 9, 3, 1, 9, 3, 3, 3, 7, 7, 3, 7, 3, 1, 1, 3, 9, 7, 9, 1, 9, 1, 1, 3, 9, 9, 1, 3, 7, 9, 3, 9, 7, 9, 3, 1, 1, 1, 3, 9, 3, 1, 1, 1, 9, 3, 9, 3, 1, 7, 3, 7, 3, 1, 1, 3, 7, 3, 9, 9, 9, 7, 7, 1, 9, 7, 9, 7, 9, 1, 3, 9, 1, 7, 1, 1, 7, 9, 1, 3, 9, 3, 7, 3, 9, 9, 1, 1, 1, 9, 9, 1, 9, 3, 7, 3, 1, 1, 7, 3, 9, 7, 3, 9, 3, 1, 1, 7, 9, 3, 9, 1, 9, 1, 9, 3, 1, 3, 9, 7, 9, 3, 7, 9, 1, 7, 3, 1, 7, 1, 1, 3, 7, 7, 9, 3, 7, 9, 9, 7, 3, 9, 1, 7, 3, 1, 9, 3, 9, 1, 3, 7, 1, 9, 1, 3, 1, 1, 7, 3, 9, 7, 9, 1, 7, 1, 1, 3, 7, 3, 3, 7, 3, 3, 1, 3, 1, 7, 9, 9, 3, 1, 3, 7, 1, 1, 3, 7, 3, 1, 7, 9, 1, 7, 3, 1, 7, 1, 7, 1, 9, 1, 7, 3, 3, 9, 9, 1, 7, 1, 7, 3, 1, 1, 9, 3, 9, 3, 7, 7, 9, 3, 9, 7, 3, 7, 7, 9, 7, 1, 7, 3, 1, 3, 7, 3, 3, 9, 1, 7, 3, 3, 3, 7, 7, 9, 3, 7, 9, 3, 9, 9, 1, 1, 3, 9, 9, 3, 7, 3, 1, 9, 3, 3, 9, 1, 1, 3, 1, 3, 9, 3, 3, 1, 1, 7, 1, 9, 1, 9, 7, 9, 3, 3, 9, 9, 1, 1, 7, 3, 1, 3, 9, 3, 7, 1, 1, 9, 1, 3, 7, 1, 3, 9, 9, 1, 1, 9, 9, 1, 7, 3, 7, 3, 7, 3, 9, 1, 1, 7, 7, 7, 9, 1, 7, 1, 7, 9, 3, 1, 7, 3, 7, 3, 3, 3, 7, 3, 9, 1, 3, 9, 7, 7, 9, 7, 7, 9, 1, 3, 1, 3, 7, 1, 1, 3, 1, 7, 3, 3, 7, 3, 1, 7, 9, 7, 9, 1, 7, 9, 9, 1, 9, 3, 9, 7, 1, 9, 7, 3, 9, 3, 9, 3, 1, 7, 3, 1, 7, 9, 1, 3, 7, 1, 3, 9, 1, 7, 7, 9, 1, 1, 9, 9, 7, 1, 1, 7, 7, 3, 9, 1, 1, 1, 3, 7, 7, 3, 9, 3, 9, 3, 3, 3, 9, 9, 3, 1, 9, 1, 1, 1, 9, 1, 7, 1, 3, 7, 7, 3, 9, 7, 3, 9, 3, 7, 9, 3, 9, 7, 3, 3, 7, 3, 7, 3, 7, 1, 9, 1, 7, 1, 3, 1, 3, 3, 9, 7, 9, 1, 7, 1, 9, 7, 9, 9, 9, 1, 7, 9, 3, 1, 9, 1, 3, 9, 3, 9, 3, 3, 7, 9, 3, 1, 7, 7, 9, 3, 9, 1, 9, 3, 1, 3, 3, 1, 7, 3, 9, 1, 3, 9, 3, 7, 1, 9, 1, 3, 9, 3, 9, 7, 3, 7, 1, 7, 9, 1, 3, 9, 1, 7, 7, 9, 3, 9, 1, 7, 3, 9, 7, 3, 1, 9, 1, 7, 9, 3, 1, 9, 1, 7, 3, 9, 1, 3, 9, 1, 3, 9, 3, 7, 9, 1, 7, 7, 3, 1, 1, 7, 9, 1, 1, 7, 9, 3, 3, 9, 9, 1, 7, 9, 3, 1, 7, 3, 7, 3, 9, 9, 7, 3, 7, 7, 1, 7, 1, 9, 3, 9, 1, 7, 1, 3, 3, 7, 1, 9, 9, 7, 7, 1, 3, 9, 3, 1, 3, 3, 3, 1, 7, 3, 9, 9, 1, 7, 9, 3, 7, 9, 1, 7, 3, 7, 3, 3, 7, 1, 9, 1, 7, 1, 9, 3, 1, 1, 3, 9, 3, 7, 1, 9, 7, 1, 3, 7, 3, 7, 7, 3, 9, 1, 3, 9, 9, 1, 7, 1, 3, 9, 1, 7, 1, 7, 9, 1, 3, 9, 7, 9, 9, 1, 9, 1, 9, 3, 3, 3, 7, 1, 3, 7, 1, 7, 9, 1, 1, 3, 9, 3, 7, 7, 9, 9, 7, 9, 1, 7, 9, 7, 7, 3, 9, 3, 3, 1, 7, 3, 1, 7, 9, 9, 1, 7, 7, 1, 3, 7, 1, 7, 9, 9, 9, 3, 1, 3, 3, 9, 7, 3, 3, 3, 1, 1, 7, 1, 7, 9, 7, 9, 9, 7, 3, 9, 1, 1, 1, 7, 9, 1, 7, 1, 7, 7, 1, 7, 9, 1, 3, 9, 1, 7, 3, 9, 7, 7, 1, 7, 3, 9, 9, 9, 1, 1, 9, 3, 9, 1, 7, 9, 9, 9, 7, 1, 7, 1, 9, 7, 7, 9, 1, 9, 1, 3, 3, 9, 1, 7, 3, 1, 3, 3, 9, 1, 3, 9, 9, 1, 9, 1, 3, 9, 1, 3, 7, 9, 9, 3, 9, 1, 1, 1, 7, 9, 1, 7, 1, 3, 9, 7, 3, 7, 3, 1, 9, 9, 9, 7, 1, 9, 1, 3, 7, 9, 1, 1, 1, 7, 9, 3, 1, 3, 7, 3, 1, 3, 1, 7, 9, 3, 7, 9, 3, 7, 1, 9, 7, 7, 3, 3, 7, 7, 9, 1, 3, 9, 9, 1, 7, 3, 7, 7, 7, 9, 7, 3, 9, 1, 3, 1, 7, 9, 1, 7, 9, 1, 3, 3, 7, 3, 9, 1, 3, 7, 3, 7, 1, 7, 9, 1, 7, 7, 1, 7, 1, 3, 9, 7, 9, 7, 9, 1, 7, 9, 1, 3, 3, 9, 1, 3, 7, 1, 9, 3, 1, 7, 9, 3, 1, 7, 9, 3, 1, 1, 9, 1, 1, 7, 9, 1, 7, 3, 9, 1, 3, 9, 3, 7, 1, 9, 3, 9, 3, 3, 7, 1, 9, 3, 7, 7, 9, 1, 3, 1, 9, 1, 9, 7, 1, 3, 9, 3, 3, 1, 7, 3, 3, 7, 3, 1, 7, 1, 7, 9, 9, 1, 7, 7, 1, 7, 3, 7, 3, 9, 1, 1, 9, 9, 3, 9, 7, 9, 1, 9, 7, 1, 1, 1, 1, 7, 7, 3, 9, 1, 1, 3, 7, 7, 9, 1, 3, 1, 3, 9, 9, 1, 1, 9, 7, 7, 9, 7, 7, 3, 7, 3, 7, 1, 9, 3, 7, 9, 1, 7, 1, 9, 9, 7, 7, 3, 9, 7, 1, 3, 9, 1, 3, 9, 3, 7, 3, 9, 9, 7, 7, 3, 7, 7, 1, 3, 9, 9, 1, 9, 3, 7, 3, 3, 7, 9, 9, 1, 9, 3, 3, 9, 3, 3, 9, 3, 1, 7, 3, 7, 3, 7, 1, 3, 3, 9, 1, 1, 9, 9, 3, 3, 9, 1, 7, 1, 7, 7, 9, 7, 3, 9, 3, 9, 9, 3, 7, 3, 1, 3, 9, 1, 9, 7, 7, 3, 7, 3, 1, 3, 9, 1, 1, 3, 1, 3, 9, 9, 7, 1, 1, 7, 9, 3, 7, 1, 7, 1, 9, 1, 9, 1, 3, 9, 1, 1, 3, 3, 7, 1, 9, 3, 9, 1, 3, 7, 9, 7, 1, 3, 7, 9, 1, 7, 1, 7, 9, 1, 7, 9, 3, 9, 7, 1, 3, 7, 3, 9, 1, 3, 1, 3, 9, 9, 1, 7, 1, 3, 7, 9, 1, 3, 1, 1, 7, 1, 3, 3, 9, 3, 9, 3, 1, 9, 1, 9, 9, 7, 7, 9, 3, 1, 3, 7, 9, 1, 3, 3, 9, 7, 1, 7, 3, 9, 7, 7, 9, 1, 3, 7, 3, 1, 7, 7, 9, 7, 9, 7, 1, 3, 7, 3, 9, 1, 7, 1, 1, 3, 9, 1, 3, 7, 1, 3, 9, 9, 7, 3, 9, 7, 9, 1, 7, 9, 9, 1, 1, 9, 9, 1, 7, 7, 1, 1, 3, 7, 3, 7, 3, 3, 9, 1, 7, 9, 7, 1, 9, 3, 9, 1, 7, 9, 9, 3, 3, 1, 1, 3, 7, 1, 7, 7, 7, 3, 1, 3, 9, 1, 7, 9, 7, 3, 7, 1, 3, 3, 7, 3, 1, 3, 9, 7, 1, 9, 1, 1, 3, 9, 1, 3, 1, 3, 7, 9, 7, 7, 3, 9, 7, 7, 7, 7, 3, 9, 3, 7, 3, 7, 7, 9, 7, 3, 9, 1, 3, 7, 3, 9, 7, 9, 9, 9, 7, 7, 1, 3, 1, 3, 7, 9, 1, 1, 9, 3, 1, 7, 1, 3, 3, 7, 9, 3, 9, 3, 7, 9, 3, 1, 7, 3, 9, 1, 9, 7, 3, 1, 3, 7, 1, 1, 7, 1, 9, 7, 3, 9, 1, 9, 1, 1, 9, 3, 1, 1, 7, 3, 9, 1, 9, 3, 7, 1, 7, 9, 3, 9, 3, 9, 7, 9, 1, 3, 9, 1, 1, 9, 1, 9, 3, 1, 7, 3, 1, 9, 7, 9, 3, 9, 3, 7, 7, 3, 7, 7, 9, 1, 1, 3, 1, 3, 7, 1, 1, 7, 9, 1, 7, 3, 7, 9, 9, 3, 7, 9, 7, 1, 3, 7, 9, 1, 7, 9, 3, 9, 9, 3, 1, 7, 9, 1, 1, 7, 7, 9, 7, 9, 1, 9, 7, 1, 1, 7, 3, 7, 3, 3, 7, 7, 1, 9, 3, 1, 7, 7, 1, 1, 3, 7, 3, 7, 9, 1, 7, 3, 9, 3, 9, 1, 9, 9, 1, 7, 9, 9, 3, 3, 7, 1, 3, 9, 1, 7, 1, 3, 9, 7, 9, 1, 3, 1, 3, 3, 1, 9, 3, 7, 1, 7, 9, 1, 3, 7, 3, 7, 3, 1, 3, 7, 9, 1, 7, 3, 3, 7, 7, 9, 9, 7, 3, 7, 3, 7, 1, 9, 9, 3, 7, 1, 3, 7, 7, 1, 7, 9, 9, 1, 9, 1, 9, 3, 3, 1, 3, 7, 9, 1, 1, 3, 3, 7, 1, 7, 3, 7, 3, 1, 3, 7, 9, 1, 9, 3, 9, 3, 1, 1, 3, 1, 3, 7, 9, 7, 9, 9, 3, 9, 7, 1, 3, 9, 3, 3, 7, 7, 3, 1, 3, 7, 1, 1, 7, 1, 7, 9, 7, 1, 3, 7, 9, 7, 9, 3, 7, 3, 1, 7, 9, 3, 1, 7, 1, 1, 1, 9, 7, 9, 3, 1, 7, 1, 3, 3, 1, 3, 7, 9, 1, 7, 1, 3, 3, 3, 1, 3, 7, 7, 1, 7, 1, 3, 9, 3, 9, 1, 3, 7, 9, 3, 9, 3, 9, 3, 7, 1, 3, 3, 9, 3, 9, 1, 3, 1, 1, 3, 7, 9, 3, 9, 3, 1, 9, 1, 7, 7, 9, 3, 9, 7, 3, 9, 1, 9, 1, 3, 1, 7, 7, 9, 1, 1, 3, 1, 3, 9, 7, 9, 3, 1, 3, 3, 1, 1, 9, 1, 7, 7, 9, 7, 3, 1, 3, 9, 1, 9, 1, 7, 3, 9, 1, 3, 7, 3, 3, 1, 7, 3, 9, 1, 1, 1, 9, 3, 1, 3, 9, 1, 1, 7, 3, 1, 3, 7, 7, 9, 1, 9, 1, 3, 7, 3, 3, 9, 1, 9, 9, 1, 7, 1, 1, 3, 3, 1, 1, 7, 9, 1, 9, 1, 7, 1, 7, 3, 7, 3, 7, 9, 3, 3, 3, 7, 1, 3, 7, 3, 1, 9, 3, 1, 7, 7, 9, 3, 9, 1, 3, 9, 1, 7, 3, 9, 3, 9, 1, 1, 7, 7, 9, 3, 1, 9, 1, 1, 7, 3, 9, 7, 3, 7, 7, 9, 9, 7, 3, 3, 9, 1, 7, 3, 1, 9, 1, 7, 7, 9, 3, 1, 7, 7, 1, 3, 3, 9, 1, 1, 3, 9, 9, 1, 3, 3, 7, 3, 9, 7, 7, 3, 1, 9, 1, 3, 9, 9, 7, 9, 7, 3, 9, 1, 7, 1, 9, 9, 9, 1, 7, 9, 7, 3, 3, 1, 7, 9, 1, 7, 3, 7, 9, 3, 9, 1, 7, 1, 7, 9, 3, 3, 9, 7, 1, 1, 3, 9, 7, 7, 9, 9, 9, 1, 3, 9, 1, 7, 3, 9, 1, 7, 3, 7, 9, 3, 9, 1, 1, 3, 9, 3, 9, 7, 1, 3, 9, 3, 7, 1, 3, 7, 7, 9, 1, 3, 9, 1, 9, 7, 9, 1, 9, 3, 1, 1, 7, 7, 9, 1, 3, 9, 3, 7, 9, 1, 1, 1, 7, 1, 3, 3, 7, 7, 9, 9, 3, 1, 7, 3, 3, 7, 7, 9, 7, 9, 3, 1, 9, 1, 3, 3, 1, 3, 3, 1, 7, 9, 1, 7, 7, 9, 1, 1, 3, 3, 1, 9, 7, 9, 9, 7, 7, 1, 9, 9, 1, 7, 1, 7, 1, 7, 9, 1, 7, 1, 1, 7, 3, 9, 3, 9, 3, 1, 7, 1, 9, 9, 7, 1, 3, 7, 3, 7, 1, 7, 3, 7, 3, 1, 1, 7, 9, 1, 1, 3, 7, 9, 3, 1, 7, 7, 3, 7, 9, 9, 1, 7, 1, 7, 7, 9, 1, 3, 7, 3, 1, 9, 1, 1, 9, 3, 7, 9, 9, 1, 7, 3, 1, 7, 1, 3, 7, 7, 7, 9, 3, 3, 1, 3, 9, 1, 3, 1, 3, 9, 7, 3, 3, 1, 7, 9, 9, 1, 7, 7, 9, 3, 7, 1, 7, 3, 1, 7, 3, 9, 7, 1, 3, 3, 7, 7, 3, 9, 9, 3, 3, 1, 1, 3, 9, 7, 9, 3, 7, 3, 7, 9, 1, 3, 1, 3, 7, 3, 9, 1, 7, 3, 7, 3, 7, 9, 3, 7, 1, 7, 7, 3, 9, 3, 9, 3, 1, 9, 3, 9, 1, 7, 9, 9, 1, 9, 7, 9, 3, 3, 7, 3, 9, 7, 1, 9, 3, 3, 9, 9, 7, 3, 7, 9, 3, 3, 1, 7, 1, 1, 7, 1, 7, 9, 1, 7, 3, 3, 7, 9, 1, 9, 7, 7, 3, 3, 7, 9, 1, 9, 7, 3, 9, 3, 1, 7, 3, 3, 1, 1, 7, 9, 3, 9, 1, 3, 3, 9, 1, 9, 7, 9, 1, 3, 7, 9, 1, 3, 9, 1, 9, 7, 1, 3, 3, 9, 3, 9, 7, 1, 7, 9, 9, 1, 3, 3, 1, 1, 7, 9, 3, 1, 9, 7, 1, 3, 3, 1, 1, 7, 9, 3, 3, 1, 7, 9, 7, 3, 9, 3, 3, 7, 9, 9, 7, 1, 3, 1, 7, 3, 9, 3, 7, 9, 1, 7, 7, 9, 3, 9, 1, 9, 1, 1, 7, 3, 9, 1, 3, 3, 3, 1, 7, 1, 7, 1, 9, 1, 3, 3, 9, 7, 3, 9, 3, 7, 1, 3, 7, 9, 9, 7, 9, 7, 7, 9, 7, 9, 3, 9, 7, 1, 3, 3, 1, 3, 9, 1, 3, 9, 3, 1, 7, 1, 3, 7, 7, 1, 3, 9, 7, 1, 1, 9, 1, 7, 1, 3, 9, 3, 7, 9, 3, 1, 3, 1, 3, 9, 9, 3, 7, 9, 1, 1, 3, 9, 7, 9, 7, 3, 7, 9, 1, 1, 3, 7, 1, 7, 1, 3, 3, 9, 3, 9, 3, 9, 7, 1, 3, 3, 3, 1, 3, 9, 7, 7, 3, 7, 9, 7, 1, 3, 1, 9, 3, 1, 3, 1, 7, 9, 1, 7, 3, 9, 1, 9, 9, 7, 1, 7, 3, 9, 7, 9, 3, 7, 3, 7, 9, 3, 1, 7, 3, 1, 7, 1, 7, 7, 1, 7, 3, 3, 3, 9, 1, 7, 1, 1, 3, 9, 3, 9, 7, 7, 7, 9, 3, 7, 1, 7, 1, 7, 9, 1, 7, 3, 1, 7, 3, 7, 9, 1, 3, 7, 3, 3, 1, 3, 9, 9, 7, 9, 9, 3, 7, 1, 3, 7, 3, 1, 9, 1, 1, 7, 7, 9, 7, 3, 9, 3, 7, 9, 3, 3, 1, 3, 7, 1, 9, 1, 9, 3, 1, 3, 7, 9, 7, 7, 9, 3, 3, 3, 3, 3, 7, 1, 7, 7, 9, 7, 3, 9, 7, 1, 3, 7, 1, 3, 3, 1, 7, 1, 3, 9, 3, 1, 9, 3, 3, 1, 7, 9, 9, 3, 9, 3, 3, 9, 7, 9, 1, 3, 3, 7, 9, 1, 1, 3, 9, 1, 7, 7, 1, 9, 7, 3, 9, 9, 1, 1, 3, 1, 7, 1, 1, 3, 1, 9, 3, 7, 3, 1, 7, 9, 3, 1, 9, 1, 7, 3, 9, 3, 1, 7, 1, 7, 9, 7, 7, 9, 1, 3, 7, 3, 3, 9, 1, 7, 7, 9, 1, 3, 7, 9, 7, 7, 9, 3, 7, 9, 1, 7, 9, 1, 7, 9, 7, 9, 9, 1, 7, 9, 1, 7, 3, 1, 3, 3, 9, 3, 1, 1, 9, 7, 9, 1, 7, 1, 7, 9, 9, 3, 3, 7, 7, 3, 7, 7, 3, 1, 3, 9, 9, 1, 1, 3, 3, 3, 7, 1, 3, 7, 1, 7, 3, 1, 9, 7, 9, 3, 9, 7, 1, 3, 7, 3, 7, 3, 9, 1, 9, 7, 1, 7, 1, 3, 3, 9, 3, 1, 9, 3, 7, 3, 7, 7, 9, 1, 3, 9, 1, 7, 3, 9, 1, 1, 1, 1, 9, 1, 7, 1, 3, 7, 1, 1, 7, 9, 7, 9, 3, 9, 1, 1, 3, 9, 3, 7, 1, 7, 1, 7, 7, 7, 3, 7, 1, 3, 3, 3, 3, 9, 7, 7, 3, 9, 1, 7, 9, 3, 1, 7, 1, 7, 3, 9, 1, 3, 7, 1, 9, 3, 3, 9, 9, 1, 1, 7, 9, 3, 7, 7, 7, 3, 1, 7, 7, 9, 7, 9, 7, 1, 9, 1, 9, 3, 1, 3, 9, 9, 9, 3, 9, 9, 7, 1, 3, 3, 3, 7, 1, 7, 1, 9, 9, 7, 9, 1, 9, 7, 7, 1, 3, 1, 1, 9, 3, 9, 3, 1, 3, 3, 9, 1, 3, 3, 3, 7, 7, 3, 1, 3, 1, 3, 1, 7, 9, 1, 9, 7, 3, 3, 9, 3, 9, 9, 7, 9, 3, 9, 9, 9, 3, 9, 1, 7, 9, 3, 1, 7, 1, 9, 9, 3, 7, 9, 1, 1, 7, 1, 1, 1, 1, 3, 7, 9, 1, 1, 7, 7, 9, 7, 1, 3, 3, 1, 7, 3, 9, 7, 9, 3, 7, 1, 7, 7, 3, 7, 3, 3, 7, 9, 3, 7, 3, 1, 1, 3, 9, 9, 1, 7, 1, 3, 3, 3, 7, 1, 9, 9, 9, 3, 9, 7, 7, 3, 1, 3, 7, 3, 9, 1, 3, 1, 3, 9, 1, 1, 7, 1, 9, 9, 9, 1, 3, 7, 1, 7, 3, 7, 9, 3, 9, 9, 3, 9, 1, 7, 3, 3, 3, 1, 1, 1, 9, 3, 1, 1, 3, 9, 1, 1, 1, 3, 9, 9, 7, 9, 3, 1, 7, 9, 7, 1, 3, 9, 1, 1, 3, 3, 7, 3, 9, 9, 7, 7, 1, 7, 7, 3, 9, 9, 1, 7, 3, 9, 1, 7, 1, 9, 9, 7, 7, 3, 9, 3, 3, 1, 9, 7, 3, 9, 1, 3, 3, 9, 3, 7, 3, 1, 3, 9, 9, 1, 7, 7, 1, 1, 3, 7, 3, 7, 1, 3, 3, 7, 3, 7, 9, 9, 1, 1, 9, 9, 7, 3, 1, 7, 1, 3, 9, 3, 1, 7, 1, 9, 9, 7, 9, 7, 3, 7, 9, 1, 3, 1, 3, 1, 3, 9, 7, 3, 9, 1, 3, 7, 3, 3, 9, 3, 3, 7, 9, 1, 7, 3, 3, 9, 3, 7, 1, 9, 1, 7, 1, 1, 7, 3, 9, 7, 1, 1, 3, 7, 3, 1, 3, 3, 7, 3, 7, 7, 9, 9, 1, 9, 1, 7, 9, 3, 1, 7, 9, 7, 9, 1, 7, 9, 7, 3, 3, 9, 9, 9, 3, 7, 3, 1, 3, 7, 1, 1, 7, 1, 3, 7, 3, 9, 1, 1, 3, 7, 3, 9, 3, 1, 9, 7, 3, 9, 9, 3, 1, 7, 9, 3, 3, 7, 3, 7, 9, 1, 1, 3, 1, 7, 7, 1, 7, 3, 7, 1, 9, 3, 9, 7, 7, 9, 7, 1, 3, 9, 1, 7, 3, 9, 1, 1, 3, 3, 1, 7, 1, 7, 3, 1, 3, 3, 9, 1, 1, 9, 1, 3, 1, 3, 7, 9, 7, 9, 3, 1, 3, 9, 9, 7, 7, 9, 3, 7, 3, 3, 1, 7, 7, 1, 7, 9, 3, 1, 1, 1, 7, 1, 7, 3, 9, 1, 3, 7, 7, 9, 9, 7, 1, 3, 9, 9, 7, 1, 7, 9, 9, 1, 9, 9, 9, 7, 7, 3, 1, 7, 3, 9, 7, 3, 9, 7, 1, 7, 3, 1, 9, 1, 9, 1, 3, 7, 1, 7, 3, 9, 1, 3, 7, 9, 9, 7, 3, 9, 1, 3, 7, 1, 9, 3, 7, 3, 3, 1, 3, 1, 7, 9, 3, 1, 3, 7, 1, 7, 1, 3, 7, 9, 9, 9, 1, 1, 3, 9, 7, 3, 9, 7, 7, 1, 1, 3, 3, 3, 9, 9, 3, 9, 3, 7, 1, 3, 9, 1, 7, 9, 3, 3, 9, 9, 1, 3, 7, 1, 7, 1, 1, 3, 3, 9, 9, 3, 7, 1, 7, 3, 1, 7, 7, 3, 7, 7, 9, 3, 1, 7, 1, 1, 1, 3, 9, 1, 9, 1, 1, 3, 9, 1, 9, 9, 3, 9, 1, 1, 3, 3, 7, 1, 7, 9, 1, 9, 1, 9, 1, 7, 9, 1, 1, 1, 9, 1, 3, 7, 1, 3, 1, 3, 7, 9, 7, 3, 9, 7, 9, 3, 3, 9, 9, 7, 9, 9, 7, 7, 1, 3, 9, 3, 7, 9, 1, 7, 9, 3, 9, 7, 1, 1, 3, 7, 9, 1, 7, 3, 9, 1, 7, 9, 3, 1, 9, 1, 9, 3, 9, 1, 7, 9, 1, 1, 7, 3, 7, 3, 7, 3, 9, 9, 3, 9, 3, 9, 9, 7, 9, 1, 7, 7, 7, 3, 1, 3, 9, 7, 1, 7, 3, 9, 3, 9, 9, 3, 7, 7, 9, 3, 7, 3, 1, 3, 7, 7, 1, 7, 9, 1, 9, 3, 9, 7, 3, 1, 9, 3, 1, 3, 1, 1, 9, 9, 7, 9, 1, 7, 9, 1, 7, 3, 9, 7, 7, 1, 3, 9, 1, 7, 7, 1, 3, 7, 1, 3, 1, 3, 7, 1, 9, 3, 7, 3, 9, 1, 9, 3, 7, 1, 7, 7, 1, 1, 1, 1, 3, 3, 9, 3, 9, 7, 9, 1, 9, 7, 1, 9, 7, 3, 9, 3, 7, 1, 3, 7, 1, 7, 3, 7, 1, 1, 7, 7, 9, 3, 7, 7, 9, 7, 9, 1, 1, 9, 3, 1, 1, 1, 7, 3, 1, 7, 3, 3, 9, 7, 3, 9, 7, 1, 3, 9, 7, 9, 1, 9, 3, 3, 1, 9, 9, 3, 1, 7, 7, 9, 9, 1, 7, 7, 3, 7, 3, 3, 7, 7, 1, 7, 9, 7, 9, 9, 1, 3, 3, 3, 7, 1, 3, 7, 3, 7, 9, 1, 9, 1, 7, 3, 9, 1, 9, 9, 3, 1, 7, 7, 3, 9, 1, 7, 9, 1, 3, 7, 9, 3, 1, 1, 9, 3, 1, 9, 3, 9, 3, 7, 3, 9, 1, 3, 7, 9, 1, 9, 9, 1, 7, 7, 1, 9, 1, 3, 1, 3, 1, 9, 3, 3, 9, 1, 1, 3, 3, 1, 7, 1, 7, 3, 7, 3, 9, 1, 1, 1, 3, 7, 9, 1, 3, 1, 1, 3, 9, 3, 3, 7, 9, 3, 9, 7, 3, 1, 1, 7, 3, 7, 1, 9, 9, 7, 1, 3, 7, 9, 1, 3, 9, 7, 9, 9, 9, 7, 7, 1, 1, 3, 9, 3, 9, 3, 9, 7, 1, 3, 7, 3, 7, 9, 9, 1, 7, 9, 7, 1, 3, 3, 7, 3, 9, 3, 9, 1, 1, 9, 9, 7, 7, 1, 3, 9, 7, 3, 1, 3, 3, 7, 7, 9, 7, 9, 1, 7, 3, 7, 9, 9, 1, 1, 3, 3, 9, 7, 7, 9, 3, 1, 7, 7, 3, 9, 1, 1, 1, 9, 1, 3, 9, 7, 1, 7, 7, 7, 9, 9, 3, 9, 7, 3, 7, 1, 7, 3, 9, 7, 1, 7, 1, 9, 1, 7, 7, 3, 9, 1, 1, 7, 1, 9, 1, 3, 7, 9, 3, 3, 7, 3, 1, 7, 9, 7, 9, 1, 1, 1, 3, 1, 3, 9, 1, 7, 7, 9, 3, 9, 1, 9, 3, 3, 9, 1, 9, 7, 7, 3, 9, 3, 9, 3, 9, 1, 9, 9, 9, 1, 3, 7, 1, 7, 9, 1, 3, 1, 9, 3, 9, 7, 7, 3, 9, 3, 7, 7, 9, 3, 9, 7, 3, 3, 9, 1, 7, 3, 9, 3, 9, 1, 9, 3, 3, 7, 7, 9, 9, 7, 7, 1, 1, 1, 3, 7, 1, 3, 9, 1, 3, 1, 1, 7, 7, 9, 7, 9, 9, 1, 7, 9, 1, 3, 9, 7, 3, 3, 9, 9, 7, 9, 1, 1, 3, 3, 9, 1, 1, 9, 7, 3, 7, 7, 7, 1, 3, 1, 9, 1, 9, 7, 1, 3, 9, 1, 7, 3, 1, 7, 1, 9, 3, 7, 3, 9, 7, 3, 7, 9, 3, 1, 9, 3, 7, 1, 1, 3, 7, 9, 9, 7, 3, 1, 3, 3, 7, 7, 3, 9, 7, 9, 1, 9, 9, 1, 3, 7, 9, 7, 1, 3, 1, 7, 3, 7, 7, 7, 3, 3, 1, 7, 1, 3, 7, 1, 7, 9, 9, 9, 3, 9, 1, 7, 9, 1, 3, 3, 3, 9, 3, 7, 7, 9, 3, 1, 1, 7, 9, 3, 7, 9, 9, 7, 9, 3, 9, 1, 3, 7, 9, 9, 1, 7, 3, 7, 1, 3, 3, 7, 9, 7, 1, 3, 3, 9, 1, 3, 1, 9, 7, 3, 9, 3, 9, 3, 9, 3, 7, 7, 3, 7, 7, 9, 3, 7, 1, 1, 3, 1, 1, 7, 3, 9, 3, 1, 9, 3, 1, 7, 1, 9, 1, 3, 3, 7, 3, 9, 1, 7, 9, 3, 1, 1, 3, 3, 7, 3, 1, 9, 9, 1, 9, 7, 7, 7, 3, 7, 3, 9, 7, 1, 7, 1, 7, 3, 7, 3, 9, 3, 7, 1, 9, 7, 3, 9, 3, 9, 1, 3, 7, 3, 7, 1, 1, 7, 7, 3, 7, 1, 3, 3, 1, 3, 3, 7, 3, 9, 1, 9, 1, 1, 9, 9, 1, 7, 7, 7, 7, 1, 3, 1, 1, 9, 9, 3, 7, 9, 9, 3, 7, 3, 9, 7, 7, 9, 7, 9, 7, 9, 7, 3, 9, 3, 7, 9, 3, 1, 9, 1, 3, 9, 7, 7, 7, 7, 7, 7, 9, 1, 9, 9, 3, 7, 1, 3, 7, 7, 3, 1, 1, 7, 1, 3, 9, 9, 7, 1, 3, 3, 9, 9, 9, 3, 9, 1, 3, 9, 7, 1, 1, 9, 9, 7, 9, 1, 7, 9, 7, 3, 7, 1, 1, 3, 1, 1, 1, 7, 3, 9, 7, 3, 1, 7, 9, 3, 1, 7, 1, 9, 9, 1, 1, 7, 1, 9, 7, 3, 7, 9, 3, 3, 3, 9, 1, 9, 1, 1, 3, 7, 1, 3, 3, 9, 1, 1, 1, 3, 9, 7, 9, 1, 3, 1, 1, 7, 3, 1, 7, 3, 1, 9, 1, 7, 7, 9, 7, 9, 3, 1, 7, 1, 1, 9, 7, 9, 9, 3, 7, 9, 1, 1, 9, 1, 1, 7, 9, 1, 1, 3, 3, 3, 7, 1, 3, 3, 7, 1, 7, 1, 7, 3, 9, 3, 7, 1, 3, 1, 7, 3, 9, 7, 9, 9, 7, 1, 3, 3, 9, 7, 1, 3, 9, 7, 9, 7, 3, 3, 3, 7, 1, 3, 7, 9, 9, 7, 7, 3, 9, 3, 9, 7, 3, 9, 1, 7, 1, 3, 9, 3, 7, 3, 7, 3, 1, 3, 9, 3, 3, 1, 1, 9, 3, 9, 1, 1, 1, 1, 7, 9, 3, 9, 1, 1, 9, 9, 7, 7, 9, 1, 7, 1, 3, 7, 7, 3, 7, 9, 7, 1, 1, 3, 1, 3, 3, 9, 1, 3, 9, 9, 7, 1, 7, 9, 3, 3, 9, 7, 1, 7, 9, 1, 7, 1, 1, 7, 7, 7, 9, 3, 9, 7, 9, 7, 9, 1, 1, 3, 3, 9, 7, 1, 7, 9, 1, 9, 7, 3, 3, 9, 1, 3, 1, 3, 3, 3, 7, 7, 3, 3, 7, 1, 9, 3, 9, 7, 1, 1, 3, 7, 9, 9, 3, 3, 3, 7, 1, 3, 1, 9, 7, 1, 9, 3, 7, 7, 9, 1, 3, 9, 3, 9, 7, 3, 3, 1, 1, 3, 9, 7, 7, 9, 7, 1, 3, 1, 1, 3, 1, 3, 7, 1, 3, 1, 3, 9, 7, 1, 7, 7, 9, 9, 3, 1, 9, 1, 7, 9, 3, 7, 1, 3, 1, 7, 9, 1, 7, 1, 7, 7, 9, 7, 7, 9, 9, 3, 7, 3, 3, 1, 3, 3, 1, 3, 9, 3, 1, 9, 7, 9, 1, 7, 9, 1, 3, 1, 3, 1, 1, 3, 1, 1, 9, 1, 7, 9, 3, 1, 7, 3, 9, 7, 9, 1, 1, 7, 9, 3, 7, 7, 9, 3, 9, 1, 3, 7, 1, 3, 7, 7, 3, 3, 9, 7, 1, 7, 9, 3, 9, 1, 9, 9, 1, 1, 3, 7, 7, 1, 9, 9, 1, 1, 7, 9, 3, 9, 3, 1, 3, 9, 7, 1, 9, 9, 1, 1, 1, 9, 9, 1, 7, 9, 7, 1, 3, 7, 3, 1, 9, 9, 1, 1, 1, 1, 1, 3, 1, 3, 3, 7, 1, 9, 3, 3, 7, 9, 9, 1, 1, 7, 3, 9, 1, 1, 3, 7, 7, 7, 7, 9, 9, 3, 7, 3, 9, 7, 9, 1, 3, 9, 7, 3, 1, 3, 7, 7, 9, 3, 3, 7, 9, 1, 9, 3, 9, 1, 7, 1, 7, 9, 1, 1, 3, 7, 9, 1, 3, 7, 3, 9, 3, 7, 9, 1, 7, 1, 3, 9, 3, 9, 9, 7, 1, 3, 9, 9, 1, 1, 7, 7, 3, 9, 7, 9, 3, 1, 1, 3, 1, 3, 9, 9, 3, 9, 3, 7, 9, 3, 1, 7, 9, 1, 7, 3, 9, 7, 9, 1, 3, 7, 1, 7, 3, 1, 1, 9, 1, 3, 1, 3, 7, 1, 3, 7, 3, 3, 7, 9, 1, 7, 7, 7, 3, 7, 3, 9, 9, 1, 7, 1, 9, 7, 7, 3, 9, 9, 7, 1, 1, 3, 7, 3, 3, 3, 1, 7, 9, 3, 9, 3, 3, 9, 7, 3, 7, 9, 1, 7, 9, 9, 7, 3, 9, 3, 1, 1, 9, 3, 1, 7, 3, 7, 3, 7, 3, 3, 1, 9, 1, 3, 1, 3, 7, 7, 9, 9, 3, 9, 1, 7, 3, 7, 1, 1, 1, 3, 7, 1, 7, 3, 3, 7, 9, 1, 3, 9, 9, 7, 1, 9, 3, 1, 3, 7, 1, 3, 1, 3, 7, 1, 7, 3, 9, 1, 7, 9, 7, 1, 7, 3, 9, 7, 1, 3, 1, 1, 1, 7, 1, 9, 9, 7, 9, 1, 7, 9, 1, 3, 9, 9, 1, 7, 1, 3, 7, 9, 3, 9, 9, 1, 3, 1, 7, 1, 3, 7, 9, 9, 3, 3, 3, 9, 3, 9, 1, 7, 9, 1, 1, 7, 1, 9, 9, 1, 9, 3, 1, 3, 1, 7, 7, 9, 9, 1, 9, 3, 9, 3, 1, 7, 7, 7, 3, 1, 7, 9, 9, 1, 3, 7, 7, 1, 7, 9, 3, 9, 7, 9, 7, 3, 9, 3, 7, 9, 9, 7, 1, 7, 3, 1, 9, 1, 9, 9, 7, 7, 1, 7, 1, 7, 9, 1, 7, 3, 3, 7, 1, 7, 3, 7, 9, 3, 3, 7, 9, 3, 1, 3, 9, 9, 3, 7, 3, 1, 1, 7, 7, 9, 3, 7, 9, 3, 9, 7, 3, 9, 9, 3, 1, 1, 7, 7, 9, 7, 1, 1, 3, 7, 3, 9, 7, 3, 7, 3, 9, 3, 9, 9, 9, 7, 9, 7, 1, 7, 1, 7, 9, 1, 3, 9, 3, 1, 1, 9, 7, 7, 1, 9, 1, 9, 9, 3, 9, 9, 3, 7, 9, 3, 1, 7, 3, 7, 3, 1, 7, 9, 1, 3, 9, 1, 7, 9, 1, 7, 7, 1, 7, 1, 9, 1, 3, 7, 9, 9, 1, 1, 7, 1, 1, 3, 1, 3, 7, 7, 9, 1, 7, 9, 3, 3, 1, 3, 1, 7, 3, 7, 1, 7, 7, 9, 1, 3, 1, 3, 1, 3, 3, 9, 9, 3, 1, 1, 9, 9, 3, 3, 9, 7, 1, 7, 3, 1, 9, 1, 7, 7, 9, 3, 1, 3, 3, 1, 7, 3, 7, 3, 9, 1, 9, 1, 9, 9, 1, 9, 1, 1, 1, 7, 9, 1, 7, 1, 3, 1, 9, 9, 7, 3, 7, 1, 9, 1, 9, 1, 1, 3, 9, 3, 9, 7, 7, 3, 9, 7, 3, 3, 7, 9, 1, 3, 7, 3, 9, 3, 9, 7, 3, 1, 3, 7, 9, 1, 3, 1, 1, 9, 3, 7, 7, 7, 1, 7, 9, 1, 7, 3, 9, 7, 9, 7, 3, 1, 3, 9, 1, 7, 7, 9, 1, 1, 9, 7, 3, 1, 7, 1, 1, 9, 1, 7, 1, 7, 3, 7, 7, 1, 9, 1, 3, 7, 3, 9, 9, 3, 1, 3, 9, 3, 9, 7, 9, 7, 3, 7, 9, 3, 3, 9, 7, 1, 3, 7, 9, 1, 7, 1, 7, 9, 9, 7, 9, 3, 1, 9, 1, 3, 3, 1, 7, 1, 9, 1, 7, 3, 1, 7, 9, 9, 1, 1, 3, 9, 3, 7, 9, 1, 7, 7, 3, 7, 3, 3, 9, 1, 7, 7, 9, 1, 7, 3, 7, 3, 3, 1, 9, 1, 7, 1, 9, 1, 3, 9, 3, 1, 3, 1, 3, 9, 7, 1, 3, 7, 7, 9, 9, 1, 7, 3, 9, 3, 1, 1, 9, 3, 7, 1, 1, 1, 3, 7, 9, 9, 1, 9, 3, 3, 9, 1, 3, 9, 9, 3, 3, 9, 9, 9, 1, 7, 9, 7, 9, 3, 9, 7, 1, 7, 3, 7, 3, 9, 9, 9, 7, 3, 7, 9, 3, 1, 7, 9, 7, 7, 3, 1, 1, 1, 7, 1, 7, 3, 9, 3, 1, 9, 1, 7, 1, 3, 9, 7, 9, 7, 7, 9, 3, 1, 3, 3, 7, 9, 1, 7, 1, 9, 7, 7, 9, 1, 9, 9, 1, 3, 3, 9, 1, 3, 1, 7, 9, 1, 3, 9, 7, 1, 9, 3, 1, 3, 9, 1, 1, 3, 7, 1, 1, 9, 9, 7, 1, 3, 3, 9, 9, 7, 3, 9, 1, 3, 7, 3, 1, 9, 1, 7, 3, 1, 7, 9, 9, 7, 3, 1, 3, 7, 9, 9, 3, 1, 1, 3, 9, 9, 1, 9, 1, 7, 1, 3, 3, 7, 3, 9, 1, 7, 3, 1, 7, 9, 3, 7, 1, 3, 1, 7, 9, 9, 1, 7, 3, 1, 7, 3, 9, 1, 3, 9, 7, 3, 9, 7, 3, 9, 7, 9, 1, 7, 9, 3, 3, 7, 7, 3, 9, 1, 1, 9, 1, 3, 7, 9, 3, 9, 1, 7, 9, 3, 9, 3, 7, 7, 1, 3, 1, 3, 7, 9, 3, 7, 9, 1, 7, 3, 7, 1, 7, 1, 3, 7, 9, 3, 7, 1, 9, 3, 7, 1, 1, 9, 1, 1, 1, 7, 1, 9, 3, 7, 7, 9, 7, 1, 3, 7, 7, 9, 1, 3, 3, 9, 7, 1, 9, 7, 1, 9, 7, 3, 7, 1, 1, 3, 1, 7, 1, 3, 1, 9, 3, 7, 3, 7, 3, 9, 9, 1, 1, 9, 9, 7, 1, 9, 1, 3, 9, 7, 9, 3, 7, 1, 7, 9, 1, 1, 3, 7, 1, 7, 9, 1, 3, 9, 1, 9, 3, 9, 1, 3, 7, 3, 7, 9, 1, 3, 1, 1, 1, 7, 3, 1, 7, 9, 1, 3, 3, 9, 3, 9, 9, 7, 9, 3, 7, 7, 9, 9, 9, 1, 7, 1, 7, 9, 9, 1, 1, 3, 1, 7, 3, 7, 1, 9, 1, 1, 9, 3, 7, 7, 3, 3, 3, 1, 9, 7, 7, 1, 7, 3, 7, 7, 7, 7, 3, 3, 9, 7, 1, 9, 9, 7, 1, 1, 1, 9, 3, 1, 3, 9, 1, 7, 9, 1, 3, 7, 1, 7, 3, 1, 3, 9, 1, 3, 3, 7, 3, 9, 3, 1, 1, 1, 7, 3, 7, 1, 7, 3, 9, 9, 3, 1, 7, 9, 7, 1, 7, 1, 3, 7, 7, 1, 7, 3, 1, 9, 3, 1, 7, 1, 3, 9, 7, 3, 1, 3, 1, 1, 1, 3, 1, 3, 3, 7, 1, 1, 7, 9, 3, 9, 1, 1, 3, 7, 3, 3, 3, 1, 3, 9, 7, 7, 1, 3, 1, 1, 3, 9, 7, 3, 9, 3, 3, 3, 9, 3, 9, 1, 3, 7, 1, 7, 1, 9, 3, 7, 9, 1, 3, 9, 9, 1, 7, 7, 7, 3, 9, 3, 1, 1, 9, 1, 9, 1, 3, 9, 1, 9, 3, 7, 7, 3, 9, 3, 7, 9, 3, 1, 3, 9, 1, 1, 9, 3, 1, 1, 7, 3, 1, 7, 1, 1, 9, 3, 1, 7, 9, 7, 7, 9, 1, 7, 3, 7, 3, 7, 9, 9, 1, 3, 7, 9, 9, 7, 3, 7, 3, 9, 1, 3, 7, 1, 9, 3, 9, 7, 7, 3, 7, 1, 9, 1, 1, 3, 9, 3, 3, 1, 1, 3, 9, 7, 3, 9, 3, 3, 9, 1, 7, 3, 9, 1, 7, 1, 9, 7, 1, 7, 9, 3, 7, 7, 7, 9, 7, 7, 7, 7, 7, 9, 3, 1, 1, 7, 1, 9, 1, 9, 3, 7, 9, 1, 1, 9, 7, 3, 7, 9, 1, 7, 9, 1, 7, 1, 7, 1, 1, 7, 3, 1, 7, 9, 3, 1, 1, 9, 1, 7, 3, 1, 9, 3, 7, 9, 9, 3, 9, 7, 9, 7, 1, 7, 3, 3, 1, 7, 9, 3, 1, 7, 9, 3, 7, 1, 3, 9, 1, 3, 9, 3, 7, 1, 9, 7, 7, 1, 1, 3, 3, 1, 9, 1, 3, 1, 3, 3, 9, 7, 3, 9, 3, 9, 1, 1, 7, 9, 1, 9, 3, 1, 9, 7, 3, 7, 3, 9, 1, 9, 1, 3, 9, 3, 3, 1, 9, 9, 7, 7, 1, 3, 7, 9, 7, 3, 9, 1, 1, 9, 7, 7, 7, 1, 9, 3, 7, 1, 3, 3, 7, 9, 9, 3, 9, 7, 1, 3, 7, 9, 1, 9, 3, 7, 1, 3, 9, 9, 7, 1, 9, 1, 3, 9, 1, 9, 9, 7, 7, 9, 1, 1, 9, 3, 9, 9, 7, 7, 3, 7, 1, 1, 7, 9, 3, 7, 7, 9, 7, 7, 1, 3, 9, 3, 7, 1, 7, 3, 9, 7, 7, 1, 9, 1, 7, 3, 1, 9, 9, 1, 3, 3, 7, 9, 7, 1, 7, 1, 3, 9, 3, 9, 3, 3, 7, 1, 1, 3, 1, 3, 1, 7, 1, 9, 7, 1, 3, 9, 3, 9, 7, 3, 9, 3, 1, 7, 1, 7, 3, 3, 9, 3, 7, 7, 7, 9, 3, 1, 3, 9, 9, 1, 3, 3, 9, 7, 9, 7, 1, 3, 7, 1, 7, 3, 1, 7, 9, 9, 1, 1, 3, 9, 7, 7, 3, 9, 3, 1, 9, 7, 1, 9, 9, 7, 9, 3, 7, 1, 3, 9, 9, 1, 7, 3, 1, 1, 3, 1, 7, 9, 1, 7, 7, 3, 1, 7, 9, 3, 3, 9, 3, 9, 7, 3, 1, 3, 9, 1, 7, 9, 9, 7, 1, 3, 3, 9, 7, 3, 7, 1, 1, 3, 3, 7, 1, 9, 1, 7, 3, 7, 3, 1, 1, 9, 7, 7, 1, 9, 7, 3, 9, 7, 3, 3, 3, 7, 1, 3, 9, 1, 7, 7, 9, 3, 9, 1, 1, 3, 9, 7, 3, 7, 3, 3, 3, 1, 3, 9, 9, 1, 9, 9, 7, 1, 9, 7, 1, 3, 9, 1, 1, 7, 1, 7, 3, 3, 7, 9, 1, 7, 1, 7, 9, 1, 7, 1, 7, 3, 9, 7, 3, 9, 7, 1, 1, 7, 3, 7, 3, 7, 1, 1, 1, 9, 1, 9, 7, 1, 9, 3, 3, 7, 9, 9, 7, 3, 3, 9, 7, 1, 3, 9, 1, 3, 9, 9, 1, 7, 3, 9, 7, 7, 9, 7, 1, 3, 9, 7, 7, 7, 9, 7, 9, 1, 1, 7, 3, 1, 1, 3, 9, 3, 7, 9, 1, 9, 1, 7, 1, 7, 3, 9, 7, 7, 1, 7, 9, 7, 1, 7, 7, 9, 3, 9, 1, 1, 3, 9, 3, 1, 9, 7, 1, 9, 1, 9, 1, 7, 3, 3, 9, 9, 9, 7, 1, 3, 7, 7, 1, 9, 1, 3, 9, 1, 3, 9, 7, 1, 1, 7, 9, 3, 7, 3, 7, 9, 7, 7, 1, 1, 1, 3, 3, 1, 1, 3, 7, 3, 1, 1, 3, 7, 3, 7, 9, 1, 3, 3, 1, 9, 3, 1, 9, 3, 7, 9, 3, 9, 7, 9, 7, 3, 9, 1, 7, 3, 7, 3, 7, 3, 1, 1, 7, 1, 7, 3, 9, 9, 1, 7, 3, 9, 1, 7, 9, 9, 7, 1, 7, 9, 9, 1, 9, 7, 1, 3, 1, 7, 3, 9, 3, 9, 1, 3, 9, 7, 9, 1, 3, 3, 3, 3, 9, 3, 9, 1, 9, 1, 9, 7, 9, 1, 1, 3, 9, 3, 9, 3, 9, 9, 1, 7, 9, 3, 9, 3, 1, 7, 7, 9, 9, 1, 1, 9, 9, 7, 7, 3, 7, 3, 7, 3, 3, 7, 3, 9, 1, 7, 3, 1, 1, 3, 7, 3, 3, 9, 1, 7, 7, 7, 3, 9, 1, 9, 9, 3, 1, 1, 3, 7, 3, 3, 1, 9, 1, 7, 3, 9, 7, 9, 7, 1, 9, 3, 7, 7, 7, 3, 1, 3, 3, 9, 7, 1, 1, 3, 9, 3, 7, 9, 7, 7, 1, 9, 7, 1, 9, 1, 7, 9, 3, 1, 1, 9, 3, 3, 1, 3, 7, 9, 7, 7, 9, 1, 7, 1, 7, 3, 9, 9, 7, 3, 7, 3, 1, 7, 9, 9, 1, 1, 9, 7, 9, 1, 3, 7, 1, 1, 1, 7, 1, 3, 7, 1, 7, 1, 1, 9, 7, 7, 3, 9, 3, 1, 3, 1, 3, 9, 7, 7, 1, 7, 9, 9, 1, 7, 1, 3, 9, 3, 1, 7, 3, 1, 1, 3, 7, 3, 7, 1, 1, 3, 9, 7, 7, 7, 9, 7, 3, 9, 1, 1, 1, 9, 9, 1, 1, 7, 1, 9, 1, 7, 9, 7, 9, 1, 9, 3, 9, 3, 7, 3, 1, 9, 1, 3, 9, 1, 7, 7, 1, 3, 7, 7, 9, 3, 9, 7, 1, 7, 1, 9, 7, 3, 7, 9, 1, 1, 3, 1, 7, 7, 3, 1, 9, 7, 3, 3, 9, 3, 1, 9, 1, 9, 7, 3, 1, 3, 3, 7, 7, 7, 7, 1, 9, 7, 7, 1, 7, 9, 3, 7, 3, 1, 3, 7, 1, 1, 1, 1, 7, 3, 7, 3, 9, 1, 3, 9, 1, 3, 7, 9, 1, 7, 7, 9, 9, 1, 3, 3, 9, 1, 3, 7, 1, 3, 9, 9, 7, 7, 7, 9, 1, 3, 9, 3, 3, 7, 9, 7, 3, 1, 1, 7, 3, 9, 7, 9, 1, 3, 9, 1, 3, 3, 7, 9, 7, 1, 7, 3, 1, 3, 9, 9, 3, 9, 1, 9, 3, 3, 9, 1, 3, 7, 7, 9, 3, 9, 1, 9, 3, 7, 3, 3, 3, 1, 9, 9, 3, 7, 9, 1, 1, 7, 1, 3, 9, 1, 7, 3, 1, 1, 9, 1, 1, 3, 7, 1, 3, 9, 1, 1, 1, 9, 7, 3, 9, 3, 9, 7, 9, 1, 3, 7, 3, 3, 9, 1, 1, 7, 3, 3, 9, 9, 9, 1, 1, 1, 9, 1, 7, 3, 3, 9, 3, 3, 7, 9, 9, 7, 3, 7, 7, 1, 3, 3, 1, 1, 3, 7, 1, 3, 9, 1, 3, 9, 7, 3, 7, 9, 1, 1, 7, 9, 1, 3, 7, 7, 1, 7, 3, 1, 9, 9, 1, 9, 7, 9, 1, 7, 9, 3, 9, 3, 7, 9, 1, 3, 9, 3, 3, 9, 9, 1, 7, 1, 9, 1, 7, 7, 9, 9, 3, 7, 9, 1, 7, 9, 9, 1, 7, 1, 1, 3, 7, 9, 9, 1, 3, 1, 7, 3, 1, 3, 7, 7, 1, 3, 3, 9, 3, 1, 7, 3, 7, 9, 1, 3, 9, 1, 1, 7, 7, 9, 3, 9, 3, 7, 3, 3, 9, 9, 9, 1, 7, 3, 7, 1, 9, 9, 7, 9, 1, 1, 3, 7, 7, 9, 7, 3, 7, 3, 3, 7, 1, 7, 1, 7, 9, 1, 7, 7, 3, 9, 3, 1, 9, 7, 1, 7, 1, 3, 9, 1, 3, 3, 3, 1, 3, 9, 9, 1, 9, 9, 1, 7, 1, 3, 9, 7, 9, 1, 7, 3, 9, 1, 3, 3, 9, 3, 9, 3, 3, 9, 1, 9, 9, 1, 3, 1, 9, 3, 7, 9, 7, 7, 3, 3, 9, 1, 7, 7, 7, 7, 7, 9, 3, 9, 7, 9, 1, 7, 9, 1, 7, 1, 3, 3, 1, 1, 9, 7, 7, 3, 7, 9, 9, 1, 1, 3, 3, 1, 9, 7, 1, 7, 9, 7, 3, 9, 1, 7, 9, 9, 1, 7, 3, 9, 7, 3, 3, 7, 1, 3, 9, 3, 9, 3, 3, 3, 3, 7, 7, 9, 9, 7, 3, 9, 3, 1, 1, 9, 7, 9, 1, 9, 3, 1, 7, 9, 1, 3, 7, 9, 3, 9, 1, 3, 7, 3, 7, 9, 1, 7, 1, 7, 3, 3, 9, 7, 9, 3, 3, 7, 7, 1, 3, 3, 1, 1, 3, 7, 1, 3, 9, 9, 1, 1, 3, 3, 9, 1, 7, 9, 9, 1, 7, 9, 1, 9, 1, 9, 7, 1, 9, 7, 7, 9, 9, 7, 7, 3, 9, 7, 9, 1, 1, 1, 3, 3, 7, 3, 9, 3, 9, 3, 7, 3, 1, 1, 7, 9, 1, 7, 7, 9, 1, 7, 3, 7, 9, 3, 7, 3, 9, 1, 9, 9, 1, 3, 1, 3, 7, 3, 7, 3, 7, 9, 3, 1, 1, 7, 1, 9, 3, 7, 3, 1, 1, 9, 9, 1, 7, 7, 9, 9, 7, 7, 9, 1, 3, 3, 1, 7, 1, 3, 7, 1, 7, 3, 9, 1, 1, 3, 9, 9, 7, 3, 1, 7, 1, 9, 9, 7, 1, 9, 1, 1, 3, 9, 7, 1, 3, 7, 9, 7, 9, 3, 1, 9, 1, 3, 7, 9, 1, 7, 1, 3, 9, 3, 3, 9, 7, 3, 9, 3, 7, 3, 9, 3, 7, 1, 9, 3, 9, 1, 7, 1, 3, 7, 9, 1, 1, 3, 7, 1, 1, 7, 9, 9, 7, 1, 1, 7, 1, 3, 3, 1, 7, 3, 1, 7, 9, 3, 1, 3, 1, 1, 3, 3, 1, 3, 9, 3, 1, 3, 9, 3, 1, 7, 9, 1, 3, 9, 1, 3, 3, 3, 1, 7, 7, 9, 3, 9, 7, 3, 1, 9, 1, 7, 1, 3, 1, 1, 3, 9, 7, 9, 1, 7, 3, 9, 1, 7, 1, 7, 1, 3, 9, 9, 9, 1, 7, 3, 3, 1, 1, 9, 1, 7, 3, 1, 3, 9, 3, 9, 7, 1, 3, 7, 9, 1, 7, 9, 7, 7, 9, 9, 9, 9, 1, 1, 3, 7, 3, 3, 1, 7, 9, 1, 3, 7, 7, 9, 9, 3, 9, 7, 1, 9, 3, 7, 7, 9, 3, 9, 1, 7, 1, 3, 9, 1, 7, 9, 3, 9, 1, 3, 9, 7, 3, 9, 7, 9, 7, 1, 3, 1, 9, 3, 1, 9, 1, 7, 1, 9, 1, 3, 9, 1, 3, 1, 9, 3, 3, 7, 9, 1, 1, 3, 3, 1, 3, 9, 1, 1, 3, 9, 7, 1, 7, 1, 3, 1, 7, 7, 9, 7, 9, 9, 7, 3, 1, 7, 9, 1, 1, 1, 3, 9, 3, 9, 1, 7, 9, 7, 1, 3, 7, 1, 9, 7, 3, 7, 3, 1, 9, 7, 3, 3, 1, 9, 3, 7, 9, 1, 9, 7, 3, 7, 1, 3, 7, 3, 1, 3, 7, 7, 1, 9, 9, 7, 1, 9, 3, 9, 9, 3, 9, 1, 1, 7, 9, 7, 3, 9, 9, 7, 9, 1, 1, 3, 1, 7, 9, 7, 9, 1, 1, 9, 7, 3, 7, 9, 1, 3, 9, 1, 3, 1, 1, 1, 3, 9, 3, 3, 3, 9, 9, 1, 3, 9, 1, 1, 3, 3, 1, 3, 7, 3, 9, 1, 9, 9, 1, 1, 3, 3, 7, 3, 1, 3, 7, 9, 3, 1, 7, 9, 1, 7, 3, 9, 3, 9, 3, 9, 7, 1, 1, 9, 7, 9, 3, 7, 1, 7, 9, 7, 3, 7, 9, 7, 9, 3, 9, 1, 3, 7, 9, 1, 3, 7, 1, 3, 7, 1, 1, 9, 3, 3, 1, 7, 7, 9, 9, 7, 3, 9, 3, 7, 1, 3, 1, 1, 7, 9, 9, 1, 1, 9, 3, 9, 7, 1, 3, 9, 9, 7, 1, 7, 9, 1, 3, 9, 1, 3, 7, 3, 1, 7, 7, 3, 9, 3, 3, 7, 9, 1, 9, 7, 9, 7, 1, 3, 9, 3, 9, 7, 1, 1, 9, 9, 7, 1, 3, 9, 9, 9, 1, 9, 7, 9, 1, 1, 9, 3, 7, 7, 9, 1, 9, 7, 3, 7, 7, 7, 7, 1, 7, 3, 9, 3, 7, 1, 7, 1, 3, 1, 1, 3, 7, 7, 7, 9, 1, 3, 9, 3, 9, 1, 1, 9, 9, 1, 7, 3, 1, 3, 7, 7, 1, 3, 7, 3, 9, 3, 7, 1, 1, 3, 1, 9, 7, 7, 3, 1, 3, 9, 7, 9, 7, 3, 9, 9, 9, 9, 3, 7, 3, 9, 1, 1, 9, 7, 7, 1, 1, 3, 7, 7, 9, 3, 7, 7, 3, 9, 1, 3, 7, 9, 3, 7, 9, 1, 3, 9, 1, 1, 7, 9, 7, 7, 3, 9, 7, 9, 7, 3, 3, 7, 1, 1, 9, 1, 7, 1, 3, 3, 3, 7, 1, 3, 7, 7, 7, 9, 3, 9, 1, 7, 9, 9, 1, 3, 9, 3, 3, 7, 1, 3, 9, 1, 7, 9, 7, 3, 7, 3, 3, 9, 1, 1, 7, 9, 7, 1, 7, 7, 9, 7, 7, 3, 9, 9, 1, 3, 7, 9, 1, 7, 3, 9, 9, 1, 3, 7, 1, 9, 1, 3, 9, 7, 1, 9, 3, 1, 7, 3, 7, 1, 3, 1, 9, 9, 1, 3, 7, 1, 7, 1, 9, 3, 7, 1, 3, 9, 1, 7, 1, 3, 7, 9, 1, 3, 7, 3, 1, 3, 9, 9, 1, 7, 3, 9, 3, 7, 9, 7, 9, 1, 3, 7, 3, 9, 1, 9, 3, 7, 7, 9, 3, 1, 9, 1, 7, 9, 1, 9, 1, 1, 9, 7, 1, 3, 1, 9, 3, 9, 1, 3, 7, 7, 3, 3, 3, 9, 1, 3, 9, 1, 3, 9, 1, 1, 7, 9, 9, 1, 7, 3, 1, 7, 9, 7, 1, 9, 1, 7, 9, 3, 9, 9, 1, 1, 7, 1, 7, 7, 3, 7, 3, 9, 9, 3, 1, 7, 7, 3, 1, 7, 1, 3, 9, 3, 9, 1, 7, 3, 3, 9, 7, 1, 9, 7, 7, 3, 1, 7, 1, 7, 1, 1, 9, 3, 9, 3, 9, 7, 3, 3, 7, 3, 9, 3, 7, 9, 3, 3, 7, 7, 9, 1, 7, 1, 7, 9, 1, 7, 1, 9, 1, 9, 1, 3, 9, 9, 7, 3, 3, 7, 9, 9, 9, 3, 1, 7, 7, 9, 1, 9, 7, 7, 3, 3, 7, 7, 3, 9, 9, 9, 1, 3, 7, 9, 7, 7, 9, 3, 1, 1, 9, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 7, 9, 7, 3, 3, 9, 7, 1, 3, 7, 3, 9, 1, 1, 9, 1, 7, 9, 9, 7, 3, 7, 9, 1, 1, 7, 3, 9, 9, 7, 7, 3, 1, 3, 7, 9, 1, 3, 9, 7, 1, 3, 9, 1, 3, 3, 1, 3, 9, 1, 1, 3, 1, 7, 7, 9, 1, 9, 7, 9, 3, 3, 1, 7, 9, 9, 1, 3, 1, 1, 3, 9, 3, 9, 7, 9, 7, 3, 9, 1, 7, 3, 7, 9, 3, 1, 3, 9, 1, 7, 9, 9, 1, 9, 1, 7, 1, 1, 3, 9, 9, 9, 1, 1, 3, 9, 1, 3, 7, 9, 3, 3, 1, 3, 3, 7, 7, 1, 3, 9, 9, 9, 1, 7, 9, 3, 1, 1, 7, 9, 7, 9, 7, 1, 7, 1, 7, 3, 9, 7, 3, 7, 7, 3, 1, 7, 7, 1, 7, 9, 3, 9, 1, 3, 9, 1, 3, 9, 3, 9, 3, 7, 1, 9, 7, 7, 7, 1, 9, 7, 7, 3, 9, 1, 7, 1, 7, 1, 9, 7, 9, 3, 9, 1, 3, 7, 3, 7, 3, 9, 1, 7, 3, 9, 7, 9, 3, 1, 9, 7, 1, 3, 9, 1, 3, 3, 9, 1, 7, 1, 9, 1, 1, 7, 3, 7, 9, 1, 3, 7, 9, 7, 3, 9, 9, 7, 1, 3, 7, 1, 3, 3, 7, 3, 9, 7, 3, 7, 9, 9, 3, 9, 1, 1, 7, 7, 3, 9, 1, 3, 3, 1, 1, 9, 1, 9, 7, 3, 7, 9, 1, 1, 7, 3, 9, 7, 7, 3, 7, 3, 7, 3, 9, 1, 7, 3, 9, 3, 1, 7, 9, 3, 3, 9, 1, 3, 9, 3, 9, 1, 3, 7, 9, 1, 3, 7, 7, 9, 9, 1, 3, 7, 9, 1, 3, 9, 3, 1, 9, 1, 7, 9, 3, 1, 3, 7, 7, 3, 1, 1, 3, 9, 7, 1, 9, 3, 1, 3, 7, 7, 7, 3, 1, 1, 7, 9, 1, 7, 1, 7, 3, 7, 3, 9, 7, 9, 3, 9, 7, 1, 9, 9, 1, 3, 9, 1, 3, 9, 9, 1, 1, 7, 7, 1, 1, 3, 7, 1, 7, 1, 9, 3, 3, 7, 1, 3, 9, 1, 3, 9, 7, 1, 3, 9, 1, 3, 3, 1, 7, 9, 9, 1, 3, 9, 3, 9, 1, 7, 1, 3, 1, 3, 9, 3, 3, 1, 7, 1, 1, 1, 9, 1, 7, 3, 9, 7, 7, 9, 3, 1, 1, 7, 9, 3, 1, 9, 3, 3, 1, 7, 3, 9, 7, 9, 9, 3, 9, 1, 7, 7, 3, 9, 1, 3, 9, 7, 9, 9, 9, 1, 1, 7, 3, 9, 1, 7, 7, 3, 9, 1, 3, 7, 7, 1, 9, 1, 1, 3, 1, 3, 3, 9, 3, 7, 3, 3, 7, 1, 7, 7, 1, 3, 9, 1, 9, 3, 7, 1, 3, 9, 1, 3, 7, 9, 9, 1, 3, 3, 9, 1, 3, 9, 9, 1, 1, 7, 3, 7, 7, 9, 3, 7, 3, 9, 3, 1, 7, 1, 9, 3, 7, 3, 9, 7, 7, 7, 3, 9, 9, 1, 7, 1, 7, 7, 7, 9, 1, 9, 9, 3, 7, 1, 7, 1, 1, 3, 1, 7, 7, 1, 1, 3, 1, 9, 9, 3, 9, 9, 3, 1, 7, 1, 3, 9, 7, 3, 1, 1, 7, 3, 1, 7, 1, 7, 9, 1, 3, 1, 7, 9, 1, 7, 3, 3, 3, 9, 9, 7, 9, 1, 3, 1, 1, 3, 9, 1, 1, 3, 1, 3, 3, 9, 7, 7, 9, 3, 7, 9, 3, 7, 3, 9, 7, 7, 9, 1, 1, 1, 1, 7, 9, 7, 3, 7, 7, 1, 9, 7, 9, 7, 1, 1, 1, 3, 9, 7, 9, 9, 7, 3, 9, 1, 7, 9, 7, 1, 7, 3, 3, 7, 9, 1, 3, 3, 7, 1, 7, 3, 9, 1, 9, 1, 9, 3, 7, 9, 9, 1, 7, 1, 7, 1, 1, 7, 9, 3, 7, 3, 9, 7, 1, 3, 7, 7, 3, 7, 9, 3, 9, 7, 9, 7, 3, 9, 3, 9, 7, 9, 1, 7, 7, 3, 9, 1, 3, 7, 1, 3, 3, 1, 1, 3, 9, 1, 7, 1, 1, 3, 3, 1, 9, 7, 3, 1, 7, 1, 7, 9, 1, 3, 7, 3, 3, 7, 9, 1, 3, 7, 3, 9, 9, 7, 9, 1, 1, 9, 1, 7, 9, 3, 9, 7, 3, 7, 3, 9, 3, 9, 9, 7, 1, 3, 7, 3, 9, 3, 1, 3, 9, 9, 1, 1, 9, 3, 1, 9, 7, 3, 7, 3, 9, 1, 7, 1, 7, 1, 7, 1, 7, 3, 3, 7, 7, 9, 3, 7, 1, 7, 1, 9, 3, 9, 1, 9, 7, 7, 9, 3, 7, 3, 9, 9, 1, 7, 1, 9, 7, 3, 9, 3, 7, 7, 3, 1, 1, 7, 1, 1, 7, 9, 9, 1, 1, 7, 9, 3, 3, 7, 9, 3, 7, 3, 9, 9, 3, 1, 7, 9, 3, 9, 3, 9, 1, 3, 9, 1, 7, 1, 1, 9, 1, 3, 7, 9, 7, 9, 1, 7, 3, 7, 9, 1, 9, 7, 7, 9, 3, 7, 9, 1, 3, 1, 3, 3, 9, 1, 3, 9, 7, 1, 3, 7, 1, 7, 7, 7, 7, 3, 9, 9, 3, 7, 9, 7, 1, 7, 3, 9, 1, 3, 9, 9, 1, 7, 9, 3, 1, 1, 9, 1, 7, 3, 7, 9, 1, 3, 9, 3, 1, 3, 7, 3, 7, 9, 1, 7, 3, 1, 9, 3, 9, 7, 3, 9, 9, 9, 1, 7, 3, 9, 3, 1, 3, 9, 7, 7, 1, 7, 9, 3, 9, 1, 9, 1, 7, 3, 3, 3, 3, 7, 3, 9, 7, 9, 1, 7, 3, 9, 7, 9, 1, 7, 1, 7, 3, 3, 1, 7, 7, 3, 7, 9, 1, 7, 9, 3, 7, 3, 1, 3, 1, 9, 3, 7, 9, 7, 9, 1, 3, 7, 7, 1, 7, 1, 9, 3, 1, 3, 9, 3, 1, 3, 3, 7, 1, 9, 3, 7, 1, 9, 3, 3, 7, 9, 7, 3, 9, 3, 1, 7, 3, 9, 1, 7, 7, 7, 9, 1, 3, 9, 1, 9, 3, 7, 1, 1, 1, 9, 7, 3, 7, 7, 1, 9, 9, 1, 7, 3, 7, 9, 3, 9, 1, 7, 9, 3, 9, 1, 3, 7, 3, 1, 9, 3, 3, 9, 7, 9, 1, 3, 7, 3, 9, 7, 1, 3, 1, 9, 7, 3, 7, 1, 3, 1, 3, 1, 1, 1, 7, 9, 3, 3, 1, 9, 7, 1, 7, 1, 3, 3, 9, 1, 1, 7, 3, 9, 1, 9, 1, 1, 3, 1, 7, 1, 3, 3, 3, 7, 3, 9, 3, 9, 7, 9, 3, 7, 3, 1, 3, 7, 3, 1, 7, 9, 1, 7, 3, 3, 9, 1, 3, 1, 3, 1, 3, 9, 7, 7, 1, 9, 7, 1, 9, 3, 7, 3, 1, 1, 3, 1, 3, 1, 7, 9, 1, 3, 7, 3, 7, 3, 7, 7, 3, 9, 3, 7, 1, 9, 7, 7, 1, 3, 1, 7, 3, 9, 1, 1, 7, 3, 1, 7, 3, 9, 3, 9, 1, 7, 3, 3, 1, 3, 9, 9, 7, 3, 1, 1, 7, 7, 3, 3, 7, 1, 3, 9, 1, 7, 7, 3, 9, 1, 9, 1, 1, 7, 3, 3, 7, 3, 1, 7, 1, 9, 3, 1, 7, 3, 1, 3, 9, 3, 9, 1, 1, 7, 9, 7, 9, 9, 3, 7, 3, 3, 3, 9, 7, 9, 1, 7, 9, 3, 1, 9, 1, 7, 1, 3, 3, 1, 1, 9, 3, 3, 1, 1, 9, 3, 7, 1, 1, 3, 1, 7, 9, 1, 1, 9, 3, 9, 1, 7, 9, 1, 7, 9, 1, 3, 9, 3, 9, 3, 7, 9, 1, 3, 7, 7, 1, 9, 7, 7, 7, 3, 1, 7, 9, 3, 9, 1, 3, 9, 3, 7, 3, 1, 1, 1, 3, 9, 9, 1, 7, 3, 9, 3, 9, 9, 7, 9, 3, 7, 1, 7, 1, 1, 9, 3, 3, 7, 3, 9, 9, 7, 7, 1, 3, 9, 7, 9, 1, 3, 3, 3, 9, 7, 9, 1, 7, 1, 3, 9, 1, 9, 9, 7, 7, 3, 7, 9, 9, 7, 1, 3, 9, 3, 7, 1, 7, 7, 7, 3, 7, 9, 7, 3, 3, 7, 3, 9, 9, 3, 3, 9, 7, 3, 9, 3, 7, 3, 3, 9, 1, 3, 3, 3, 9, 9, 1, 9, 7, 3, 9, 1, 7, 3, 3, 9, 3, 9, 1, 3, 9, 1, 9, 9, 1, 3, 7, 3, 9, 3, 3, 7, 3, 1, 3, 3, 3, 7, 7, 7, 9, 3, 1, 3, 9, 1, 7, 9, 7, 3, 9, 7, 3, 9, 7, 1, 9, 7, 3, 3, 9, 7, 1, 1, 7, 9, 9, 1, 7, 9, 1, 3, 7, 9, 1, 7, 3, 3, 9, 1, 9, 1, 7, 9, 9, 9, 1, 3, 7, 1, 9, 3, 1, 9, 1, 9, 1, 7, 3, 7, 1, 7, 1, 9, 3, 7, 1, 7, 1, 9, 7, 1, 1, 7, 9, 1, 1, 7, 1, 1, 7, 9, 1, 7, 1, 3, 7, 9, 3, 9, 1, 7, 1, 3, 7, 9, 1, 7, 1, 1, 7, 3, 7, 9, 1, 9, 3, 7, 7, 3, 9, 7, 1, 3, 7, 1, 3, 1, 9, 1, 7, 3, 9, 7, 3, 9, 1, 7, 3, 7, 1, 9, 7, 9, 1, 9, 3, 3, 1, 9, 1, 1, 3, 1, 7, 1, 1, 9, 9, 3, 7, 7, 9, 9, 7, 9, 3, 7, 1, 7, 7, 9, 3, 7, 9, 3, 1, 7, 1, 3, 9, 7, 9, 9, 1, 3, 1, 1, 7, 3, 7, 1, 3, 9, 7, 9, 3, 9, 9, 3, 9, 1, 7, 9, 9, 7, 3, 9, 1, 3, 9, 7, 7, 1, 7, 1, 3, 1, 9, 7, 3, 1, 7, 9, 1, 3, 1, 7, 7, 9, 7, 1, 9, 1, 3, 9, 1, 3, 9, 1, 7, 9, 3, 9, 1, 9, 3, 3, 9, 1, 7, 7, 1, 3, 3, 7, 1, 3, 9, 9, 1, 7, 9, 1, 7, 3, 7, 3, 9, 1, 3, 7, 9, 3, 7, 1, 1, 9, 3, 3, 3, 1, 3, 3, 7, 9, 1, 7, 7, 3, 3, 9, 1, 1, 9, 9, 1, 3, 1, 7, 1, 7, 3, 7, 7, 3, 7, 3, 7, 9, 7, 3, 7, 3, 7, 9, 3, 1, 3, 1, 1, 7, 9, 3, 9, 7, 3, 9, 7, 7, 1, 3, 1, 9, 7, 3, 9, 1, 9, 1, 3, 3, 1, 9, 7, 3, 1, 7, 9, 1, 7, 1, 1, 3, 9, 1, 1, 9, 3, 3, 9, 9, 7, 3, 7, 9, 7, 1, 1, 3, 3, 1, 3, 3, 3, 7, 9, 7, 3, 3, 3, 9, 1, 7, 7, 1, 3, 9, 9, 3, 7, 7, 9, 9, 1, 7, 9, 1, 3, 7, 9, 1, 3, 1, 9, 3, 1, 1, 3, 9, 7, 3, 9, 3, 1, 7, 9, 1, 9, 1, 9, 3, 1, 7, 7, 9, 7, 3, 7, 3, 9, 7, 7, 1, 7, 9, 1, 7, 3, 3, 1, 1, 7, 9, 1, 3, 3, 9, 3, 7, 3, 1, 9, 1, 7, 3, 3, 3, 9, 9, 1, 3, 9, 9, 3, 1, 7, 3, 9, 1, 7, 3, 9, 9, 9, 1, 9, 3, 9, 3, 1, 7, 1, 1, 7, 1, 7, 9, 9, 1, 7, 9, 1, 1, 3, 9, 1, 7, 3, 3, 9, 9, 3, 9, 9, 1, 1, 9, 3, 7, 1, 9, 1, 9, 3, 9, 7, 7, 3, 1, 1, 3, 7, 9, 1, 3, 9, 1, 7, 1, 9, 3, 1, 9, 9, 3, 7, 7, 9, 1, 1, 3, 9, 3, 9, 3, 1, 7, 9, 3, 3, 9, 3, 7, 1, 7, 1, 9, 1, 7, 9, 7, 1, 7, 7, 9, 7, 9, 3, 1, 3, 1, 7, 7, 7, 3, 9, 9, 7, 9, 1, 7, 1, 7, 7, 9, 9, 1, 1, 9, 9, 1, 3, 3, 9, 7, 7, 9, 1, 3, 9, 7, 7, 9, 9, 7, 3, 1, 7, 1, 1, 3, 7, 3, 1, 1, 3, 9, 7, 1, 3, 3, 7, 7, 3, 9, 1, 9, 3, 7, 9, 9, 7, 3, 9, 1, 9, 1, 9, 7, 9, 3, 9, 1, 3, 7, 3, 7, 1, 7, 3, 7, 7, 1, 7, 9, 3, 1, 3, 3, 9, 7, 1, 1, 9, 7, 9, 9, 3, 3, 7, 3, 9, 1, 7, 9, 1, 7, 9, 1, 3, 9, 3, 1, 1, 9, 3, 1, 9, 3, 9, 7, 1, 3, 1, 3, 3, 3, 1, 7, 9, 9, 7, 7, 9, 9, 7, 1, 9, 3, 7, 1, 3, 9, 7, 7, 9, 3, 7, 9, 1, 3, 7, 9, 1, 1, 7, 1, 7, 9, 1, 3, 1, 1, 3, 1, 7, 9, 9, 1, 7, 9, 3, 1, 9, 1, 9, 7, 9, 7, 9, 9, 1, 3, 9, 1, 3, 1, 1, 1, 3, 7, 3, 3, 9, 1, 1, 3, 9, 1, 7, 3, 7, 7, 1, 3, 3, 1, 7, 3, 7, 1, 1, 7, 7, 3, 9, 7, 9, 9, 1, 3, 3, 9, 7, 1, 9, 7, 1, 3, 1, 3, 9, 7, 1, 1, 3, 7, 1, 7, 3, 9, 1, 1, 7, 3, 1, 7, 9, 3, 9, 7, 3, 9, 9, 7, 7, 1, 3, 3, 9, 1, 7, 7, 1, 7, 9, 9, 7, 9, 3, 1, 1, 7, 7, 1, 9, 1, 7, 1, 7, 9, 1, 3, 1, 7, 7, 9, 9, 7, 9, 7, 1, 7, 9, 3, 7, 7, 9, 3, 3, 9, 1, 9, 1, 3, 7, 1, 3, 7, 3, 1, 9, 3, 1, 3, 7, 3, 1, 1, 9, 3, 9, 1, 9, 3, 9, 9, 7, 1, 3, 1, 1, 7, 3, 9, 3, 1, 3, 9, 9, 1, 3, 3, 9, 3, 7, 3, 7, 7, 3, 9, 7, 3, 9, 3, 9, 1, 7, 9, 9, 7, 7, 3, 1, 3, 3, 9, 1, 7, 1, 3, 7, 9, 7, 9, 1, 1, 1, 3, 1, 1, 3, 3, 1, 7, 3, 3, 7, 9, 3, 1, 1, 1, 9, 7, 3, 1, 9, 7, 1, 9, 3, 1, 3, 7, 3, 7, 7, 9, 1, 1, 7, 3, 3, 1, 7, 9, 7, 9, 3, 1, 1, 3, 7, 9, 9, 1, 9, 3, 3, 3, 1, 3, 3, 7, 7, 9, 7, 1, 7, 3, 3, 7, 9, 1, 9, 3, 9, 1, 9, 3, 1, 3, 1, 1, 3, 1, 7, 1, 7, 9, 1, 9, 9, 7, 1, 7, 1, 3, 7, 1, 7, 9, 9, 9, 1, 7, 9, 3, 1, 3, 9, 7, 9, 3, 9, 1, 7, 9, 1, 7, 3, 3, 3, 9, 3, 9, 1, 7, 7, 9, 1, 1, 3, 7, 3, 9, 1, 7, 1, 9, 7, 3, 7, 3, 1, 9, 7, 9, 3, 1, 7, 3, 7, 9, 7, 1, 9, 3, 9, 9, 1, 9, 1, 7, 3, 3, 9, 3, 3, 9, 1, 7, 3, 1, 3, 9, 3, 7, 1, 9, 9, 1, 1, 9, 3, 9, 7, 3, 1, 7, 1, 9, 1, 1, 3, 1, 3, 9, 7, 7, 9, 7, 3, 3, 9, 7, 7, 7, 3, 3, 7, 9, 7, 9, 9, 9, 3, 9, 7, 3, 9, 9, 7, 1, 9, 3, 9, 7, 3, 1, 7, 9, 9, 3, 7, 9, 7, 1, 7, 1, 1, 9, 3, 7, 1, 3, 9, 9, 1, 3, 1, 3, 1, 3, 9, 1, 7, 1, 3, 7, 3, 1, 3, 7, 1, 9, 1, 7, 7, 3, 7, 7, 9, 3, 1, 3, 9, 1, 3, 9, 1, 3, 1, 9, 3, 3, 7, 9, 1, 3, 3, 7, 3, 1, 9, 1, 7, 1, 7, 9, 1, 3, 7, 7, 3, 7, 1, 1, 7, 7, 1, 3, 7, 9, 3, 7, 1, 9, 1, 9, 9, 1, 9, 3, 7, 9, 3, 9, 9, 3, 7, 3, 7, 1, 3, 1, 9, 7, 3, 1, 9, 3, 9, 7, 9, 1, 7, 7, 3, 1, 9, 7, 3, 7, 7, 3, 1, 9, 1, 7, 3, 3, 7, 3, 7, 3, 3, 1, 7, 1, 7, 9, 9, 7, 9, 1, 3, 9, 9, 1, 3, 7, 9, 3, 7, 1, 7, 3, 1, 7, 9, 1, 7, 3, 1, 3, 9, 1, 3, 7, 3, 1, 9, 9, 7, 1, 3, 1, 7, 9, 3, 9, 1, 3, 7, 7, 9, 1, 1, 3, 7, 7, 9, 1, 7, 1, 7, 7, 9, 1, 9, 1, 3, 3, 3, 7, 1, 3, 9, 9, 7, 3, 9, 3, 9, 3, 1, 9, 3, 1, 3, 9, 7, 9, 7, 1, 3, 3, 7, 9, 1, 3, 9, 9, 3, 7, 9, 1, 7, 7, 1, 3, 9, 7, 7, 9, 9, 1, 3, 9, 1, 7, 9, 1, 3, 9, 7, 1, 9, 7, 9, 1, 7, 9, 7, 3, 1, 7, 3, 7, 3, 9, 9, 9, 1, 1, 9, 7, 3, 7, 1, 9, 3, 9, 7, 1, 7, 1, 3, 3, 7, 9, 9, 7, 1, 7, 1, 3, 1, 7, 3, 1, 3, 7, 7, 3, 9, 7, 7, 9, 7, 7, 7, 3, 7, 7, 3, 7, 9, 7, 9, 1, 1, 3, 1, 3, 7, 1, 1, 3, 9, 9, 3, 1, 7, 9, 7, 3, 3, 1, 7, 9, 3, 9, 9, 1, 9, 7, 7, 7, 1, 7, 3, 9, 7, 3, 7, 9, 1, 3, 1, 9, 3, 3, 9, 3, 1, 3, 7, 9, 7, 9, 7, 3, 7, 3, 9, 1, 3, 7, 9, 3, 7, 9, 9, 3, 7, 7, 1, 3, 9, 3, 9, 1, 3, 9, 1, 3, 7, 1, 7, 9, 7, 9, 3, 1, 3, 9, 1, 1, 7, 1, 1, 9, 1, 3, 9, 3, 3, 1, 7, 1, 3, 3, 9, 3, 7, 9, 1, 3, 1, 3, 7, 9, 3, 1, 7, 7, 9, 7, 3, 7, 1, 1, 7, 9, 1, 1, 3, 9, 3, 9, 3, 7, 3, 7, 1, 7, 1, 9, 1, 1, 9, 1, 3, 1, 3, 3, 9, 1, 7, 3, 9, 9, 1, 3, 7, 1, 9, 3, 7, 3, 1, 7, 9, 1, 1, 9, 1, 1, 9, 7, 1, 7, 7, 3, 3, 1, 3, 1, 3, 3, 9, 7, 1, 3, 7, 3, 7, 3, 1, 9, 1, 7, 3, 9, 1, 7, 9, 3, 3, 7, 7, 1, 7, 1, 3, 1, 3, 3, 1, 1, 7, 9, 7, 9, 3, 1, 3, 3, 9, 1, 3, 7, 3, 7, 1, 9, 9, 1, 1, 1, 9, 9, 1, 3, 7, 3, 7, 3, 3, 7, 1, 3, 9, 3, 7, 9, 7, 9, 9, 7, 1, 1, 3, 9, 1, 7, 3, 9, 9, 7, 3, 1, 7, 3, 9, 7, 3, 3, 1, 7, 1, 1, 9, 9, 7, 1, 9, 9, 9, 7, 7, 1, 3, 9, 3, 3, 7, 9, 3, 9, 1, 7, 3, 3, 7, 9, 1, 9, 1, 1, 9, 3, 7, 1, 9, 9, 7, 3, 9, 7, 3, 9, 7, 1, 1, 3, 7, 1, 3, 9, 3, 3, 9, 9, 3, 7, 7, 9, 1, 7, 3, 1, 1, 9, 7, 3, 3, 9, 3, 3, 7, 9, 1, 9, 7, 9, 7, 9, 9, 1, 3, 7, 9, 1, 1, 3, 3, 1, 1, 1, 3, 9, 7, 3, 3, 3, 9, 3, 1, 3, 7, 7, 3, 9, 9, 3, 1, 7, 3, 9, 9, 1, 1, 7, 9, 3, 1, 3, 7, 9, 7, 1, 9, 9, 3, 1, 7, 9, 1, 3, 1, 3, 9, 1, 7, 1, 7, 1, 3, 7, 7, 9, 1, 7, 9, 7, 3, 1, 3, 9, 1, 9, 3, 7, 9, 9, 3, 1, 3, 1, 7, 3, 9, 1, 7, 9, 1, 3, 7, 3, 7, 3, 9, 1, 1, 3, 3, 9, 1, 3, 9, 3, 1, 7, 3, 1, 7, 9, 3, 9, 3, 7, 9, 1, 3, 9, 1, 3, 9, 3, 3, 1, 1, 3, 3, 7, 9, 9, 9, 1, 1, 1, 3, 3, 9, 7, 9, 7, 1, 7, 9, 9, 1, 3, 7, 9, 1, 3, 1, 7, 7, 9, 3, 9, 9, 3, 1, 7, 7, 3, 1, 7, 9, 3, 7, 1, 7, 7, 9, 1, 3, 7, 9, 9, 7, 3, 7, 9, 1, 7, 1, 1, 3, 9, 1, 7, 1, 9, 3, 9, 3, 3, 9, 7, 9, 1, 7, 9, 3, 3, 3, 7, 7, 9, 9, 1, 7, 1, 7, 1, 3, 3, 9, 7, 9, 3, 9, 7, 9, 9, 1, 7, 1, 3, 3, 9, 3, 9, 7, 7, 9, 1, 3, 9, 9, 1, 1, 1, 1, 7, 9, 1, 1, 7, 7, 3, 9, 7, 1, 3, 9, 7, 1, 3, 9, 7, 3, 1, 3, 9, 3, 1, 3, 7, 1, 3, 7, 3, 3, 3, 3, 1, 7, 9, 3, 9, 1, 3, 7, 3, 9, 1, 7, 1, 3, 7, 3, 3, 7, 9, 1, 7, 1, 7, 9, 3, 9, 7, 7, 1, 9, 3, 7, 1, 7, 9, 1, 3, 9, 3, 1, 1, 3, 9, 7, 7, 9, 7, 9, 3, 1, 7, 9, 1, 7, 1, 7, 9, 3, 1, 3, 9, 3, 7, 1, 3, 7, 1, 7, 9, 1, 3, 3, 9, 3, 9, 1, 3, 1, 9, 7, 9, 7, 7, 1, 9, 1, 9, 7, 1, 3, 1, 7, 1, 3, 1, 7, 9, 7, 3, 9, 1, 1, 1, 3, 3, 9, 1, 7, 3, 7, 1, 3, 3, 9, 1, 7, 1, 7, 3, 9, 1, 3, 7, 1, 9, 3, 9, 7, 3, 9, 1, 3, 3, 7, 1, 7, 1, 9, 1, 1, 9, 7, 1, 7, 9, 3, 1, 1, 3, 1, 7, 3, 7, 7, 3, 1, 3, 9, 7, 7, 3, 3, 9, 1, 7, 3, 9, 1, 7, 1, 9, 1, 3, 9, 7, 3, 1, 7, 9, 3, 7, 7, 3, 9, 7, 9, 1, 3, 9, 7, 1, 3, 9, 3, 1, 7, 3, 7, 9, 1, 3, 3, 1, 1, 3, 9, 9, 1, 3, 9, 3, 9, 3, 1, 3, 7, 9, 1, 7, 1, 7, 1, 7, 3, 9, 1, 1, 3, 9, 7, 7, 9, 3, 7, 1, 3, 9, 9, 1, 3, 7, 1, 3, 7, 3, 7, 9, 9, 7, 1, 7, 1, 7, 9, 3, 3, 3, 9, 1, 3, 1, 7, 9, 7, 1, 7, 9, 3, 1, 7, 9, 9, 3, 1, 3, 7, 1, 7, 1, 9, 7, 3, 9, 7, 9, 9, 7, 1, 9, 3, 7, 9, 3, 9, 1, 7, 3, 9, 7, 7, 9, 9, 3, 1, 3, 1, 3, 3, 1, 7, 1, 3, 3, 1, 7, 9, 1, 1, 3, 3, 7, 7, 9, 1, 3, 1, 9, 9, 9, 3, 3, 3, 3, 7, 9, 3, 1, 9, 7, 9, 3, 1, 1, 7, 9, 9, 1, 1, 3, 1, 7, 7, 3, 9, 9, 9, 7, 7, 9, 9, 7, 3, 1, 1, 3, 1, 7, 7, 9, 1, 1, 7, 9, 1, 7, 1, 3, 9, 3, 3, 7, 1, 3, 9, 3, 1, 7, 7, 3, 1, 7, 3, 9, 3, 9, 1, 3, 9, 7, 9, 3, 7, 1, 3, 1, 7, 9, 9, 3, 9, 3, 1, 7, 3, 1, 7, 3, 9, 1, 3, 9, 1, 1, 7, 1, 1, 3, 9, 1, 3, 9, 9, 7, 7, 9, 1, 7, 7, 9, 1, 9, 1, 7, 3, 9, 7, 1, 7, 7, 9, 3, 1, 9, 1, 7, 3, 9, 1, 7, 1, 7, 7, 1, 1, 9, 9, 9, 3, 7, 7, 9, 1, 3, 7, 3, 1, 1, 9, 9, 3, 1, 9, 1, 9, 9, 9, 7, 1, 9, 7, 3, 7, 7, 9, 3, 7, 7, 9, 3, 9, 1, 3, 7, 9, 1, 1, 7, 9, 1, 7, 1, 7, 3, 7, 3, 1, 7, 3, 3, 3, 7, 1, 7, 9, 9, 7, 9, 1, 7, 1, 1, 7, 7, 1, 3, 7, 3, 1, 7, 9, 9, 7, 1, 9, 7, 1, 1, 3, 1, 3, 7, 9, 3, 7, 1, 3, 7, 1, 7, 7, 1, 9, 7, 3, 9, 1, 3, 3, 1, 3, 7, 1, 7, 3, 7, 3, 1, 7, 3, 9, 3, 9, 1, 7, 7, 9, 1, 7, 1, 1, 3, 3, 1, 1, 3, 9, 3, 9, 1, 7, 7, 1, 3, 9, 9, 7, 9, 9, 1, 9, 1, 7, 9, 1, 7, 1, 3, 9, 1, 3, 1, 7, 9, 3, 1, 7, 7, 3, 1, 7, 9, 3, 7, 9, 1, 7, 9, 7, 3, 9, 3, 7, 7, 9, 9, 7, 3, 7, 9, 1, 9, 7, 9, 3, 9, 7, 3, 9, 7, 3, 1, 7, 9, 7, 9, 7, 9, 1, 3, 7, 3, 3, 1, 3, 9, 9, 9, 9, 7, 9, 3, 1, 7, 1, 1, 1, 1, 7, 7, 1, 1, 3, 9, 7, 1, 1, 3, 3, 1, 7, 3, 9, 9, 7, 3, 9, 7, 3, 7, 3, 7, 9, 3, 7, 7, 3, 7, 1, 3, 7, 1, 9, 1, 7, 1, 9, 3, 1, 3, 7, 9, 3, 3, 9, 3, 1, 1, 9, 3, 9, 7, 1, 7, 9, 1, 7, 9, 1, 3, 3, 9, 7, 7, 7, 1, 1, 7, 9, 1, 1, 9, 3, 1, 3, 7, 3, 9, 9, 1, 9, 9, 9, 9, 1, 9, 7, 1, 3, 9, 3, 7, 1, 1, 1, 9, 3, 3, 7, 7, 1, 9, 7, 3, 3, 1, 7, 3, 7, 9, 3, 9, 9, 9, 1, 7, 9, 7, 3, 7, 9, 9, 7, 9, 1, 1, 7, 1, 1, 3, 3, 9, 1, 1, 7, 3, 9, 7, 9, 7, 1, 7, 1, 9, 3, 1, 1, 3, 7, 9, 9, 7, 1, 9, 1, 3, 1, 1, 7, 1, 7, 9, 1, 9, 1, 3, 7, 3, 7, 9, 9, 3, 1, 1, 9, 3, 9, 1, 3, 1, 9, 1, 3, 7, 3, 7, 3, 7, 3, 7, 9, 9, 9, 1, 9, 7, 7, 3, 1, 7, 9, 1, 9, 1, 1, 1, 3, 7, 3, 7, 3, 1, 9, 3, 9, 3, 3, 1, 7, 1, 7, 3, 1, 3, 7, 3, 9, 1, 7, 9, 3, 1, 9, 1, 3, 7, 3, 9, 1, 7, 9, 3, 1, 1, 3, 9, 1, 9, 7, 1, 7, 7, 9, 9, 1, 3, 3, 1, 1, 9, 9, 1, 3, 3, 7, 3, 7, 7, 3, 9, 7, 9, 1, 7, 1, 3, 3, 3, 7, 1, 1, 3, 1, 3, 7, 9, 3, 7, 1, 7, 3, 9, 1, 7, 3, 7, 9, 3, 9, 1, 9, 1, 1, 7, 3, 9, 7, 1, 3, 7, 7, 3, 7, 9, 7, 1, 7, 9, 3, 1, 3, 3, 7, 7, 9, 7, 1, 7, 7, 3, 3, 3, 7, 1, 9, 9, 3, 9, 7, 7, 1, 3, 9, 3, 7, 7, 3, 1, 3, 9, 1, 1, 3, 9, 1, 1, 7, 7, 9, 9, 9, 9, 3, 1, 3, 3, 1, 7, 9, 3, 7, 9, 7, 7, 3, 7, 3, 1, 7, 1, 3, 1, 7, 9, 7, 9, 1, 1, 3, 7, 9, 7, 1, 9, 1, 7, 9, 7, 7, 1, 7, 9, 7, 1, 7, 1, 3, 3, 9, 3, 3, 7, 9, 1, 7, 9, 9, 3, 7, 3, 1, 1, 9, 9, 1, 3, 3, 1, 1, 3, 3, 9, 9, 3, 1, 7, 9, 7, 1, 9, 9, 1, 3, 7, 9, 9, 7, 1, 3, 3, 9, 3, 3, 9, 3, 1, 7, 3, 1, 1, 3, 9, 3, 1, 7, 7, 3, 3, 9, 7, 3, 9, 3, 3, 7, 3, 9, 7, 1, 7, 1, 1, 7, 9, 1, 7, 9, 3, 9, 3, 9, 1, 7, 9, 3, 9, 9, 1, 3, 7, 3, 3, 1, 9, 1, 7, 1, 3, 9, 7, 7, 3, 7, 1, 9, 1, 7, 1, 7, 9, 1, 1, 7, 3, 1, 9, 9, 3, 1, 9, 1, 7, 1, 9, 1, 3, 1, 1, 3, 3, 7, 9, 1, 1, 1, 7, 9, 7, 1, 9, 1, 3, 1, 9, 3, 9, 7, 1, 9, 7, 7, 3, 1, 3, 9, 3, 7, 3, 7, 9, 1, 9, 7, 9, 3, 1, 1, 1, 1, 9, 1, 3, 3, 9, 7, 3, 7, 9, 3, 7, 3, 9, 9, 1, 3, 9, 1, 9, 7, 3, 1, 1, 3, 3, 7, 3, 7, 1, 3, 9, 7, 9, 1, 7, 9, 1, 3, 7, 7, 9, 3, 3, 7, 9, 3, 7, 1, 3, 1, 9, 1, 7, 3, 3, 7, 1, 3, 7, 9, 3, 3, 9, 9, 3, 9, 7, 9, 3, 3, 7, 9, 1, 7, 1, 7, 1, 9, 9, 1, 3, 7, 9, 7, 7, 1, 3, 3, 7, 9, 7, 9, 7, 9, 1, 1, 1, 7, 1, 9, 1, 1, 1, 7, 9, 9, 1, 7, 3, 3, 3, 7, 9, 7, 9, 9, 7, 3, 7, 9, 9, 7, 1, 9, 1, 1, 7, 1, 3, 1, 9, 3, 1, 3, 7, 1, 7, 9, 1, 3, 7, 9, 1, 7, 3, 1, 7, 1, 3, 9, 9, 1, 7, 9, 1, 9, 3, 9, 9, 7, 7, 9, 3, 3, 1, 7, 1, 7, 9, 7, 1, 7, 9, 3, 3, 3, 3, 3, 1, 7, 1, 7, 7, 9, 7, 3, 9, 3, 9, 3, 1, 3, 9, 7, 1, 3, 1, 7, 9, 1, 3, 7, 7, 9, 7, 9, 1, 3, 7, 1, 3, 9, 1, 7, 9, 3, 7, 1, 7, 3, 9, 7, 3, 1, 9, 3, 7, 1, 1, 9, 1, 7, 1, 1, 3, 7, 1, 1, 3, 9, 3, 9, 9, 7, 9, 9, 7, 9, 7, 9, 3, 7, 3, 7, 3, 7, 1, 7, 7, 1, 3, 1, 7, 7, 9, 1, 3, 9, 7, 3, 7, 1, 9, 9, 1, 9, 3, 9, 9, 1, 3, 7, 3, 1, 9, 3, 7, 1, 9, 7, 3, 7, 3, 1, 3, 7, 9, 1, 3, 7, 1, 7, 3, 9, 9, 7, 1, 9, 3, 1, 1, 3, 7, 1, 7, 3, 9, 1, 3, 7, 9, 1, 3, 7, 7, 9, 1, 3, 9, 1, 3, 7, 1, 3, 7, 3, 7, 1, 7, 1, 9, 7, 7, 9, 3, 7, 9, 9, 1, 7, 9, 9, 9, 7, 1, 3, 9, 3, 1, 7, 1, 7, 7, 1, 1, 7, 9, 7, 1, 9, 7, 1, 9, 7, 3, 7, 3, 1, 3, 9, 9, 1, 7, 3, 3, 9, 3, 3, 7, 9, 7, 3, 1, 9, 3, 9, 7, 1, 3, 3, 9, 3, 9, 7, 9, 1, 3, 9, 7, 7, 3, 1, 9, 3, 9, 3, 9, 3, 3, 7, 9, 1, 3, 9, 1, 7, 3, 1, 3, 1, 7, 1, 1, 3, 1, 7, 7, 7, 3, 9, 1, 7, 9, 1, 3, 7, 1, 9, 3, 9, 1, 1, 7, 3, 7, 9, 1, 7, 7, 9, 3, 9, 7, 3, 9, 7, 9, 1, 1, 1, 3, 9, 1, 3, 9, 3, 9, 1, 1, 3, 3, 9, 1, 3, 9, 1, 3, 9, 3, 9, 1, 3, 7, 3, 9, 7, 9, 7, 9, 7, 1, 1, 1, 3, 7, 9, 1, 3, 7, 9, 7, 3, 7, 7, 9, 1, 1, 3, 7, 3, 9, 1, 7, 3, 9, 7, 1, 7, 3, 7, 1, 3, 3, 7, 3, 7, 3, 7, 9, 3, 7, 1, 3, 1, 3, 9, 1, 1, 9, 3, 7, 7, 7, 9, 7, 9, 3, 1, 3, 7, 1, 1, 1, 3, 9, 7, 3, 9, 3, 7, 3, 1, 3, 9, 7, 7, 1, 3, 9, 3, 7, 1, 7, 9, 1, 9, 9, 1, 9, 1, 3, 3, 1, 7, 3, 9, 3, 9, 3, 1, 1, 7, 3, 7, 3, 7, 3, 9, 1, 1, 3, 1, 1, 9, 9, 1, 7, 7, 3, 9, 1, 9, 1, 7, 1, 3, 9, 1, 3, 9, 1, 7, 3, 9, 3, 9, 3, 1, 7, 3, 7, 1, 1, 9, 1, 7, 3, 9, 3, 1, 3, 3, 7, 9, 1, 7, 3, 1, 7, 9, 9, 1, 7, 9, 9, 1, 1, 3, 1, 9, 3, 1, 9, 7, 1, 7, 3, 1, 1, 9, 9, 1, 7, 7, 9, 1, 3, 1, 7, 9, 3, 1, 7, 1, 7, 3, 1, 7, 3, 7, 1, 3, 9, 9, 3, 9, 3, 7, 9, 9, 1, 7, 1, 7, 1, 3, 7, 3, 1, 1, 9, 3, 7, 9, 3, 9, 1, 7, 9, 1, 1, 7, 9, 1, 7, 3, 9, 9, 7, 9, 7, 1, 9, 1, 7, 1, 3, 7, 1, 9, 3, 1, 7, 3, 3, 9, 1, 7, 1, 3, 1, 1, 9, 1, 7, 1, 1, 1, 7, 9, 7, 7, 9, 3, 3, 9, 9, 7, 1, 3, 1, 3, 3, 9, 3, 7, 7, 9, 1, 1, 9, 7, 9, 1, 7, 1, 3, 9, 1, 9, 7, 1, 3, 9, 9, 1, 3, 3, 1, 1, 7, 1, 7, 9, 3, 1, 3, 9, 7, 3, 9, 3, 7, 7, 9, 3, 7, 1, 3, 7, 3, 1, 1, 3, 9, 7, 9, 3, 7, 9, 3, 7, 3, 9, 1, 7, 9, 1, 1, 3, 9, 3, 9, 3, 7, 7, 1, 7, 9, 9, 7, 1, 7, 9, 3, 1, 3, 9, 3, 7, 3, 7, 3, 1, 7, 7, 9, 1, 9, 7, 7, 3, 9, 7, 1, 7, 3, 9, 3, 9, 1, 3, 7, 9, 1, 7, 1, 7, 1, 1, 3, 3, 9, 9, 1, 1, 7, 9, 7, 3, 3, 7, 9, 9, 3, 9, 9, 1, 3, 9, 9, 1, 1, 9, 1, 3, 9, 1, 3, 9, 1, 3, 7, 7, 9, 3, 7, 3, 9, 1, 7, 3, 7, 7, 9, 9, 9, 1, 7, 1, 7, 3, 7, 7, 1, 3, 1, 7, 7, 3, 7, 3, 1, 3, 9, 9, 7, 9, 7, 9, 3, 9, 3, 1, 9, 1, 3, 3, 9, 7, 1, 3, 3, 1, 9, 1, 7, 1, 7, 7, 1, 1, 9, 1, 3, 9, 7, 9, 7, 9, 9, 3, 1, 7, 9, 1, 7, 9, 3, 9, 1, 9, 3, 9, 1, 7, 7, 1, 3, 9, 1, 3, 1, 9, 9, 1, 1, 7, 9, 1, 9, 7, 7, 1, 3, 3, 1, 7, 7, 3, 9, 1, 1, 3, 9, 7, 3, 7, 1, 7, 3, 7, 1, 7, 1, 1, 1, 1, 7, 7, 9, 1, 9, 3, 7, 1, 3, 9, 3, 7, 1, 1, 7, 9, 3, 1, 3, 7, 1, 3, 9, 3, 1, 1, 3, 7, 9, 1, 7, 1, 9, 7, 7, 3, 9, 7, 7, 7, 9, 1, 1, 3, 3, 1, 1, 9, 3, 7, 3, 7, 1, 7, 7, 3, 9, 9, 9, 1, 9, 1, 1, 7, 9, 7, 9, 1, 3, 1, 1, 3, 9, 7, 1, 3, 9, 3, 9, 1, 7, 9, 1, 9, 7, 3, 7, 9, 3, 7, 9, 9, 1, 3, 1, 9, 7, 9, 1, 7, 7, 1, 7, 1, 1, 7, 3, 9, 1, 7, 1, 7, 1, 7, 1, 1, 3, 3, 1, 3, 9, 1, 9, 3, 3, 1, 1, 7, 1, 7, 1, 9, 1, 9, 7, 3, 1, 3, 9, 1, 3, 9, 3, 9, 1, 1, 3, 3, 9, 3, 1, 3, 7, 3, 1, 3, 9, 3, 9, 9, 9, 7, 7, 9, 3, 1, 1, 1, 7, 7, 3, 3, 3, 1, 7, 3, 9, 1, 1, 3, 3, 9, 9, 7, 3, 1, 3, 1, 7, 9, 3, 1, 9, 9, 7, 9, 3, 9, 7, 3, 9, 7, 1, 3, 3, 9, 3, 9, 7, 1, 7, 3, 9, 9, 7, 3, 3, 7, 1, 1, 3, 1, 9, 1, 7, 9, 9, 3, 9, 1, 9, 3, 9, 7, 1, 3, 3, 9, 9, 3, 7, 9, 3, 3, 1, 9, 9, 1, 7, 3, 1, 1, 9, 7, 1, 3, 9, 3, 9, 1, 7, 9, 9, 3, 1, 3, 7, 3, 1, 7, 3, 7, 9, 3, 3, 7, 1, 3, 7, 9, 7, 3, 3, 9, 9, 7, 7, 9, 9, 3, 3, 7, 9, 9, 1, 9, 3, 9, 1, 1, 3, 3, 7, 1, 9, 1, 9, 7, 3, 9, 3, 9, 3, 9, 1, 9, 3, 7, 1, 3, 9, 7, 9, 1, 1, 3, 9, 7, 1, 3, 7, 7, 1, 9, 1, 9, 1, 1, 3, 1, 1, 9, 1, 3, 3, 9, 7, 9, 9, 1, 9, 1, 7, 3, 9, 1, 3, 1, 3, 3, 7, 7, 9, 9, 1, 9, 9, 1, 1, 9, 3, 7, 3, 7, 7, 9, 7, 7, 1, 3, 9, 9, 3, 3, 7, 3, 9, 1, 1, 3, 3, 7, 1, 7, 3, 9, 7, 1, 9, 1, 3, 7, 3, 7, 7, 9, 9, 9, 1, 9, 1, 1, 3, 7, 7, 1, 7, 9, 1, 3, 3, 1, 3, 9, 1, 7, 7, 3, 9, 3, 9, 1, 1, 7, 1, 7, 3, 1, 9, 1, 7, 3, 9, 1, 3, 9, 1, 1, 3, 3, 9, 7, 9, 1, 7, 9, 3, 3, 3, 1, 7, 9, 7, 3, 1, 3, 3, 9, 7, 9, 7, 3, 7, 1, 7, 9, 7, 3, 3, 1, 9, 1, 1, 9, 7, 3, 7, 7, 7, 3, 3, 7, 3, 9, 1, 1, 9, 7, 1, 9, 1, 1, 7, 9, 1, 1, 3, 9, 1, 9, 9, 1, 7, 7, 9, 3, 7, 7, 9, 3, 9, 1, 7, 9, 3, 9, 1, 7, 3, 7, 7, 1, 3, 9, 1, 3, 9, 1, 1, 3, 1, 7, 7, 1, 3, 1, 7, 3, 7, 9, 9, 1, 3, 7, 1, 9, 1, 1, 3, 9, 7, 1, 7, 9, 3, 7, 9, 1, 9, 7, 9, 9, 1, 1, 7, 3, 3, 1, 7, 7, 1, 3, 3, 7, 3, 9, 7, 1, 3, 7, 3, 9, 7, 1, 7, 1, 7, 9, 3, 1, 3, 7, 3, 9, 9, 9, 1, 3, 1, 7, 9, 1, 7, 9, 7, 1, 7, 1, 9, 3, 7, 1, 1, 9, 3, 9, 3, 1, 1, 7, 9, 1, 1, 9, 3, 7, 1, 3, 7, 3, 1, 1, 9, 3, 3, 9, 9, 3, 9, 1, 1, 9, 3, 7, 9, 9, 7, 3, 9, 3, 1, 7, 3, 7, 9, 3, 1, 7, 1, 3, 9, 3, 3, 7, 1, 9, 9, 1, 3, 1, 7, 1, 9, 1, 3, 9, 3, 7, 9, 1, 3, 7, 1, 3, 9, 1, 1, 7, 3, 3, 9, 3, 3, 7, 9, 1, 7, 1, 7, 1, 3, 9, 1, 3, 7, 9, 3, 9, 7, 1, 3, 1, 7, 9, 3, 9, 3, 9, 1, 7, 9, 1, 1, 7, 1, 7, 9, 1, 7, 7, 9, 7, 3, 9, 1, 3, 3, 9, 1, 7, 7, 3, 9, 7, 1, 7, 3, 9, 3, 1, 9, 3, 7, 7, 1, 1, 3, 9, 1, 7, 9, 9, 9, 3, 7, 1, 9, 9, 3, 7, 9, 7, 9, 1, 3, 7, 3, 9, 7, 9, 7, 7, 9, 1, 7, 9, 3, 9, 9, 7, 1, 3, 1, 3, 9, 3, 1, 3, 9, 1, 1, 3, 1, 7, 3, 9, 1, 9, 7, 7, 7, 7, 3, 7, 7, 9, 9, 1, 3, 9, 1, 3, 1, 1, 9, 3, 3, 7, 9, 1, 3, 3, 9, 7, 1, 3, 7, 7, 9, 9, 1, 3, 7, 1, 7, 9, 3, 7, 3, 7, 7, 1, 7, 1, 7, 7, 3, 3, 7, 9, 9, 1, 9, 1, 7, 1, 7, 7, 7, 7, 3, 9, 3, 1, 7, 9, 9, 3, 1, 7, 3, 1, 7, 3, 1, 7, 3, 9, 7, 3, 9, 7, 7, 9, 1, 7, 7, 1, 9, 3, 9, 7, 1, 3, 7, 3, 1, 3, 7, 3, 1, 9, 1, 7, 7, 9, 3, 1, 7, 9, 7, 9, 1, 3, 9, 3, 1, 7, 3, 9, 7, 3, 3, 9, 9, 1, 3, 1, 3, 1, 7, 3, 3, 9, 1, 7, 3, 1, 3, 1, 3, 9, 7, 9, 1, 9, 1, 3, 7, 9, 3, 7, 3, 1, 3, 7, 1, 3, 9, 7, 3, 1, 7, 1, 9, 9, 3, 7, 9, 3, 7, 3, 9, 1, 3, 7, 9, 1, 7, 7, 9, 1, 7, 3, 9, 1, 1, 9, 9, 3, 9, 1, 7, 3, 9, 3, 7, 9, 9, 9, 1, 3, 3, 3, 7, 3, 9, 3, 9, 1, 3, 9, 1, 7, 9, 3, 9, 7, 3, 7, 3, 9, 1, 3, 1, 1, 7, 7, 9, 9, 1, 1, 1, 3, 3, 1, 3, 3, 1, 9, 3, 9, 7, 9, 1, 9, 3, 7, 1, 7, 7, 9, 7, 1, 3, 1, 7, 9, 3, 7, 9, 9, 1, 7, 1, 3, 7, 7, 1, 3, 9, 7, 1, 7, 9, 3, 3, 1, 9, 1, 1, 7, 1, 3, 3, 7, 3, 1, 3, 1, 3, 7, 9, 9, 1, 3, 9, 7, 3, 9, 7, 1, 7, 9, 1, 9, 9, 7, 3, 7, 9, 1, 3, 7, 9, 9, 9, 7, 7, 9, 1, 1, 9, 9, 7, 1, 9, 1, 3, 3, 7, 9, 7, 3, 7, 9, 7, 9, 7, 9, 3, 3, 9, 7, 7, 1, 7, 9, 3, 9, 1, 1, 3, 7, 9, 1, 3, 3, 7, 7, 7, 3, 7, 9, 3, 3, 9, 1, 3, 9, 3, 7, 1, 7, 9, 3, 9, 3, 9, 1, 3, 7, 7, 1, 7, 9, 7, 9, 7, 3, 1, 3, 7, 7, 1, 9, 7, 1, 9, 7, 9, 9, 7, 1, 7, 1, 3, 9, 1, 7, 9, 9, 3, 7, 3, 1, 7, 3, 1, 3, 3, 9, 7, 1, 9, 3, 1, 9, 1, 1, 1, 7, 9, 1, 9, 3, 7, 9, 3, 7, 9, 9, 1, 7, 1, 7, 3, 7, 3, 1, 3, 7, 3, 7, 9, 1, 1, 7, 1, 3, 3, 7, 3, 1, 7, 9, 7, 3, 7, 9, 7, 3, 7, 9, 7, 1, 3, 7, 1, 3, 9, 1, 9, 3, 1, 3, 9, 9, 3, 9, 7, 7, 3, 7, 1, 7, 1, 3, 9, 3, 9, 1, 9, 7, 9, 1, 7, 3, 1, 7, 3, 9, 9, 7, 1, 1, 9, 3, 9, 3, 1, 3, 9, 9, 9, 9, 7, 3, 7, 1, 3, 3, 9, 7, 3, 1, 3, 3, 1, 7, 3, 3, 9, 1, 7, 3, 7, 9, 1, 1, 7, 7, 9, 1, 7, 9, 7, 1, 3, 3, 3, 3, 1, 3, 9, 3, 7, 3, 9, 1, 9, 3, 9, 9, 1, 7, 7, 9, 9, 1, 7, 1, 7, 1, 9, 7, 3, 9, 3, 3, 9, 7, 1, 1, 9, 3, 7, 3, 9, 3, 9, 1, 3, 9, 1, 7, 9, 9, 7, 3, 7, 3, 7, 1, 7, 9, 7, 3, 7, 3, 9, 9, 3, 3, 1, 3, 3, 3, 3, 1, 3, 9, 1, 1, 7, 3, 1, 3, 9, 1, 7, 7, 9, 9, 9, 3, 1, 1, 9, 1, 3, 1, 3, 9, 3, 1, 3, 7, 3, 7, 9, 7, 3, 9, 7, 1, 3, 3, 7, 1, 3, 9, 3, 9, 7, 1, 3, 9, 3, 3, 3, 7, 1, 9, 7, 3, 1, 7, 1, 7, 1, 3, 3, 1, 9, 1, 3, 7, 7, 9, 9, 7, 7, 9, 1, 1, 7, 1, 3, 9, 7, 9, 3, 1, 9, 3, 1, 9, 7, 9, 3, 7, 3, 9, 7, 1, 1, 9, 1, 7, 3, 3, 7, 3, 3, 9, 1, 3, 1, 9, 9, 1, 9, 1, 1, 7, 3, 7, 1, 9, 7, 3, 9, 1, 1, 7, 9, 7, 7, 7, 9, 9, 7, 9, 7, 3, 9, 7, 9, 3, 1, 7, 9, 9, 3, 9, 7, 1, 7, 9, 9, 7, 1, 7, 9, 7, 1, 3, 7, 3, 7, 9, 1, 3, 9, 7, 1, 7, 7, 1, 1, 7, 7, 9, 1, 1, 3, 3, 1, 7, 1, 3, 9, 1, 9, 9, 3, 7, 1, 1, 1, 7, 1, 7, 9, 1, 3, 7, 3, 7, 9, 1, 3, 7, 9, 1, 3, 9, 1, 7, 1, 7, 9, 1, 3, 9, 3, 1, 7, 7, 3, 1, 1, 3, 9, 7, 3, 9, 9, 1, 7, 3, 7, 3, 1, 3, 7, 9, 1, 3, 9, 9, 7, 7, 9, 3, 7, 9, 3, 3, 1, 7, 3, 9, 3, 9, 3, 1, 7, 1, 9, 9, 7, 3, 7, 7, 3, 9, 1, 7, 3, 7, 3, 9, 3, 1, 1, 7, 9, 7, 1, 3, 7, 1, 3, 7, 7, 1, 3, 7, 9, 9, 1, 1, 9, 7, 3, 3, 9, 1, 3, 9, 7, 1, 9, 1, 9, 1, 9, 9, 1, 7, 7, 9, 1, 3, 3, 9, 7, 7, 3, 9, 7, 7, 9, 9, 1, 3, 7, 1, 3, 1, 9, 3, 1, 9, 7, 1, 1, 1, 9, 1, 3, 3, 9, 1, 7, 7, 3, 7, 9, 9, 7, 9, 3, 1, 3, 3, 9, 7, 3, 1, 1, 1, 3, 1, 1, 3, 9, 7, 1, 3, 9, 1, 7, 3, 7, 7, 7, 7, 9, 3, 9, 1, 3, 9, 1, 9, 9, 1, 9, 7, 1, 9, 7, 9, 1, 1, 9, 9, 3, 1, 9, 7, 3, 1, 3, 9, 1, 3, 7, 9, 3, 3, 7, 9, 9, 9, 1, 3, 1, 7, 3, 9, 9, 1, 3, 7, 1, 3, 7, 9, 3, 1, 9, 9, 3, 3, 1, 1, 9, 7, 1, 3, 9, 1, 3, 7, 1, 3, 9, 7, 9, 3, 1, 3, 9, 7, 9, 1, 7, 9, 1, 9, 1, 3, 7, 9, 9, 3, 9, 1, 9, 3, 7, 9, 1, 9, 3, 1, 7, 1, 9, 1, 3, 9, 3, 9, 7, 7, 1, 3, 3, 9, 9, 7, 1, 3, 3, 9, 1, 3, 1, 3, 7, 1, 7, 3, 1, 1, 3, 9, 1, 9, 3, 1, 9, 3, 7, 1, 1, 9, 9, 3, 7, 1, 7, 1, 3, 9, 1, 9, 1, 1, 3, 3, 3, 7, 9, 7, 9, 7, 3, 7, 7, 9, 1, 1, 3, 7, 1, 7, 1, 1, 3, 7, 9, 9, 9, 9, 1, 7, 1, 9, 7, 3, 3, 7, 7, 3, 9, 1, 1, 9, 9, 7, 9, 3, 9, 7, 1, 7, 7, 3, 7, 9, 9, 3, 9, 9, 1, 7, 3, 9, 3, 3, 9, 3, 1, 3, 7, 3, 9, 1, 1, 7, 7, 9, 3, 7, 3, 9, 3, 9, 1, 9, 3, 7, 9, 1, 3, 7, 1, 3, 7, 3, 7, 3, 7, 3, 9, 1, 9, 1, 7, 9, 1, 1, 3, 7, 1, 9, 1, 3, 7, 1, 3, 9, 9, 1, 1, 7, 3, 9, 7, 1, 3, 9, 1, 9, 7, 1, 3, 9, 1, 3, 9, 3, 1, 1, 7, 3, 7, 9, 9, 1, 7, 3, 7, 3, 7, 9, 1, 9, 1, 3, 9, 7, 1, 3, 7, 9, 9, 9, 7, 9, 3, 9, 7, 9, 1, 3, 7, 3, 1, 7, 9, 1, 7, 3, 3, 1, 1, 3, 9, 1, 9, 1, 1, 9, 7, 7, 9, 1, 1, 7, 9, 1, 3, 7, 3, 1, 3, 7, 3, 7, 3, 7, 9, 9, 3, 3, 9, 7, 1, 7, 9, 9, 3, 3, 1, 9, 9, 1, 7, 3, 9, 3, 1, 1, 9, 9, 7, 7, 9, 1, 7, 9, 1, 7, 3, 3, 9, 1, 1, 7, 7, 7, 9, 1, 9, 1, 7, 1, 3, 7, 1, 1, 3, 9, 7, 7, 9, 9, 1, 7, 3, 1, 1, 3, 7, 9, 7, 9, 7, 1, 3, 9, 1, 3, 3, 1, 1, 7, 9, 1, 1, 3, 9, 1, 3, 3, 3, 7, 3, 7, 3, 9, 3, 1, 7, 7, 1, 7, 9, 1, 7, 1, 7, 3, 9, 9, 7, 9, 7, 1, 3, 9, 3, 9, 7, 1, 3, 7, 9, 1, 7, 7, 7, 3, 1, 3, 9, 3, 1, 9, 3, 3, 9, 1, 3, 7, 1, 9, 1, 3, 9, 1, 9, 7, 3, 7, 7, 3, 3, 9, 9, 7, 1, 3, 7, 3, 9, 3, 9, 7, 1, 1, 7, 9, 7, 1, 3, 9, 7, 1, 3, 7, 3, 1, 9, 3, 1, 9, 9, 1, 9, 3, 1, 7, 1, 7, 1, 9, 7, 1, 9, 9, 1, 3, 7, 3, 3, 3, 3, 9, 3, 1, 7, 1, 3, 3, 1, 7, 7, 9, 3, 7, 7, 9, 9, 1, 9, 3, 1, 7, 9, 1, 3, 9, 9, 1, 9, 3, 7, 7, 3, 3, 1, 7, 3, 7, 1, 9, 7, 1, 1, 3, 7, 7, 9, 3, 9, 7, 9, 7, 7, 3, 7, 1, 7, 1, 3, 9, 1, 7, 3, 1, 9, 7, 7, 9, 9, 7, 3, 7, 7, 1, 7, 9, 3, 7, 1, 3, 9, 1, 9, 1, 3, 7, 3, 1, 1, 1, 9, 7, 3, 9, 1, 1, 3, 1, 3, 3, 1, 3, 7, 1, 7, 1, 9, 3, 7, 9, 1, 1, 3, 1, 7, 3, 7, 3, 7, 3, 9, 7, 9, 1, 1, 3, 3, 9, 1, 7, 3, 7, 1, 9, 3, 9, 1, 7, 9, 1, 9, 3, 9, 1, 3, 1, 7, 9, 1, 7, 1, 7, 3, 9, 7, 7, 9, 3, 9, 9, 1, 1, 3, 9, 1, 9, 1, 7, 9, 7, 1, 7, 1, 3, 9, 1, 9, 1, 9, 3, 7, 7, 3, 3, 1, 3, 7, 9, 1, 3, 9, 3, 7, 1, 7, 9, 7, 1, 7, 9, 1, 7, 3, 9, 7, 1, 1, 9, 3, 9, 7, 3, 7, 3, 3, 3, 1, 9, 3, 9, 7, 9, 7, 9, 9, 1, 7, 3, 7, 3, 9, 3, 1, 9, 3, 9, 7, 3, 9, 1, 9, 9, 1, 1, 7, 9, 1, 1, 1, 3, 1, 9, 7, 1, 3, 9, 1, 1, 3, 1, 7, 3, 9, 7, 3, 7, 7, 9, 9, 9, 1, 7, 3, 7, 1, 1, 3, 9, 3, 7, 1, 7, 9, 9, 9, 7, 9, 1, 7, 1, 3, 9, 1, 9, 7, 3, 1, 1, 3, 9, 7, 7, 1, 9, 7, 7, 3, 7, 7, 1, 7, 3, 9, 1, 1, 3, 9, 3, 9, 7, 9, 9, 7, 3, 7, 9, 1, 7, 3, 9, 3, 9, 1, 7, 3, 9, 9, 1, 7, 7, 3, 1, 7, 9, 3, 3, 7, 9, 9, 7, 7, 9, 1, 7, 1, 9, 9, 1, 3, 1, 9, 1, 3, 3, 9, 3, 9, 3, 7, 3, 1, 7, 3, 7, 3, 7, 7, 9, 1, 7, 3, 9, 1, 3, 7, 1, 3, 1, 1, 9, 1, 9, 1, 1, 7, 3, 1, 3, 7, 1, 3, 1, 7, 9, 1, 7, 3, 3, 3, 7, 1, 3, 7, 1, 9, 3, 1, 7, 3, 1, 9, 7, 1, 1, 1, 9, 7, 1, 7, 3, 9, 1, 1, 1, 1, 3, 1, 7, 3, 9, 1, 9, 7, 3, 7, 1, 7, 1, 3, 7, 7, 3, 1, 3, 9, 7, 7, 1, 3, 9, 1, 9, 3, 7, 9, 3, 9, 7, 7, 7, 9, 3, 7, 7, 9, 1, 9, 3, 1, 1, 9, 1, 7, 9, 7, 9, 1, 9, 9, 3, 1, 9, 1, 7, 7, 3, 9, 7, 3, 7, 3, 7, 9, 7, 1, 3, 7, 9, 1, 1, 7, 3, 9, 1, 3, 7, 9, 1, 7, 9, 1, 1, 3, 1, 3, 3, 7, 9, 7, 3, 3, 3, 1, 7, 3, 3, 1, 7, 1, 7, 7, 9, 3, 9, 3, 7, 3, 9, 1, 3, 9, 1, 7, 9, 7, 1, 3, 1, 1, 1, 1, 7, 3, 9, 7, 3, 7, 9, 1, 7, 9, 9, 7, 1, 3, 7, 3, 9, 1, 3, 9, 3, 1, 1, 9, 7, 9, 1, 7, 3, 7, 7, 1, 3, 3, 1, 7, 3, 7, 3, 9, 3, 7, 7, 1, 7, 1, 9, 3, 1, 3, 1, 1, 3, 7, 7, 3, 7, 3, 9, 1, 9, 7, 3, 3, 1, 9, 7, 7, 3, 9, 9, 3, 3, 9, 9, 9, 1, 1, 3, 9, 1, 1, 3, 9, 9, 1, 1, 3, 7, 3, 9, 1, 7, 1, 3, 9, 1, 1, 7, 7, 9, 9, 3, 9, 1, 9, 1, 3, 1, 1, 1, 7, 3, 9, 7, 1, 7, 9, 1, 3, 9, 3, 9, 1, 3, 9, 9, 7, 3, 7, 3, 7, 9, 1, 1, 1, 3, 9, 1, 3, 9, 1, 1, 1, 9, 3, 1, 1, 3, 1, 1, 7, 9, 7, 7, 9, 3, 9, 7, 1, 7, 1, 9, 3, 9, 1, 7, 3, 1, 3, 1, 9, 3, 3, 3, 3, 9, 1, 9, 3, 9, 7, 3, 9, 3, 1, 7, 1, 7, 9, 1, 3, 3, 9, 9, 1, 7, 9, 1, 9, 3, 1, 3, 7, 9, 3, 7, 9, 7, 7, 7, 9, 3, 9, 7, 3, 9, 9, 7, 7, 7, 9, 9, 3, 9, 1, 7, 3, 7, 1, 1, 1, 3, 7, 3, 7, 3, 9, 3, 3, 9, 1, 3, 9, 9, 3, 3, 7, 9, 9, 7, 7, 3, 7, 9, 9, 3, 3, 9, 1, 3, 9, 7, 3, 9, 9, 1, 7, 1, 3, 7, 9, 9, 3, 1, 9, 7, 3, 7, 7, 9, 7, 1, 9, 9, 3, 7, 9, 3, 9, 1, 9, 1, 3, 7, 9, 3, 9, 7, 1, 1, 7, 1, 7, 3, 9, 7, 9, 1, 9, 3, 9, 7, 9, 1, 1, 7, 9, 1, 3, 1, 9, 7, 9, 1, 9, 3, 9, 9, 1, 1, 3, 3, 3, 9, 9, 7, 3, 7, 9, 1, 3, 7, 9, 1, 7, 3, 1, 7, 3, 7, 9, 7, 7, 1, 3, 9, 7, 3, 3, 3, 9, 9, 3, 3, 9, 1, 7, 1, 1, 7, 3, 9, 1, 3, 1, 3, 3, 7, 9, 3, 7, 1, 7, 9, 9, 7, 3, 3, 9, 1, 1, 7, 9, 3, 7, 9, 1, 1, 3, 3, 7, 3, 3, 9, 9, 3, 7, 9, 7, 7, 1, 3, 9, 7, 7, 1, 9, 1, 7, 9, 7, 1, 3, 9, 7, 3, 7, 3, 7, 1, 3, 9, 7, 1, 3, 9, 3, 9, 7, 7, 9, 7, 3, 9, 1, 3, 7, 1, 7, 3, 1, 1, 9, 7, 7, 3, 7, 3, 1, 1, 3, 9, 1, 3, 1, 1, 3, 7, 9, 9, 1, 1, 7, 7, 3, 7, 3, 7, 7, 3, 9, 1, 3, 3, 7, 1, 1, 7, 9, 1, 1, 7, 7, 3, 9, 7, 3, 1, 9, 7, 3, 9, 7, 3, 7, 3, 9, 1, 7, 1, 3, 7, 3, 7, 9, 3, 9, 1, 7, 7, 9, 1, 7, 9, 3, 9, 1, 1, 9, 3, 1, 3, 9, 1, 3, 7, 7, 3, 1, 3, 3, 3, 1, 7, 1, 1, 3, 7, 9, 1, 3, 3, 9, 1, 1, 3, 1, 1, 3, 9, 7, 9, 7, 9, 7, 1, 1, 1, 7, 9, 9, 1, 1, 7, 9, 3, 3, 9, 7, 9, 1, 1, 7, 9, 9, 1, 1, 1, 3, 9, 3, 9, 1, 7, 9, 1, 7, 3, 1, 7, 9, 1, 3, 3, 3, 9, 9, 1, 7, 9, 9, 1, 7, 3, 1, 3, 9, 7, 3, 7, 9, 3, 9, 1, 7, 3, 9, 7, 3, 9, 3, 9, 1, 7, 3, 3, 7, 3, 3, 3, 9, 1, 7, 7, 9, 1, 9, 1, 7, 3, 9, 9, 7, 1, 9, 3, 7, 3, 1, 3, 7, 3, 7, 3, 3, 9, 1, 1, 9, 3, 9, 7, 3, 7, 3, 9, 7, 9, 3, 1, 3, 7, 9, 7, 9, 1, 3, 7, 1, 7, 1, 1, 7, 9, 9, 1, 7, 1, 7, 3, 9, 7, 1, 3, 7, 9, 7, 9, 9, 1, 7, 1, 3, 9, 3, 3, 7, 3, 1, 7, 9, 3, 1, 7, 3, 1, 1, 3, 9, 7, 9, 7, 1, 9, 9, 3, 7, 9, 1, 1, 3, 1, 7, 3, 7, 3, 3, 9, 3, 9, 1, 3, 9, 1, 9, 3, 9, 9, 7, 1, 7, 9, 1, 1, 7, 3, 1, 7, 1, 3, 7, 3, 9, 3, 7, 7, 3, 3, 7, 9, 9, 1, 9, 9, 1, 9, 3, 1, 1, 9, 9, 1, 7, 7, 7, 3, 3, 7, 9, 1, 3, 9, 1, 7, 7, 1, 1, 3, 7, 3, 9, 1, 3, 3, 7, 3, 9, 3, 7, 1, 1, 1, 7, 3, 9, 9, 1, 1, 9, 9, 1, 1, 9, 9, 1, 9, 7, 9, 1, 7, 3, 9, 1, 3, 1, 7, 7, 9, 1, 1, 9, 1, 3, 1, 7, 1, 9, 7, 3, 7, 7, 3, 7, 3, 9, 9, 1, 9, 1, 3, 3, 1, 7, 9, 3, 1, 3, 7, 9, 3, 7, 3, 9, 1, 7, 1, 1, 9, 9, 3, 7, 1, 7, 1, 3, 9, 1, 1, 3, 7, 7, 1, 7, 9, 3, 7, 3, 7, 9, 1, 3, 7, 3, 1, 9, 1, 1, 9, 3, 3, 7, 1, 9, 9, 3, 1, 7, 9, 7, 9, 1, 3, 9, 1, 7, 7, 7, 3, 3, 1, 7, 9, 3, 9, 9, 3, 9, 1, 1, 1, 9, 9, 7, 1, 7, 9, 7, 9, 1, 7, 9, 9, 3, 1, 1, 7, 1, 9, 1, 3, 7, 9, 3, 1, 9, 7, 9, 1, 3, 9, 3, 7, 9, 1, 1, 1, 3, 7, 9, 7, 3, 7, 1, 1, 3, 3, 7, 1, 7, 1, 7, 3, 9, 3, 9, 9, 3, 9, 7, 1, 7, 1, 7, 9, 3, 9, 1, 3, 7, 3, 7, 1, 7, 9, 1, 1, 3, 9, 7, 9, 7, 1, 9, 3, 9, 7, 9, 7, 1, 3, 1, 1, 3, 9, 7, 1, 1, 3, 7, 1, 3, 7, 9, 1, 7, 7, 9, 1, 7, 9, 7, 3, 3, 1, 1, 1, 3, 3, 1, 7, 7, 9, 1, 3, 7, 9, 1, 3, 3, 3, 3, 3, 7, 7, 7, 9, 1, 7, 7, 7, 9, 3, 9, 3, 7, 9, 7, 9, 1, 7, 7, 3, 3, 9, 7, 9, 3, 1, 7, 9, 7, 7, 9, 1, 7, 9, 9, 1, 3, 3, 7, 3, 9, 1, 1, 3, 9, 3, 1, 7, 7, 7, 7, 1, 3, 3, 9, 1, 1, 9, 9, 3, 7, 1, 1, 7, 9, 1, 9, 9, 1, 3, 9, 3, 1, 1, 3, 1, 9, 1, 3, 9, 1, 9, 1, 3, 3, 3, 9, 3, 3, 3, 9, 7, 3, 1, 3, 1, 7, 3, 9, 3, 7, 1, 3, 9, 1, 9, 7, 1, 9, 1, 7, 9, 1, 7, 1, 9, 1, 3, 9, 1, 1, 3, 7, 1, 3, 7, 9, 1, 7, 9, 9, 3, 1, 7, 3, 9, 9, 7, 3, 7, 3, 3, 3, 7, 9, 7, 1, 3, 9, 3, 1, 3, 3, 7, 7, 1, 9, 1, 3, 3, 7, 9, 1, 9, 3, 1, 1, 7, 3, 9, 3, 7, 3, 7, 9, 7, 9, 1, 1, 3, 7, 7, 1, 1, 3, 1, 3, 1, 7, 7, 9, 3, 1, 9, 9, 1, 9, 7, 7, 3, 3, 7, 9, 3, 9, 1, 1, 3, 7, 3, 7, 7, 9, 1, 1, 9, 9, 7, 3, 9, 7, 7, 1, 1, 7, 1, 7, 9, 1, 1, 7, 7, 9, 1, 7, 9, 1, 3, 3, 7, 3, 1, 7, 1, 9, 7, 3, 9, 3, 1, 3, 3, 9, 7, 3, 7, 3, 7, 9, 1, 7, 7, 9, 9, 3, 9, 1, 9, 3, 9, 3, 7, 9, 9, 3, 7, 1, 1, 7, 9, 1, 7, 3, 9, 3, 9, 7, 7, 3, 1, 7, 9, 1, 7, 3, 1, 1, 9, 1, 3, 7, 7, 1, 3, 7, 7, 9, 1, 3, 3, 9, 1, 7, 9, 1, 3, 7, 3, 9, 7, 1, 3, 7, 7, 9, 9, 1, 7, 3, 9, 9, 1, 7, 9, 3, 1, 3, 9, 3, 1, 7, 1, 7, 3, 9, 7, 7, 9, 3, 7, 1, 7, 3, 3, 3, 7, 9, 3, 9, 1, 7, 3, 9, 3, 3, 7, 9, 1, 3, 1, 3, 1, 9, 9, 9, 3, 9, 1, 1, 1, 1, 1, 9, 3, 7, 3, 1, 3, 7, 7, 7, 9, 3, 9, 1, 7, 1, 3, 7, 7, 1, 9, 3, 3, 9, 1, 3, 3, 9, 7, 7, 7, 7, 7, 3, 1, 1, 3, 1, 9, 1, 3, 7, 9, 1, 9, 3, 1, 9, 7, 3, 7, 1, 7, 3, 9, 1, 3, 7, 3, 9, 1, 1, 1, 7, 1, 7, 9, 3, 9, 9, 9, 1, 7, 7, 9, 7, 3, 9, 3, 3, 9, 9, 3, 1, 7, 1, 1, 3, 7, 7, 9, 7, 7, 7, 9, 7, 3, 1, 3, 9, 3, 9, 3, 7, 9, 9, 3, 1, 7, 9, 3, 9, 7, 1, 3, 7, 7, 7, 3, 1, 9, 7, 1, 3, 9, 1, 9, 1, 1, 3, 9, 3, 7, 1, 1, 3, 3, 9, 1, 9, 1, 1, 7, 3, 7, 1, 1, 7, 1, 7, 1, 7, 1, 9, 3, 7, 1, 3, 7, 9, 1, 3, 9, 1, 7, 9, 1, 3, 9, 7, 3, 3, 9, 9, 7, 3, 7, 3, 7, 3, 7, 9, 9, 9, 3, 3, 7, 9, 7, 3, 3, 9, 1, 1, 1, 1, 9, 9, 1, 7, 9, 3, 7, 3, 9, 7, 3, 7, 3, 9, 3, 7, 9, 1, 9, 1, 3, 3, 1, 3, 7, 7, 1, 7, 3, 7, 1, 9, 1, 7, 1, 3, 3, 3, 9, 7, 9, 3, 1, 7, 9, 1, 7, 1, 9, 9, 1, 3, 3, 1, 3, 7, 3, 7, 3, 1, 9, 3, 9, 3, 3, 9, 7, 1, 1, 9, 9, 1, 3, 9, 3, 7, 1, 1, 9, 7, 7, 7, 7, 7, 9, 1, 3, 3, 9, 7, 9, 1, 9, 9, 7, 7, 7, 9, 1, 1, 7, 7, 1, 7, 9, 9, 3, 9, 7, 9, 9, 1, 3, 9, 1, 7, 3, 7, 3, 1, 7, 3, 1, 9, 9, 1, 9, 1, 3, 9, 7, 9, 7, 1, 3, 9, 1, 1, 7, 7, 9, 1, 7, 9, 9, 1, 3, 1, 3, 7, 1, 1, 7, 3, 7, 9, 9, 1, 1, 7, 3, 9, 1, 7, 3, 7, 9, 1, 7, 3, 7, 1, 3, 7, 9, 1, 3, 7, 9, 9, 1, 1, 3, 1, 3, 7, 9, 1, 1, 9, 3, 7, 1, 7, 9, 7, 9, 3, 1, 7, 3, 1, 3, 7, 3, 7, 9, 7, 7, 9, 1, 3, 7, 3, 3, 1, 7, 3, 7, 3, 1, 9, 7, 9, 1, 7, 3, 7, 9, 3, 9, 1, 7, 9, 1, 9, 3, 1, 7, 1, 3, 7, 7, 7, 9, 3, 7, 3, 7, 1, 1, 3, 7, 1, 3, 7, 1, 1, 3, 1, 1, 7, 9, 3, 1, 3, 1, 3, 3, 3, 9, 3, 9, 1, 3, 7, 9, 3, 3, 1, 3, 3, 7, 3, 7, 3, 1, 9, 9, 7, 3, 9, 1, 9, 9, 1, 3, 7, 7, 1, 3, 9, 1, 9, 7, 3, 1, 3, 9, 3, 3, 9, 3, 1, 1, 9, 3, 3, 9, 9, 7, 9, 3, 9, 3, 1, 7, 9, 7, 7, 9, 7, 3, 1, 7, 7, 9, 1, 1, 3, 7, 9, 1, 1, 3, 9, 7, 1, 3, 7, 9, 1, 7, 7, 9, 9, 1, 7, 1, 7, 3, 9, 1, 3, 9, 3, 9, 9, 1, 3, 1, 1, 3, 9, 1, 7, 3, 7, 7, 7, 7, 9, 3, 1, 9, 1, 7, 9, 7, 9, 1, 1, 3, 9, 1, 7, 3, 9, 7, 1, 9, 3, 9, 7, 3, 1, 7, 7, 3, 1, 7, 7, 7, 1, 1, 1, 7, 9, 1, 3, 3, 7, 3, 1, 7, 7, 9, 1, 3, 7, 3, 9, 7, 1, 7, 7, 3, 9, 7, 1, 1, 3, 7, 3, 1, 7, 9, 3, 7, 3, 7, 7, 3, 9, 7, 9, 1, 9, 1, 7, 1, 3, 9, 3, 7, 9, 1, 1, 7, 1, 9, 1, 9, 9, 3, 7, 3, 7, 1, 3, 1, 3, 7, 3, 9, 9, 9, 1, 7, 1, 7, 1, 3, 1, 9, 7, 7, 9, 3, 9, 3, 9, 1, 9, 1, 3, 9, 7, 9, 7, 1, 7, 3, 1, 7, 1, 9, 3, 9, 1, 1, 3, 7, 3, 7, 3, 1, 1, 3, 1, 7, 3, 7, 9, 7, 9, 1, 7, 7, 3, 9, 7, 7, 1, 7, 3, 9, 1, 9, 1, 7, 9, 7, 1, 7, 7, 7, 9, 9, 3, 3, 3, 7, 9, 1, 3, 7, 9, 7, 3, 1, 9, 3, 7, 7, 9, 9, 7, 9, 9, 7, 9, 1, 3, 9, 7, 9, 1, 7, 3, 7, 9, 3, 1, 9, 3, 1, 3, 9, 3, 3, 9, 3, 3, 1, 7, 9, 3, 9, 7, 1, 7, 3, 1, 3, 9, 9, 1, 7, 1, 3, 9, 3, 3, 1, 3, 1, 3, 7, 3, 3, 1, 9, 3, 3, 1, 9, 7, 3, 9, 7, 1, 9, 7, 3, 9, 3, 7, 3, 9, 1, 1, 9, 1, 3, 9, 1, 1, 9, 3, 1, 7, 7, 1, 3, 1, 1, 7, 9, 3, 9, 1, 9, 7, 7, 9, 3, 7, 9, 1, 7, 3, 1, 9, 7, 3, 9, 1, 3, 7, 7, 9, 7, 9, 3, 9, 3, 9, 1, 1, 1, 9, 1, 7, 9, 3, 1, 7, 3, 9, 1, 1, 1, 3, 1, 7, 3, 9, 3, 3, 9, 9, 7, 9, 9, 1, 7, 1, 9, 7, 1, 3, 9, 1, 9, 9, 1, 1, 9, 9, 3, 1, 3, 1, 9, 9, 1, 9, 3, 9, 1, 3, 7, 1, 7, 3, 7, 1, 1, 9, 3, 1, 7, 7, 9, 7, 3, 7, 1, 9, 1, 3, 9, 1, 7, 3, 1, 7, 9, 3, 9, 3, 1, 7, 3, 7, 3, 7, 1, 7, 9, 9, 3, 7, 9, 7, 1, 9, 9, 1, 9, 1, 7, 1, 9, 1, 3, 3, 7, 3, 3, 7, 1, 3, 9, 9, 1, 1, 9, 9, 7, 1, 7, 9, 3, 7, 3, 3, 9, 1, 9, 9, 1, 1, 7, 3, 9, 7, 3, 9, 7, 7, 3, 1, 3, 9, 7, 9, 9, 3, 9, 1, 7, 3, 3, 7, 9, 3, 1, 7, 7, 9, 9, 1, 1, 1, 7, 9, 3, 7, 3, 3, 1, 7, 3, 9, 9, 7, 1, 7, 3, 7, 3, 9, 3, 9, 1, 7, 9, 7, 1, 1, 7, 1, 7, 3, 9, 1, 3, 3, 7, 3, 7, 1, 7, 9, 7, 9, 7, 3, 3, 3, 9, 1, 1, 1, 7, 7, 9, 3, 7, 9, 1, 3, 3, 1, 3, 3, 3, 7, 3, 3, 1, 1, 7, 1, 7, 7, 1, 3, 3, 9, 1, 9, 7, 1, 3, 1, 7, 1, 3, 9, 1, 7, 9, 1, 1, 3, 1, 7, 1, 3, 9, 1, 3, 9, 3, 9, 1, 9, 3, 7, 9, 1, 9, 7, 7, 9, 3, 1, 3, 7, 9, 7, 1, 9, 1, 3, 1, 9, 9, 1, 1, 3, 9, 3, 3, 9, 9, 1, 7, 3, 7, 7, 1, 9, 9, 3, 7, 1, 3, 7, 1, 3, 7, 3, 1, 7, 3, 3, 1, 1, 7, 9, 3, 9, 3, 7, 1, 7, 9, 7, 9, 3, 1, 7, 3, 1, 7, 3, 9, 3, 7, 9, 3, 1, 7, 7, 1, 7, 1, 7, 1, 7, 9, 1, 3, 7, 1, 7, 9, 1, 7, 7, 9, 3, 9, 3, 3, 9, 1, 3, 1, 3, 7, 1, 1, 9, 7, 3, 7, 3, 9, 3, 1, 7, 3, 7, 3, 7, 9, 1, 7, 9, 3, 7, 3, 1, 3, 1, 3, 3, 9, 9, 7, 1, 7, 9, 1, 7, 3, 7, 9, 9, 1, 7, 9, 3, 9, 1, 3, 7, 7, 3, 7, 1, 9, 1, 9, 9, 1, 1, 9, 3, 3, 1, 7, 3, 7, 1, 9, 9, 1, 7, 3, 1, 9, 3, 1, 3, 7, 1, 7, 3, 7, 1, 9, 1, 7, 3, 7, 3, 9, 3, 1, 7, 9, 3, 1, 3, 1, 7, 9, 7, 7, 3, 9, 7, 7, 3, 3, 3, 7, 9, 9, 1, 7, 3, 9, 7, 1, 7, 9, 1, 3, 7, 1, 1, 3, 1, 9, 9, 1, 7, 3, 7, 1, 3, 1, 3, 1, 1, 3, 9, 7, 9, 3, 9, 7, 7, 3, 1, 1, 3, 1, 7, 3, 9, 7, 1, 7, 9, 3, 7, 9, 1, 1, 9, 9, 7, 3, 9, 9, 3, 7, 1, 7, 9, 3, 7, 7, 9, 1, 3, 7, 3, 1, 3, 1, 1, 3, 9, 1, 7, 3, 7, 9, 1, 1, 7, 1, 9, 9, 1, 3, 1, 9, 1, 7, 9, 1, 7, 7, 9, 9, 3, 9, 3, 1, 3, 1, 1, 7, 7, 9, 1, 1, 3, 7, 9, 3, 7, 3, 9, 1, 3, 9, 1, 7, 3, 7, 9, 1, 1, 7, 9, 3, 9, 1, 1, 3, 1, 7, 1, 3, 3, 1, 7, 9, 7, 9, 7, 3, 9, 7, 9, 9, 7, 3, 3, 7, 9, 9, 1, 7, 3, 9, 3, 3, 1, 1, 7, 3, 3, 3, 9, 7, 9, 7, 7, 9, 1, 3, 1, 3, 9, 7, 9, 1, 1, 9, 3, 3, 7, 1, 3, 7, 9, 9, 1, 7, 3, 9, 1, 3, 3, 1, 9, 7, 7, 9, 9, 1, 7, 3, 1, 7, 7, 1, 7, 7, 1, 3, 9, 7, 3, 3, 1, 7, 1, 9, 3, 7, 1, 9, 1, 9, 3, 9, 3, 1, 7, 3, 7, 7, 9, 1, 1, 7, 3, 9, 3, 1, 3, 1, 7, 9, 7, 7, 3, 9, 9, 9, 3, 9, 1, 9, 3, 7, 1, 7, 9, 7, 7, 1, 7, 1, 7, 9, 3, 9, 7, 3, 9, 3, 9, 7, 3, 1, 1, 3, 9, 9, 1, 9, 7, 1, 3, 9, 9, 7, 7, 9, 1, 9, 1, 7, 9, 1, 3, 7, 1, 1, 9, 1, 9, 1, 3, 3, 9, 1, 3, 3, 1, 3, 7, 1, 3, 1, 7, 9, 3, 9, 3, 9, 3, 3, 3, 7, 7, 1, 3, 9, 1, 9, 3]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Read about the \"Prime Conspiracy\", recently discovered by Lemke Oliver and Soundararajan. Can you detect their conspiracy in our data set of primes?"
      ],
      "metadata": {
        "id": "hLnsP8JpXuPq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "I can detect their conspircy in our data set of primes. We can see 1 following another number often in fluctiations."
      ],
      "metadata": {
        "id": "p0-1Xur0XyVZ"
      }
    }
  ]
}